{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/sky.jpg","path":"images/sky.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/background_night.jpg","path":"images/background_night.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"4546907ffdf9a28c4e3ff9756dc5c7bd241d96f7","modified":1557504870027},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1557504870218},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1557504870218},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1557504870218},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1557504870218},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1557504870218},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1557504870218},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1557504870218},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1557504870228},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1557504870228},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1557504870228},{"_id":"themes/next/_config.yml","hash":"17183b5a94cbdcb662c3faa10463dbf706bae29d","modified":1557504870228},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1557504870228},{"_id":"themes/next/gulpfile.coffee","hash":"79dcff7f65f262755f99122fca27986b52db098f","modified":1557504870228},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1557504870309},{"_id":"source/_posts/Android-Day-1.md","hash":"70bb5958778a5cc5e94784c3dbda208c62d37a73","modified":1557504870027},{"_id":"source/_posts/Android-Day-2.md","hash":"4fe97f5308e66170d935083508a850481345b958","modified":1557504870037},{"_id":"source/_posts/Android-Making-new-view.md","hash":"a0179d9ef30097b7bb58fc70f30a13a8a55234e8","modified":1557504870047},{"_id":"source/_posts/Android-N-以上使用其他应用打开文件-FileProvider.md","hash":"35e96d63bbc5d78d0d45329e611941bddf1f1a6d","modified":1557504870057},{"_id":"source/_posts/Android-Service.md","hash":"4a45dc62b2510737709eedc1948a184636e9b35e","modified":1557504870096},{"_id":"source/_posts/Android-Studio-中常用的一些布局-三.md","hash":"e39abbfe99e2452bc651d5bb33950175189991bb","modified":1557504870096},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二.md","hash":"ef40b723a4be60ba2fa9e2e3c214681d3e282f22","modified":1557504870096},{"_id":"source/_posts/Android-Studio-中常用的一些布局.md","hash":"85c8cc4744dface1130032571c737dda015f31b1","modified":1557504870106},{"_id":"source/_posts/Android-初次面试.md","hash":"b65474d2410a96f8888915d12709cf7355cf077d","modified":1557504870106},{"_id":"source/_posts/Android-广播机制与服务.md","hash":"b9b14fee97b9969d4fb62f47b4c706c97eae88fd","modified":1557504870106},{"_id":"source/_posts/Android开发者的升级之路.md","hash":"3831a8c72dae0d207a5c8a0407020162cb17b43e","modified":1557505106306},{"_id":"source/_posts/C-中的委托与事件.md","hash":"f681d5dce05100afa6639d8c972928c657ac7b27","modified":1557504870118},{"_id":"source/_posts/C-多态性与虚函数.md","hash":"9585b252924e734f49d6051bf20459163ea1043e","modified":1557504870128},{"_id":"source/_posts/Echarts-的基本使用和-Android-连接-Mysql-数据库.md","hash":"c05e8287898fc4779f17118e1ae44a1363c62c25","modified":1557504870138},{"_id":"source/_posts/Markdown语法的基本使用简介.md","hash":"e1dde60acde031f713ca09f720c4fa9e0736ba92","modified":1557504870148},{"_id":"source/_posts/java-回调机制的使用.md","hash":"4db52ff8ace631e241b624f8690ee482b13c6bb5","modified":1557504870148},{"_id":"source/_posts/一些感触.md","hash":"d2505eaee296fb5e356a1468da67f698e2da65eb","modified":1557504870148},{"_id":"source/_posts/使用-LitePal-操作数据库.md","hash":"15d264cd0ccf0942cfd7e7352e39be2a8866f78b","modified":1557504870188},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客.md","hash":"dff0a253044a53925f593f3dd1c754fd2fa4a9aa","modified":1557504870188},{"_id":"source/_posts/常用的hexo和git命令-备查.md","hash":"03a7bff080e6ffa94e37f43332938ca76b4e994d","modified":1557504870198},{"_id":"source/_posts/慌慌张张-匆匆忙忙-为何生活总是这样.md","hash":"49757c8cd2bfce351d20a7b82a2b6909590328b6","modified":1557504870198},{"_id":"source/_posts/新学期计划.md","hash":"3ea175df07a05f84ad36e396ce83c34f43318098","modified":1557504870198},{"_id":"source/_posts/浅谈-MVP-架构.md","hash":"c5d58571651e1e97b18de24404cd9f6f4419f687","modified":1557504870208},{"_id":"source/about/index.md","hash":"179831cb57751eaf683620a61a920032577b8a5e","modified":1557504870218},{"_id":"source/tags/index.md","hash":"91b62e5f7bd38b97df7f5d4b6b649a8d270df93b","modified":1557504870218},{"_id":"source/categories/index.md","hash":"2997cf74aeb01f170e293bfb6115e16ea8613861","modified":1557504870218},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1557504870228},{"_id":"themes/next/languages/fr-FR.yml","hash":"e86e563d7ac8e763a1e6afdebcfa10c66c207c9c","modified":1557504870228},{"_id":"themes/next/languages/default.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1557504870228},{"_id":"themes/next/languages/en.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1557504870228},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1557504870228},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1557504870228},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1557504870248},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1557504870248},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1557504870248},{"_id":"themes/next/languages/ru.yml","hash":"e71189d203feaeae515c79a46f0462f99aadc941","modified":1557504870248},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5b69ab4ab097d37948c4f51ccddffd312ce031c1","modified":1557504870248},{"_id":"themes/next/languages/zh-hk.yml","hash":"abd889d418c1c25b5e8f837bbbaedb9389e935eb","modified":1557504870248},{"_id":"themes/next/languages/zh-tw.yml","hash":"dff76bee4ffa4b70b8ece2785bcd4b0f930bbcc5","modified":1557504870248},{"_id":"themes/next/layout/_layout.swig","hash":"54366831bac735c5916610c252a6b12550412be2","modified":1557504870248},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1557504870309},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1557504870309},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1557504870309},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1557504870309},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1557504870309},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1557504870309},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1557504870309},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1557504870309},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1557504870309},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1557504870479},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1557504870479},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1557504870479},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870429},{"_id":"source/_posts/Android-Studio-中常用的一些布局/Beach.jpg","hash":"c3c6b264324b7a790bd1f2cd9f5e9478d3cab25d","modified":1557504870106},{"_id":"source/_posts/Android-Studio-中常用的一些布局-三/rst.png","hash":"9ec5427b336edd02f93ee6eaae95e6b8f91ca81c","modified":1557506404906},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/rst.png","hash":"bbd3320314cb39e0b986fe28a9c7e80e4c43216f","modified":1557504870096},{"_id":"source/_posts/C-中的委托与事件/Csharp_delegate_event.png","hash":"d639792a1eced6c9606ceeb23de80df2b44ce69f","modified":1557504870118},{"_id":"source/_posts/java-回调机制的使用/asynchronous.png","hash":"59709b86f01c2280dc3798ccf1bf34bd0f1e9d08","modified":1557504870148},{"_id":"source/_posts/java-回调机制的使用/callback.png","hash":"f7614a2d664533a14fd6100534cbf5ebfbe807a8","modified":1557504870148},{"_id":"source/_posts/java-回调机制的使用/direct.png","hash":"9a039b6440a1ebb6daffa782bb2bc4f58e8121f5","modified":1557504870148},{"_id":"source/_posts/java-回调机制的使用/direct1.png","hash":"5a8097de740dee938d4235026c17f17febd53927","modified":1557504870148},{"_id":"source/_posts/java-回调机制的使用/testrst.png","hash":"1b3cdf963ba7370a9b205dd8fa45ec0782dccf3b","modified":1557504870148},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/newrepository.png","hash":"4a83e40640c4f96c1507299d31a1fd2a0557193d","modified":1557504870198},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/public.png","hash":"1d926deb7fc3b4b79cde9e244a4e6b42ceea4de1","modified":1557504870198},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/signup.png","hash":"45dd0af67fd68f67c9d507dbc7b95bc6a09d22ba","modified":1557504870198},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/themes.png","hash":"8b4f18d13f5e2e70d08cf1e75fd8301fd9b90787","modified":1557504870198},{"_id":"source/_posts/新学期计划/flowers.jpg","hash":"14de4d1e2aa16182cb64436dac1cdd7b8ea811f0","modified":1557504870198},{"_id":"source/_posts/浅谈-MVP-架构/BaseView.png","hash":"0340c528c2b0970f4a888bb6ea71146604ac6a0e","modified":1557504870208},{"_id":"source/_posts/浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png","hash":"18ab1cbe44b405c660a4b3ae301d7f93f5425507","modified":1557504870208},{"_id":"source/_posts/浅谈-MVP-架构/filelist.png","hash":"dc2adfe12ba07e0a86933ad8900dd375ffd4a008","modified":1557504870208},{"_id":"source/_posts/浅谈-MVP-架构/mvp.png","hash":"7c91a79ce4ff74f9e24a801a83261b08408ac2bf","modified":1557504870208},{"_id":"source/_posts/浅谈-MVP-架构/taskslist.png","hash":"1052d7fe8fe75845c5d1017a08adc60595dfc237","modified":1557504870218},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557504870248},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557504870248},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1557504870248},{"_id":"themes/next/layout/_macro/post.swig","hash":"032e10779704710396b243b32b4dc98ca0e16249","modified":1557504870248},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1557504870248},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9d111d6d4dff2cbec1ed8cdc836922b9ab578b21","modified":1557504870248},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1557504870248},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1557504870248},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1557504870248},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1557504870248},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1557504870258},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1557504870258},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1557504870268},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1557504870268},{"_id":"themes/next/layout/_partials/search.swig","hash":"109b3d3403c72ac09926e35a1d00c6d36cc4f7fa","modified":1557504870268},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1557504870268},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1557504870268},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1557504870268},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1557504870309},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1557504870319},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1557504870319},{"_id":"themes/next/scripts/tags/exturl.js","hash":"4de8b315a58095b39659b515387ea8091a67a9a4","modified":1557504870319},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1557504870319},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1557504870319},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1557504870319},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1557504870419},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1557504870429},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1557504870429},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557504870439},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557504870439},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557504870439},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557504870439},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557504870439},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557504870439},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557504870439},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557504870439},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557504870439},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557504870439},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557504870439},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1557504870439},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/nextrst.png","hash":"10df30320362adc9f3283fdef9b8ebd764233edd","modified":1557504870096},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/sea.jpg","hash":"9fa65396d122eb77d4a3669c3993df24c414740c","modified":1557504870106},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/flower.jpg","hash":"9a7ff6359fbe437c6e6f4005138b45575f4e59a6","modified":1557504870188},{"_id":"source/_posts/常用的hexo和git命令-备查/beautyhouse.jpg","hash":"4378aa73acfa3a21b8729d5d458f0043853dd898","modified":1557504870198},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870268},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870268},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870409},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870409},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870409},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870419},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557504870419},{"_id":"themes/next/source/images/sky.jpg","hash":"f111a561ea7902a0c4f5d26bc3be78f1db36acc3","modified":1557504870439},{"_id":"source/_posts/Android-Studio-中常用的一些布局-三/naturetree.jpg","hash":"8c7d522baa2b8b0eb46cd54d089571e6cadff72b","modified":1557506398953},{"_id":"source/_posts/一些感触/road.jpg","hash":"eb51ea3deb9b5609f5531abeab8a4f416f7149a9","modified":1557504870158},{"_id":"source/_posts/浅谈-MVP-架构/beautiful-nature-images.jpg","hash":"ab6473ec1da1a064306bc6aade56ac24c2b6806a","modified":1557504870208},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1557504870248},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1557504870248},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1557504870258},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1557504870258},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1557504870268},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1557504870268},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1557504870268},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1557504870268},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1557504870268},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1557504870268},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1557504870268},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1557504870268},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1557504870268},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1557504870268},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1557504870299},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1557504870299},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1557504870299},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1557504870299},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1557504870299},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"7b8c28f4feda18c3e6d5fa44ec1e40480956cf48","modified":1557504870409},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1557504870409},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1557504870409},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1557504870419},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1557504870419},{"_id":"themes/next/source/css/_variables/base.styl","hash":"008955b907a15e86bc92e6765614cc099abf8bf1","modified":1557504870419},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1557504870439},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1557504870439},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1557504870439},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1557504870439},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1557504870439},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1557504870439},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13d5396d2c5803cdd9732c727f5f2308b47368c","modified":1557504870439},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1557504870449},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1557504870449},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1557504870449},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1557504870449},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1557504870459},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1557504870449},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1557504870459},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1557504870459},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1557504870459},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1557504870469},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1557504870459},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1557504870469},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1557504870479},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1557504870479},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1557504870479},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1557504870479},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1557504870479},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1557504870479},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1557504870479},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1557504870479},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1557504870479},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1557504870479},{"_id":"source/_posts/Android-Service/index.jpg","hash":"4d7c8c1d53c2efd8af08b890ab251b5356732bb7","modified":1557506334115},{"_id":"source/_posts/java-回调机制的使用/nature-images.jpg","hash":"576f005029c276376c37be5f74e15eba567be83b","modified":1557504870148},{"_id":"themes/next/source/favicon.ico","hash":"c964f7eb8690cd6161d5d9588b0770da0d86f90a","modified":1557504870429},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1557504870469},{"_id":"source/_posts/Android-Day-1/index.jpg","hash":"d570859c3517806dbced789703c2ee4828e38fd4","modified":1557476614000},{"_id":"source/_posts/Android-初次面试/index.jpg","hash":"f3cc87a097ae64907cc68a36f2f3148c17a3090d","modified":1557506467050},{"_id":"source/_posts/C-中的委托与事件/water.jpg","hash":"73d99634313c5ea900ec564b39e55f81930600fd","modified":1557506708303},{"_id":"source/_posts/Markdown语法的基本使用简介/beautifulnature.jpg","hash":"8a47d7324988b33fb8cc9d0131a8922d54773d80","modified":1557507018389},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1557504870278},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1557504870278},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1557504870279},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1557504870279},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1557504870279},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1557504870289},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1557504870299},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1557504870319},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1557504870319},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1557504870319},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1557504870319},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1557504870319},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1557504870379},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1557504870399},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1557504870409},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1557504870409},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1557504870409},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1557504870409},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1557504870409},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"fd8674eca737f4bb3b1ca66a3137f65922e2150a","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1557504870419},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1557504870459},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1557504870459},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1557504870459},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1557504870459},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1557504870459},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1557504870479},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1557504870479},{"_id":"source/_posts/Android-Day-2/index.jpg","hash":"ba2448c954a21355ae6385a0b225faef9274c618","modified":1557505793157},{"_id":"source/_posts/Android-Making-new-view/index.jpg","hash":"6b54d95b74c6c79b94a579abe4ec4aab5159b8a9","modified":1557506022592},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557504870469},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557504870469},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1557504870479},{"_id":"source/_posts/C-多态性与虚函数/stars in night sky.jpg","hash":"45061f56a0c44754799b9bc9ca80aba8b6ab6745","modified":1557506661626},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1557504870339},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1557504870349},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1557504870369},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1557504870379},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"38c0db81a7361b947aeb8a4cc2919ffd9b33503e","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1557504870389},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1557504870399},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1557504870399},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1557504870399},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1557504870419},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1557504870419},{"_id":"themes/next/source/images/background_night.jpg","hash":"807d5e3543950cb39ae90d2a31afc939dc836a6b","modified":1557504870439},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1557504870449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1557504870459},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1557504870459},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1557504870459},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1557504870469},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557504870469},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1557504870469},{"_id":"source/_posts/使用-LitePal-操作数据库/night.jpg","hash":"ef13cd5110ba1aadf037198da2f80127b85ce366","modified":1557507147981},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1557504870449},{"_id":"source/_posts/慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg","hash":"63f36c0d64107648a473552f220b45d74689183c","modified":1557507080048},{"_id":"themes/next/source/images/avatar.png","hash":"5e9acd9bf14283a44d54f808c51ced6541b1564c","modified":1557507292077},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1557504870469},{"_id":"source/_posts/Android-广播机制与服务/main-img.jpg","hash":"06b0cad51e83e34fb293abddeb3479e11ddcbcc2","modified":1557506600991},{"_id":"source/_posts/Android-N-以上使用其他应用打开文件-FileProvider/index.jpg","hash":"1ec85d5acb5cf0c4937b219ca6691e72e8795d28","modified":1557506198107},{"_id":"source/_posts/Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg","hash":"4dc28a48d5302a3af56343126c7c13aa5ec8e732","modified":1557506791980},{"_id":"themes/next-reloaded/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1557562897601},{"_id":"themes/next-reloaded/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1557562897602},{"_id":"themes/next-reloaded/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1557562897603},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1557562897603},{"_id":"themes/next-reloaded/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1557562897604},{"_id":"themes/next-reloaded/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1557562897622},{"_id":"themes/next-reloaded/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1557562897623},{"_id":"themes/next-reloaded/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1557562897624},{"_id":"themes/next-reloaded/_config.yml","hash":"6415dc6438e3dc0fb5182c3640e42a6078c376bc","modified":1557562897628},{"_id":"themes/next-reloaded/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1557562897626},{"_id":"themes/next-reloaded/bower.json","hash":"070292487d141982c9bef64bd32e1cb39d03d395","modified":1557562897628},{"_id":"themes/next-reloaded/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1557562897625},{"_id":"themes/next-reloaded/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1557562897630},{"_id":"themes/next-reloaded/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1557562897655},{"_id":"themes/next-reloaded/package.json","hash":"d3ea523f723aafd6bebcd8a47a0d976c69dfeaf5","modified":1557562897767},{"_id":"themes/next-reloaded/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557562897541},{"_id":"themes/next-reloaded/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1557562897560},{"_id":"themes/next-reloaded/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557562752048},{"_id":"themes/next-reloaded/.git/index","hash":"5dbdd615aa990e993acc6e993e4d42420e825614","modified":1557562897922},{"_id":"themes/next-reloaded/.git/packed-refs","hash":"5b9c164bd001216952ac7322c55b85812c802311","modified":1557562897527},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1557562897606},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1557562897607},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1557562897608},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1557562897613},{"_id":"themes/next-reloaded/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1557562897614},{"_id":"themes/next-reloaded/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1557562897615},{"_id":"themes/next-reloaded/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1557562897615},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1557562897617},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"1105a6eb0d4ee1b1bf1554c5c51a47160abed62a","modified":1557562897618},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1557562897619},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"0f826b5ea4646008e2e147dca8b4842ecf96d093","modified":1557562897618},{"_id":"themes/next-reloaded/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1557562897620},{"_id":"themes/next-reloaded/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1557562897621},{"_id":"themes/next-reloaded/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1557562897622},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1557562897632},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1557562897633},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1557562897634},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1557562897635},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1557562897636},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1557562897637},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1557562897638},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1557562897639},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1557562897640},{"_id":"themes/next-reloaded/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1557562897657},{"_id":"themes/next-reloaded/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1557562897657},{"_id":"themes/next-reloaded/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1557562897659},{"_id":"themes/next-reloaded/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1557562897659},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1557562897660},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1557562897661},{"_id":"themes/next-reloaded/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1557562897663},{"_id":"themes/next-reloaded/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1557562897664},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1557562897665},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1557562897666},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1557562897667},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1557562897666},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1557562897668},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1557562897669},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1557562897669},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1557562897670},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1557562897671},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1557562897672},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1557562897673},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1557562897673},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1557562897678},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1557562897761},{"_id":"themes/next-reloaded/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1557562897762},{"_id":"themes/next-reloaded/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1557562897762},{"_id":"themes/next-reloaded/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1557562897763},{"_id":"themes/next-reloaded/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1557562897764},{"_id":"themes/next-reloaded/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1557562897765},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1557562897766},{"_id":"themes/next-reloaded/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1557562897772},{"_id":"themes/next-reloaded/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1557562897773},{"_id":"themes/next-reloaded/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1557562897918},{"_id":"themes/next-reloaded/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1557562897919},{"_id":"themes/next-reloaded/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1557562897920},{"_id":"themes/next-reloaded/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897876},{"_id":"themes/next-reloaded/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557562752052},{"_id":"themes/next-reloaded/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557562752051},{"_id":"themes/next-reloaded/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557562752054},{"_id":"themes/next-reloaded/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557562752058},{"_id":"themes/next-reloaded/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557562752055},{"_id":"themes/next-reloaded/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557562752059},{"_id":"themes/next-reloaded/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557562752059},{"_id":"themes/next-reloaded/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557562752056},{"_id":"themes/next-reloaded/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557562752059},{"_id":"themes/next-reloaded/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557562752060},{"_id":"themes/next-reloaded/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557562752061},{"_id":"themes/next-reloaded/.git/logs/HEAD","hash":"3b60635b7402628b76a2333596b0ada362ee46a1","modified":1557562897548},{"_id":"themes/next-reloaded/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557562752063},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1557562897611},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1557562897610},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1557562897611},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1557562897612},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1557562897642},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1557562897643},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1557562897644},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1557562897645},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1557562897647},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1557562897647},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1557562897648},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1557562897649},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1557562897650},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1557562897652},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1557562897653},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"4016948fdb971e4f905efb7a5bb3add3dd58e7a8","modified":1557562897654},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1557562897655},{"_id":"themes/next-reloaded/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1557562897676},{"_id":"themes/next-reloaded/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557562897676},{"_id":"themes/next-reloaded/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557562897677},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1557562897682},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1557562897684},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"85b17818c26075a9d22aa938e8434b4a0bdde766","modified":1557562897683},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1557562897685},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1557562897686},{"_id":"themes/next-reloaded/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1557562897687},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1557562897700},{"_id":"themes/next-reloaded/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1557562897701},{"_id":"themes/next-reloaded/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1557562897714},{"_id":"themes/next-reloaded/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1557562897714},{"_id":"themes/next-reloaded/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1557562897715},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1557562897716},{"_id":"themes/next-reloaded/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1557562897721},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1557562897722},{"_id":"themes/next-reloaded/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1557562897736},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1557562897736},{"_id":"themes/next-reloaded/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1557562897737},{"_id":"themes/next-reloaded/layout/_third-party/copy-code.swig","hash":"e0d65688661875200cb4dd401fc5ac833c697f91","modified":1557562897746},{"_id":"themes/next-reloaded/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1557562897750},{"_id":"themes/next-reloaded/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1557562897751},{"_id":"themes/next-reloaded/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1557562897752},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1557562897753},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1557562897754},{"_id":"themes/next-reloaded/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1557562897753},{"_id":"themes/next-reloaded/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1557562897755},{"_id":"themes/next-reloaded/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1557562897760},{"_id":"themes/next-reloaded/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1557562897769},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1557562897770},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1557562897771},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1557562897775},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1557562897774},{"_id":"themes/next-reloaded/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1557562897776},{"_id":"themes/next-reloaded/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1557562897775},{"_id":"themes/next-reloaded/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1557562897777},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1557562897777},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1557562897778},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1557562897779},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1557562897780},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1557562897779},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1557562897781},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1557562897782},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1557562897875},{"_id":"themes/next-reloaded/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1557562897889},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1557562897890},{"_id":"themes/next-reloaded/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1557562897891},{"_id":"themes/next-reloaded/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1557562897891},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1557562897892},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1557562897892},{"_id":"themes/next-reloaded/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1557562897893},{"_id":"themes/next-reloaded/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1557562897895},{"_id":"themes/next-reloaded/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1557562897896},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"fed16cd4fa5fac8cb4a63633d1840792a056f2be","modified":1557562897897},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1557562897877},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557562897877},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1557562897878},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557562897879},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557562897880},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557562897881},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557562897882},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557562897883},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557562897883},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557562897884},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557562897884},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557562897885},{"_id":"themes/next-reloaded/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557562897886},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1557562897886},{"_id":"themes/next-reloaded/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557562897887},{"_id":"themes/next-reloaded/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557562897887},{"_id":"themes/next-reloaded/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557562897888},{"_id":"themes/next-reloaded/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557562897888},{"_id":"themes/next-reloaded/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897848},{"_id":"themes/next-reloaded/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897849},{"_id":"themes/next-reloaded/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897851},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897872},{"_id":"themes/next-reloaded/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557562897874},{"_id":"themes/next-reloaded/.git/refs/heads/master","hash":"d591ec996e3ef9ea7b8660103296d85235048ca2","modified":1557562897547},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1557562897681},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1557562897682},{"_id":"themes/next-reloaded/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1557562897689},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1557562897692},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1557562897689},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1557562897690},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1557562897693},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1557562897692},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1557562897694},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1557562897698},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1557562897696},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1557562897703},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1557562897704},{"_id":"themes/next-reloaded/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1557562897704},{"_id":"themes/next-reloaded/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1557562897705},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1557562897707},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1557562897708},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1557562897709},{"_id":"themes/next-reloaded/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1557562897709},{"_id":"themes/next-reloaded/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1557562897710},{"_id":"themes/next-reloaded/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1557562897711},{"_id":"themes/next-reloaded/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1557562897712},{"_id":"themes/next-reloaded/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1557562897717},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1557562897718},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1557562897719},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1557562897719},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1557562897720},{"_id":"themes/next-reloaded/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1557562897725},{"_id":"themes/next-reloaded/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1557562897724},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1557562897726},{"_id":"themes/next-reloaded/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1557562897727},{"_id":"themes/next-reloaded/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1557562897727},{"_id":"themes/next-reloaded/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1557562897730},{"_id":"themes/next-reloaded/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1557562897729},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1557562897731},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1557562897731},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1557562897732},{"_id":"themes/next-reloaded/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1557562897733},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1557562897734},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1557562897734},{"_id":"themes/next-reloaded/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1557562897735},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1557562897739},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1557562897740},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1557562897741},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1557562897741},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1557562897742},{"_id":"themes/next-reloaded/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1557562897743},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1557562897745},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1557562897744},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1557562897748},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1557562897750},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1557562897749},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1557562897757},{"_id":"themes/next-reloaded/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1557562897758},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1557562897759},{"_id":"themes/next-reloaded/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1557562897847},{"_id":"themes/next-reloaded/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1557562897848},{"_id":"themes/next-reloaded/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1557562897850},{"_id":"themes/next-reloaded/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1557562897850},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1557562897871},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1557562897872},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1557562897873},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1557562897874},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1557562897894},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1557562897895},{"_id":"themes/next-reloaded/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1557562897898},{"_id":"themes/next-reloaded/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1557562897899},{"_id":"themes/next-reloaded/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1557562897900},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557562897900},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1557562897900},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1557562897916},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1557562897916},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1557562897917},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1557562897911},{"_id":"themes/next-reloaded/.git/logs/refs/heads/master","hash":"3b60635b7402628b76a2333596b0ada362ee46a1","modified":1557562897552},{"_id":"themes/next-reloaded/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557562897539},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1557562897786},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1557562897786},{"_id":"themes/next-reloaded/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1557562897787},{"_id":"themes/next-reloaded/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1557562897788},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1557562897789},{"_id":"themes/next-reloaded/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1557562897804},{"_id":"themes/next-reloaded/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1557562897817},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1557562897841},{"_id":"themes/next-reloaded/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1557562897818},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1557562897842},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1557562897843},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1557562897844},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1557562897845},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1557562897846},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1557562897844},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1557562897852},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1557562897853},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1557562897854},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1557562897855},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1557562897856},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1557562897857},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1557562897856},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1557562897858},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1557562897861},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1557562897861},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1557562897863},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1557562897862},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1557562897864},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1557562897868},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1557562897867},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1557562897868},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1557562897869},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1557562897870},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1557562897870},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1557562897902},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557562897903},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1557562897903},{"_id":"themes/next-reloaded/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.idx","hash":"2b90239a27d36ba9cdfa0c1c243719fc084f611b","modified":1557562897352},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1557562897915},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557562897909},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557562897910},{"_id":"themes/next-reloaded/.git/logs/refs/remotes/origin/HEAD","hash":"3b60635b7402628b76a2333596b0ada362ee46a1","modified":1557562897539},{"_id":"themes/next-reloaded/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1557562897790},{"_id":"themes/next-reloaded/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1557562897791},{"_id":"themes/next-reloaded/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1557562897792},{"_id":"themes/next-reloaded/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1557562897793},{"_id":"themes/next-reloaded/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1557562897793},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1557562897794},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1557562897795},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1557562897796},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1557562897797},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1557562897797},{"_id":"themes/next-reloaded/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1557562897799},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1557562897800},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1557562897800},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1557562897801},{"_id":"themes/next-reloaded/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1557562897802},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1557562897803},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1557562897804},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1557562897806},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1557562897806},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1557562897807},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1557562897808},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1557562897809},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1557562897807},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1557562897809},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1557562897810},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1557562897811},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1557562897812},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1557562897812},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1557562897813},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1557562897814},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1557562897815},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1557562897816},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1557562897816},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1557562897820},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1557562897819},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1557562897820},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1557562897821},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1557562897822},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1557562897823},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1557562897824},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1557562897825},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1557562897824},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1557562897826},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1557562897833},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1557562897834},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1557562897835},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1557562897835},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1557562897836},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1557562897838},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1557562897837},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1557562897838},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1557562897839},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1557562897840},{"_id":"themes/next-reloaded/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1557562897827},{"_id":"themes/next-reloaded/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1557562897827},{"_id":"themes/next-reloaded/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1557562897828},{"_id":"themes/next-reloaded/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1557562897829},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1557562897829},{"_id":"themes/next-reloaded/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1557562897830},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1557562897831},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1557562897832},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1557562897859},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1557562897860},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1557562897866},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557562897907},{"_id":"themes/next-reloaded/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.pack","hash":"b859230713abef4a5f125dd8f95b1af83c96f4b0","modified":1557562897421},{"_id":"themes/next-reloaded/next.yml","hash":"8d9b97d7657899dc3fe40a109bc54e390f1be383","modified":1557563543786},{"_id":"source/_data/next.yml","hash":"8d9b97d7657899dc3fe40a109bc54e390f1be383","modified":1557563543786}],"Category":[{"name":"技术","_id":"cjvibqxwb00055cv95cz9c9bm"},{"name":"意识流","_id":"cjvibqxxr001j5cv958ec21sb"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2019-05-10T16:14:30.027Z","updated":"2019-05-10T16:14:30.027Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjvibqxps00005cv9da8pmrom","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"关于我","date":"2017-03-05T03:03:12.000Z","_content":"\n我是 &ensp; dongmodao，现在还是一个在校的本科生。搭建这个博客是希望我能够坚持写一些东西，\n因为我自己能够感觉到自己很多方面存在着不足，所以还是要不断的进行学习。在学习的过\n程中如果遇到了比较好的东西，我就会放到到这个博客上来，而且尽量保持长期更新，这也\n是对我的一种磨练吧。\n\n目前专业是 &ensp; GIS，虽然也学习了不少日子，但是感觉自己将来并不会专门往这个方面进行发展\n，个人还是比较喜欢编程一些，目前涉及的语言主要有 &ensp; C#, python, C, Java, C++，可以认\n为我是按照熟练度来进行排列的。另外，最近也是在自学 &ensp; Android， 安装了 &ensp; AS，坚持学习\n下去，逐渐进入深度的水平，这是我对自己的一个要求。\n加油，我相信，我可以做到！这个博客将是见证我发展的一个地方。\n\n> github: &ensp; [https://github.com/dongmodao](https://github.com/dongmodao)\ne-mail: &ensp; tangqihaopku@gmail.com\n\n``` c++\nHello World! \nHello Blog!\n```\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-03-05 11:03:12\n---\n\n我是 &ensp; dongmodao，现在还是一个在校的本科生。搭建这个博客是希望我能够坚持写一些东西，\n因为我自己能够感觉到自己很多方面存在着不足，所以还是要不断的进行学习。在学习的过\n程中如果遇到了比较好的东西，我就会放到到这个博客上来，而且尽量保持长期更新，这也\n是对我的一种磨练吧。\n\n目前专业是 &ensp; GIS，虽然也学习了不少日子，但是感觉自己将来并不会专门往这个方面进行发展\n，个人还是比较喜欢编程一些，目前涉及的语言主要有 &ensp; C#, python, C, Java, C++，可以认\n为我是按照熟练度来进行排列的。另外，最近也是在自学 &ensp; Android， 安装了 &ensp; AS，坚持学习\n下去，逐渐进入深度的水平，这是我对自己的一个要求。\n加油，我相信，我可以做到！这个博客将是见证我发展的一个地方。\n\n> github: &ensp; [https://github.com/dongmodao](https://github.com/dongmodao)\ne-mail: &ensp; tangqihaopku@gmail.com\n\n``` c++\nHello World! \nHello Blog!\n```\n","updated":"2019-05-10T16:14:30.218Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvibqxw500025cv9pap09urn","content":"<p>我是 &ensp; dongmodao，现在还是一个在校的本科生。搭建这个博客是希望我能够坚持写一些东西，<br>因为我自己能够感觉到自己很多方面存在着不足，所以还是要不断的进行学习。在学习的过<br>程中如果遇到了比较好的东西，我就会放到到这个博客上来，而且尽量保持长期更新，这也<br>是对我的一种磨练吧。</p>\n<p>目前专业是 &ensp; GIS，虽然也学习了不少日子，但是感觉自己将来并不会专门往这个方面进行发展<br>，个人还是比较喜欢编程一些，目前涉及的语言主要有 &ensp; C#, python, C, Java, C++，可以认<br>为我是按照熟练度来进行排列的。另外，最近也是在自学 &ensp; Android， 安装了 &ensp; AS，坚持学习<br>下去，逐渐进入深度的水平，这是我对自己的一个要求。<br>加油，我相信，我可以做到！这个博客将是见证我发展的一个地方。</p>\n<blockquote>\n<p>github: &ensp; <a href=\"https://github.com/dongmodao\" target=\"_blank\" rel=\"noopener\">https://github.com/dongmodao</a><br>e-mail: &ensp; <a href=\"mailto:tangqihaopku@gmail.com\" target=\"_blank\" rel=\"noopener\">tangqihaopku@gmail.com</a></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World! </span><br><span class=\"line\">Hello Blog!</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我是 &ensp; dongmodao，现在还是一个在校的本科生。搭建这个博客是希望我能够坚持写一些东西，<br>因为我自己能够感觉到自己很多方面存在着不足，所以还是要不断的进行学习。在学习的过<br>程中如果遇到了比较好的东西，我就会放到到这个博客上来，而且尽量保持长期更新，这也<br>是对我的一种磨练吧。</p>\n<p>目前专业是 &ensp; GIS，虽然也学习了不少日子，但是感觉自己将来并不会专门往这个方面进行发展<br>，个人还是比较喜欢编程一些，目前涉及的语言主要有 &ensp; C#, python, C, Java, C++，可以认<br>为我是按照熟练度来进行排列的。另外，最近也是在自学 &ensp; Android， 安装了 &ensp; AS，坚持学习<br>下去，逐渐进入深度的水平，这是我对自己的一个要求。<br>加油，我相信，我可以做到！这个博客将是见证我发展的一个地方。</p>\n<blockquote>\n<p>github: &ensp; <a href=\"https://github.com/dongmodao\" target=\"_blank\" rel=\"noopener\">https://github.com/dongmodao</a><br>e-mail: &ensp; <a href=\"mailto:tangqihaopku@gmail.com\" target=\"_blank\" rel=\"noopener\">tangqihaopku@gmail.com</a></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World! </span><br><span class=\"line\">Hello Blog!</span><br></pre></td></tr></table></figure>\n"},{"title":"All tags","date":"2017-03-02T16:59:43.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-03-03 00:59:43\ntype: \"tags\"\ncomments: true\n---\n","updated":"2019-05-10T16:14:30.218Z","path":"tags/index.html","layout":"page","_id":"cjvibqxw900045cv9pjzttc1v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-04-07T15:23:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-04-07 23:23:54\ntype: \"categories\"\n---\n","updated":"2019-05-10T16:14:30.218Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvibqxwe00085cv92oght2g8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android: 自定义 View","date":"2018-06-07T15:21:31.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Making-new-view/index.jpg)\n\n## 自定义控件\n\n今天来学习以下自定义控件的绘制流程，使用的是一个在 GitHub 上开源的项目：雷达图扫描效果，进行了练手。本文说来算是一个简单版本的总结，内容主要来源见文末的参考文献。\n\n### 基本流程\n\n1. 继承自 View 或者 View 的子类\n 至少使用一个构造函数，包含 Context 和 AttributeSet 对象，作用为允许 layout editor 创建并编辑 View 实例。<!-- more -->\n2. 定义自定义属性\n + 在资源标签下定义自设的属性，在 res/values/attrs.xml 中进行定义\n    ``` xml\n    <resources>\n        <declare-styleable name=\"ViewName\">\n            <attr name=\"attr_name\" format=\"data_type\" />\n            <attr name=\"position\" format=\"enum\">\n                <enum name=\"left\" value=\"0\" />\n                <enum name=\"right\" value=\"1\" />\n            </attr>\n\n        </declare-styleable>\n    </resources>\n    ```\n + 在 layout xml 中指定属性值，在引用自定义 View 时，需要指定命名空间，如 xmlns:custom=\"http://schemas.android.com/apk/res/{View_package}\"\n + 在运行是获取属性值\n + 应用属性值到 View 中\n3. 使用自定义属性\n View 被创建时，使用构造器时，从 xml 中读取，保存到 AttributeSet 中，可从中读取，弊端在于拥有属性的资源没有经过解析，Styles 并没有运用上。不能确定值的类型。所以使用 obtainStyleAttributes() 来获取属性值，方法传递一个 TypedArray 对象，间接引用并经过 Styles 应用的。如：\n ``` java\n TypedArray a = context.getTheme().obtainStyleAttributes(attrs, R.styleable.ViewName, 0, 0);\n mAttr_1 = a.getBoolean(R.styleable.attr_name, default_value);\n a.recycle();   // 共享资源对象要进行回收\n ```\n4. 添加属性和事件\n 使用合适的 getter 和 setter 方法。当 View 的内容发生变化时，需要调用 invalidate() 和 requestLayout() 方法来进行内容和大小的处理，没有则容易报错。自定义 View 需要能够响应事件的监听器，可自己设定事件来通知监听器。暴露属性和事件时非常重要的。\n\n5. 重写 onMeasure()\n 这个方法用于测量和设置控件的大小。使用 setMeasuredDimension(width, height) 设置大小，其中 width 和height 则需要计算出来。\n\n6. 重写 onDraw()\n 参数为一个 Canvas 对象，该对象定义了绘制图像图形的方法，绘制之前需要创建一个 Paint 对象。其中 Canvas 用于定义绘制什么，Paint 定义如何绘制。如使用 canvas.drawCircle() 的方法进行画圆，其中参数中使用了 Paint 的实例。当需要重绘时需要调用 invalidate() 方法，更改大小时需要调用 requestLayout() 方法。\n\n\n### 总结\n\n 总的来说，自定义控件要经过以下几个步骤：\n  1. 新建继承自 View 或其子类的 Class，并根据需要实现带参数的几种构造函数，构造的同时可能使用 ``TypedArray t = context.obtainStyleAttributes(attrs, R.styleabe.ViewName);`` 获取从布局 xml 中获取属性值。可以初始化画布 Canvas 和画笔 Paint。\n  2. 在资源标签中定义本 View 自定义的属性，设置类型。\n  3. 重写 onMeasure() 方法，设置控件的尺寸。\n  4. 重写 onDraw() 方法，绘制控件，如需要数据，则提供获取数据的方式。\n  5. 更改内容或者大小时，需要调用 invalidate() 或 requestLayout() 方法。\n  6. 设置监听、事件\n\n\n###### 参考：\n 1. [自定义 View][1]\n 2. [Android自定义View 雷达扫描效果][2]\n\n\n[1]:http://hukai.me/android-training-course-in-chinese/ui/custom-view/index.html\n[2]:https://github.com/donkingliang/RadarView\n\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Making-new-view.md","raw":"---\ntitle: 'Android: 自定义 View'\ndate: 2018-06-07 23:21:31\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Making-new-view/index.jpg)\n\n## 自定义控件\n\n今天来学习以下自定义控件的绘制流程，使用的是一个在 GitHub 上开源的项目：雷达图扫描效果，进行了练手。本文说来算是一个简单版本的总结，内容主要来源见文末的参考文献。\n\n### 基本流程\n\n1. 继承自 View 或者 View 的子类\n 至少使用一个构造函数，包含 Context 和 AttributeSet 对象，作用为允许 layout editor 创建并编辑 View 实例。<!-- more -->\n2. 定义自定义属性\n + 在资源标签下定义自设的属性，在 res/values/attrs.xml 中进行定义\n    ``` xml\n    <resources>\n        <declare-styleable name=\"ViewName\">\n            <attr name=\"attr_name\" format=\"data_type\" />\n            <attr name=\"position\" format=\"enum\">\n                <enum name=\"left\" value=\"0\" />\n                <enum name=\"right\" value=\"1\" />\n            </attr>\n\n        </declare-styleable>\n    </resources>\n    ```\n + 在 layout xml 中指定属性值，在引用自定义 View 时，需要指定命名空间，如 xmlns:custom=\"http://schemas.android.com/apk/res/{View_package}\"\n + 在运行是获取属性值\n + 应用属性值到 View 中\n3. 使用自定义属性\n View 被创建时，使用构造器时，从 xml 中读取，保存到 AttributeSet 中，可从中读取，弊端在于拥有属性的资源没有经过解析，Styles 并没有运用上。不能确定值的类型。所以使用 obtainStyleAttributes() 来获取属性值，方法传递一个 TypedArray 对象，间接引用并经过 Styles 应用的。如：\n ``` java\n TypedArray a = context.getTheme().obtainStyleAttributes(attrs, R.styleable.ViewName, 0, 0);\n mAttr_1 = a.getBoolean(R.styleable.attr_name, default_value);\n a.recycle();   // 共享资源对象要进行回收\n ```\n4. 添加属性和事件\n 使用合适的 getter 和 setter 方法。当 View 的内容发生变化时，需要调用 invalidate() 和 requestLayout() 方法来进行内容和大小的处理，没有则容易报错。自定义 View 需要能够响应事件的监听器，可自己设定事件来通知监听器。暴露属性和事件时非常重要的。\n\n5. 重写 onMeasure()\n 这个方法用于测量和设置控件的大小。使用 setMeasuredDimension(width, height) 设置大小，其中 width 和height 则需要计算出来。\n\n6. 重写 onDraw()\n 参数为一个 Canvas 对象，该对象定义了绘制图像图形的方法，绘制之前需要创建一个 Paint 对象。其中 Canvas 用于定义绘制什么，Paint 定义如何绘制。如使用 canvas.drawCircle() 的方法进行画圆，其中参数中使用了 Paint 的实例。当需要重绘时需要调用 invalidate() 方法，更改大小时需要调用 requestLayout() 方法。\n\n\n### 总结\n\n 总的来说，自定义控件要经过以下几个步骤：\n  1. 新建继承自 View 或其子类的 Class，并根据需要实现带参数的几种构造函数，构造的同时可能使用 ``TypedArray t = context.obtainStyleAttributes(attrs, R.styleabe.ViewName);`` 获取从布局 xml 中获取属性值。可以初始化画布 Canvas 和画笔 Paint。\n  2. 在资源标签中定义本 View 自定义的属性，设置类型。\n  3. 重写 onMeasure() 方法，设置控件的尺寸。\n  4. 重写 onDraw() 方法，绘制控件，如需要数据，则提供获取数据的方式。\n  5. 更改内容或者大小时，需要调用 invalidate() 或 requestLayout() 方法。\n  6. 设置监听、事件\n\n\n###### 参考：\n 1. [自定义 View][1]\n 2. [Android自定义View 雷达扫描效果][2]\n\n\n[1]:http://hukai.me/android-training-course-in-chinese/ui/custom-view/index.html\n[2]:https://github.com/donkingliang/RadarView\n\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Making-new-view","published":1,"updated":"2019-05-10T16:14:30.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxw000015cv93ij0hr51","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/07/Android-Making-new-view/index.jpg\" alt=\"\"></p>\n<h2 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h2><p>今天来学习以下自定义控件的绘制流程，使用的是一个在 GitHub 上开源的项目：雷达图扫描效果，进行了练手。本文说来算是一个简单版本的总结，内容主要来源见文末的参考文献。</p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><ol>\n<li>继承自 View 或者 View 的子类<br>至少使用一个构造函数，包含 Context 和 AttributeSet 对象，作用为允许 layout editor 创建并编辑 View 实例。<a id=\"more\"></a></li>\n<li><p>定义自定义属性</p>\n<ul>\n<li><p>在资源标签下定义自设的属性，在 res/values/attrs.xml 中进行定义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ViewName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"attr_name\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"data_type\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"position\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"enum\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enum</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enum</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 layout xml 中指定属性值，在引用自定义 View 时，需要指定命名空间，如 xmlns:custom=”<a href=\"http://schemas.android.com/apk/res/{View_package}&quot;\" target=\"_blank\" rel=\"noopener\">http://schemas.android.com/apk/res/{View_package}&quot;</a></p>\n</li>\n<li>在运行是获取属性值</li>\n<li>应用属性值到 View 中</li>\n</ul>\n</li>\n<li><p>使用自定义属性<br>View 被创建时，使用构造器时，从 xml 中读取，保存到 AttributeSet 中，可从中读取，弊端在于拥有属性的资源没有经过解析，Styles 并没有运用上。不能确定值的类型。所以使用 obtainStyleAttributes() 来获取属性值，方法传递一个 TypedArray 对象，间接引用并经过 Styles 应用的。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypedArray a = context.getTheme().obtainStyleAttributes(attrs, R.styleable.ViewName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">mAttr_1 = a.getBoolean(R.styleable.attr_name, default_value);</span><br><span class=\"line\">a.recycle();   <span class=\"comment\">// 共享资源对象要进行回收</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加属性和事件<br>使用合适的 getter 和 setter 方法。当 View 的内容发生变化时，需要调用 invalidate() 和 requestLayout() 方法来进行内容和大小的处理，没有则容易报错。自定义 View 需要能够响应事件的监听器，可自己设定事件来通知监听器。暴露属性和事件时非常重要的。</p>\n</li>\n<li><p>重写 onMeasure()<br>这个方法用于测量和设置控件的大小。使用 setMeasuredDimension(width, height) 设置大小，其中 width 和height 则需要计算出来。</p>\n</li>\n<li><p>重写 onDraw()<br>参数为一个 Canvas 对象，该对象定义了绘制图像图形的方法，绘制之前需要创建一个 Paint 对象。其中 Canvas 用于定义绘制什么，Paint 定义如何绘制。如使用 canvas.drawCircle() 的方法进行画圆，其中参数中使用了 Paint 的实例。当需要重绘时需要调用 invalidate() 方法，更改大小时需要调用 requestLayout() 方法。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 总的来说，自定义控件要经过以下几个步骤：</p>\n<ol>\n<li>新建继承自 View 或其子类的 Class，并根据需要实现带参数的几种构造函数，构造的同时可能使用 <code>TypedArray t = context.obtainStyleAttributes(attrs, R.styleabe.ViewName);</code> 获取从布局 xml 中获取属性值。可以初始化画布 Canvas 和画笔 Paint。</li>\n<li>在资源标签中定义本 View 自定义的属性，设置类型。</li>\n<li>重写 onMeasure() 方法，设置控件的尺寸。</li>\n<li>重写 onDraw() 方法，绘制控件，如需要数据，则提供获取数据的方式。</li>\n<li>更改内容或者大小时，需要调用 invalidate() 或 requestLayout() 方法。</li>\n<li>设置监听、事件</li>\n</ol>\n<h6 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h6><ol>\n<li><a href=\"http://hukai.me/android-training-course-in-chinese/ui/custom-view/index.html\" target=\"_blank\" rel=\"noopener\">自定义 View</a></li>\n<li><a href=\"https://github.com/donkingliang/RadarView\" target=\"_blank\" rel=\"noopener\">Android自定义View 雷达扫描效果</a></li>\n</ol>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/07/Android-Making-new-view/index.jpg\" alt=\"\"></p>\n<h2 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h2><p>今天来学习以下自定义控件的绘制流程，使用的是一个在 GitHub 上开源的项目：雷达图扫描效果，进行了练手。本文说来算是一个简单版本的总结，内容主要来源见文末的参考文献。</p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><ol>\n<li>继承自 View 或者 View 的子类<br>至少使用一个构造函数，包含 Context 和 AttributeSet 对象，作用为允许 layout editor 创建并编辑 View 实例。</li></ol>","more":"\n<li><p>定义自定义属性</p>\n<ul>\n<li><p>在资源标签下定义自设的属性，在 res/values/attrs.xml 中进行定义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ViewName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"attr_name\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"data_type\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"position\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"enum\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enum</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enum</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 layout xml 中指定属性值，在引用自定义 View 时，需要指定命名空间，如 xmlns:custom=”<a href=\"http://schemas.android.com/apk/res/{View_package}&quot;\" target=\"_blank\" rel=\"noopener\">http://schemas.android.com/apk/res/{View_package}&quot;</a></p>\n</li>\n<li>在运行是获取属性值</li>\n<li>应用属性值到 View 中</li>\n</ul>\n</li>\n<li><p>使用自定义属性<br>View 被创建时，使用构造器时，从 xml 中读取，保存到 AttributeSet 中，可从中读取，弊端在于拥有属性的资源没有经过解析，Styles 并没有运用上。不能确定值的类型。所以使用 obtainStyleAttributes() 来获取属性值，方法传递一个 TypedArray 对象，间接引用并经过 Styles 应用的。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypedArray a = context.getTheme().obtainStyleAttributes(attrs, R.styleable.ViewName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">mAttr_1 = a.getBoolean(R.styleable.attr_name, default_value);</span><br><span class=\"line\">a.recycle();   <span class=\"comment\">// 共享资源对象要进行回收</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加属性和事件<br>使用合适的 getter 和 setter 方法。当 View 的内容发生变化时，需要调用 invalidate() 和 requestLayout() 方法来进行内容和大小的处理，没有则容易报错。自定义 View 需要能够响应事件的监听器，可自己设定事件来通知监听器。暴露属性和事件时非常重要的。</p>\n</li>\n<li><p>重写 onMeasure()<br>这个方法用于测量和设置控件的大小。使用 setMeasuredDimension(width, height) 设置大小，其中 width 和height 则需要计算出来。</p>\n</li>\n<li><p>重写 onDraw()<br>参数为一个 Canvas 对象，该对象定义了绘制图像图形的方法，绘制之前需要创建一个 Paint 对象。其中 Canvas 用于定义绘制什么，Paint 定义如何绘制。如使用 canvas.drawCircle() 的方法进行画圆，其中参数中使用了 Paint 的实例。当需要重绘时需要调用 invalidate() 方法，更改大小时需要调用 requestLayout() 方法。</p>\n</li>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 总的来说，自定义控件要经过以下几个步骤：</p>\n<ol>\n<li>新建继承自 View 或其子类的 Class，并根据需要实现带参数的几种构造函数，构造的同时可能使用 <code>TypedArray t = context.obtainStyleAttributes(attrs, R.styleabe.ViewName);</code> 获取从布局 xml 中获取属性值。可以初始化画布 Canvas 和画笔 Paint。</li>\n<li>在资源标签中定义本 View 自定义的属性，设置类型。</li>\n<li>重写 onMeasure() 方法，设置控件的尺寸。</li>\n<li>重写 onDraw() 方法，绘制控件，如需要数据，则提供获取数据的方式。</li>\n<li>更改内容或者大小时，需要调用 invalidate() 或 requestLayout() 方法。</li>\n<li>设置监听、事件</li>\n</ol>\n<h6 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h6><ol>\n<li><a href=\"http://hukai.me/android-training-course-in-chinese/ui/custom-view/index.html\" target=\"_blank\" rel=\"noopener\">自定义 View</a></li>\n<li><a href=\"https://github.com/donkingliang/RadarView\" target=\"_blank\" rel=\"noopener\">Android自定义View 雷达扫描效果</a></li>\n</ol>\n<center> — end — </center>\n\n<hr>"},{"title":"Android Day 2","date":"2018-06-06T01:45:23.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Day-2/index.jpg)\n\n### 基础 UI\n#### 自定义控件\n 1. 组合/继承控件\n  + 写布局 xml 文件\n  + 使用 LayoutInflater.from(Context).inflate(layout_id, parent_layout[this])\n  + 重写事件等\n 2. 完全自定义 View<!-- more -->\n\n\n#### 重要控件\n 1. ListView\n  + 生成数据数组\n  + 创建内容类型，设置 get/set\n  + 创建每个子项的布局 layout\n  + 创建自定义 Adapter (可继承于自带 Adapter，如 ArrayAdapter<Bean>)\n    + 实现构造函数\n    + 重写 getView 方法，加载布局，设置控件内容，返回 View\n    + 重用缓存 convertView 参数。getView 中判断是否为 null，是则加载布局，否则操作返回\n    + 使用 ViewHolder，将布局中的 View 交予其管理。可结合 View 的 set/getTag 存储/管理/重用 ViewHolder。\n  + setOnItemClickListener(new AdapterView.OnItemClickListener(){}),子项点击监听\n\n 2. RecyclerView\n  + 加入引用 \"com.android.support:recyclerview-v7:{version}\",引入布局\n  + [基本步骤与 ListView 相似，不提] 创建自定义适配器 BeanAdapter：\n    + 继承与 RecyclerView.Adapter<BeanAdapter.ViewHolder>，内部类 ViewHolder\n    + ViewHolder extends RecyclerView.ViewHolder。管理/绑定子项 View，构造时绑定 view_id\n    + 构造函数引入数据\n    + 重写 onCreateViewHolder()，加载布局，设定子 View 监听等，返回 ViewHolder\n    + 重写 onBindViewHolder()，子项绑定 ViewHolder，所以获取 Bean 实例，通过 ViewHolder 管理 View\n    + 重写 getItemCount()，返回数据总数量\n\n  + 使用 [Linear/StaggeredGrid/...]LayoutManager 管理 RecyclerView 的子项布局方式，使用setLayoutManager()，可对 layoutManager 进行各项定义\n  + setAdapter() 设置适配器\n\n9-Patch 图设定：[创建可调整大小的位图（9-Patch 文件）][1]\n\n\n[1]:https://developer.android.com/studio/write/draw9patch?hl=zh-cn\n\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Day-2.md","raw":"---\ntitle: Android Day 2\ndate: 2018-06-06 09:45:23\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Day-2/index.jpg)\n\n### 基础 UI\n#### 自定义控件\n 1. 组合/继承控件\n  + 写布局 xml 文件\n  + 使用 LayoutInflater.from(Context).inflate(layout_id, parent_layout[this])\n  + 重写事件等\n 2. 完全自定义 View<!-- more -->\n\n\n#### 重要控件\n 1. ListView\n  + 生成数据数组\n  + 创建内容类型，设置 get/set\n  + 创建每个子项的布局 layout\n  + 创建自定义 Adapter (可继承于自带 Adapter，如 ArrayAdapter<Bean>)\n    + 实现构造函数\n    + 重写 getView 方法，加载布局，设置控件内容，返回 View\n    + 重用缓存 convertView 参数。getView 中判断是否为 null，是则加载布局，否则操作返回\n    + 使用 ViewHolder，将布局中的 View 交予其管理。可结合 View 的 set/getTag 存储/管理/重用 ViewHolder。\n  + setOnItemClickListener(new AdapterView.OnItemClickListener(){}),子项点击监听\n\n 2. RecyclerView\n  + 加入引用 \"com.android.support:recyclerview-v7:{version}\",引入布局\n  + [基本步骤与 ListView 相似，不提] 创建自定义适配器 BeanAdapter：\n    + 继承与 RecyclerView.Adapter<BeanAdapter.ViewHolder>，内部类 ViewHolder\n    + ViewHolder extends RecyclerView.ViewHolder。管理/绑定子项 View，构造时绑定 view_id\n    + 构造函数引入数据\n    + 重写 onCreateViewHolder()，加载布局，设定子 View 监听等，返回 ViewHolder\n    + 重写 onBindViewHolder()，子项绑定 ViewHolder，所以获取 Bean 实例，通过 ViewHolder 管理 View\n    + 重写 getItemCount()，返回数据总数量\n\n  + 使用 [Linear/StaggeredGrid/...]LayoutManager 管理 RecyclerView 的子项布局方式，使用setLayoutManager()，可对 layoutManager 进行各项定义\n  + setAdapter() 设置适配器\n\n9-Patch 图设定：[创建可调整大小的位图（9-Patch 文件）][1]\n\n\n[1]:https://developer.android.com/studio/write/draw9patch?hl=zh-cn\n\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Day-2","published":1,"updated":"2019-05-10T16:14:30.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxw700035cv9r6nrnbi2","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/06/Android-Day-2/index.jpg\" alt=\"\"></p>\n<h3 id=\"基础-UI\"><a href=\"#基础-UI\" class=\"headerlink\" title=\"基础 UI\"></a>基础 UI</h3><h4 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h4><ol>\n<li>组合/继承控件<ul>\n<li>写布局 xml 文件</li>\n<li>使用 LayoutInflater.from(Context).inflate(layout_id, parent_layout[this])</li>\n<li>重写事件等</li>\n</ul>\n</li>\n<li>完全自定义 View<a id=\"more\"></a></li>\n</ol>\n<h4 id=\"重要控件\"><a href=\"#重要控件\" class=\"headerlink\" title=\"重要控件\"></a>重要控件</h4><ol>\n<li><p>ListView</p>\n<ul>\n<li>生成数据数组</li>\n<li>创建内容类型，设置 get/set</li>\n<li>创建每个子项的布局 layout</li>\n<li>创建自定义 Adapter (可继承于自带 Adapter，如 ArrayAdapter<bean>)</bean></li>\n<li>实现构造函数</li>\n<li>重写 getView 方法，加载布局，设置控件内容，返回 View</li>\n<li>重用缓存 convertView 参数。getView 中判断是否为 null，是则加载布局，否则操作返回</li>\n<li>使用 ViewHolder，将布局中的 View 交予其管理。可结合 View 的 set/getTag 存储/管理/重用 ViewHolder。</li>\n<li>setOnItemClickListener(new AdapterView.OnItemClickListener(){}),子项点击监听</li>\n</ul>\n</li>\n<li><p>RecyclerView</p>\n<ul>\n<li>加入引用 “com.android.support:recyclerview-v7:{version}”,引入布局</li>\n<li>[基本步骤与 ListView 相似，不提] 创建自定义适配器 BeanAdapter：</li>\n<li>继承与 RecyclerView.Adapter&lt;BeanAdapter.ViewHolder&gt;，内部类 ViewHolder</li>\n<li>ViewHolder extends RecyclerView.ViewHolder。管理/绑定子项 View，构造时绑定 view_id</li>\n<li>构造函数引入数据</li>\n<li>重写 onCreateViewHolder()，加载布局，设定子 View 监听等，返回 ViewHolder</li>\n<li>重写 onBindViewHolder()，子项绑定 ViewHolder，所以获取 Bean 实例，通过 ViewHolder 管理 View</li>\n<li><p>重写 getItemCount()，返回数据总数量</p>\n</li>\n<li><p>使用 [Linear/StaggeredGrid/…]LayoutManager 管理 RecyclerView 的子项布局方式，使用setLayoutManager()，可对 layoutManager 进行各项定义</p>\n</li>\n<li>setAdapter() 设置适配器</li>\n</ul>\n</li>\n</ol>\n<p>9-Patch 图设定：<a href=\"https://developer.android.com/studio/write/draw9patch?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">创建可调整大小的位图（9-Patch 文件）</a></p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/06/Android-Day-2/index.jpg\" alt=\"\"></p>\n<h3 id=\"基础-UI\"><a href=\"#基础-UI\" class=\"headerlink\" title=\"基础 UI\"></a>基础 UI</h3><h4 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h4><ol>\n<li>组合/继承控件<ul>\n<li>写布局 xml 文件</li>\n<li>使用 LayoutInflater.from(Context).inflate(layout_id, parent_layout[this])</li>\n<li>重写事件等</li>\n</ul>\n</li>\n<li>完全自定义 View</li></ol>","more":"\n\n<h4 id=\"重要控件\"><a href=\"#重要控件\" class=\"headerlink\" title=\"重要控件\"></a>重要控件</h4><ol>\n<li><p>ListView</p>\n<ul>\n<li>生成数据数组</li>\n<li>创建内容类型，设置 get/set</li>\n<li>创建每个子项的布局 layout</li>\n<li>创建自定义 Adapter (可继承于自带 Adapter，如 ArrayAdapter<bean>)</bean></li>\n<li>实现构造函数</li>\n<li>重写 getView 方法，加载布局，设置控件内容，返回 View</li>\n<li>重用缓存 convertView 参数。getView 中判断是否为 null，是则加载布局，否则操作返回</li>\n<li>使用 ViewHolder，将布局中的 View 交予其管理。可结合 View 的 set/getTag 存储/管理/重用 ViewHolder。</li>\n<li>setOnItemClickListener(new AdapterView.OnItemClickListener(){}),子项点击监听</li>\n</ul>\n</li>\n<li><p>RecyclerView</p>\n<ul>\n<li>加入引用 “com.android.support:recyclerview-v7:{version}”,引入布局</li>\n<li>[基本步骤与 ListView 相似，不提] 创建自定义适配器 BeanAdapter：</li>\n<li>继承与 RecyclerView.Adapter&lt;BeanAdapter.ViewHolder&gt;，内部类 ViewHolder</li>\n<li>ViewHolder extends RecyclerView.ViewHolder。管理/绑定子项 View，构造时绑定 view_id</li>\n<li>构造函数引入数据</li>\n<li>重写 onCreateViewHolder()，加载布局，设定子 View 监听等，返回 ViewHolder</li>\n<li>重写 onBindViewHolder()，子项绑定 ViewHolder，所以获取 Bean 实例，通过 ViewHolder 管理 View</li>\n<li><p>重写 getItemCount()，返回数据总数量</p>\n</li>\n<li><p>使用 [Linear/StaggeredGrid/…]LayoutManager 管理 RecyclerView 的子项布局方式，使用setLayoutManager()，可对 layoutManager 进行各项定义</p>\n</li>\n<li>setAdapter() 设置适配器</li>\n</ul>\n</li>\n</ol>\n<p>9-Patch 图设定：<a href=\"https://developer.android.com/studio/write/draw9patch?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">创建可调整大小的位图（9-Patch 文件）</a></p>\n<center> — end — </center>\n\n<hr>"},{"title":"Android Day 1","date":"2018-05-30T15:56:19.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Day-1/index.jpg)\n\n### Activity\n一种包含用户界面的组件，主要用于和用户进行交互。\n\n#### Basic\n\n + extends AppCompatActivity\n + onCreate() // 重写方法\n + setContentView(R.layout.layout_name) //加载布局\n + AndroidManifest, <activity android:name=\".Activity_Name\">  //注册\n + finsh()      // 销毁活动 <!-- more -->\n#### Menu\n 1. res->New->Directory->menu, New->Menu resource file->file_name;建立menu的xml文件。\n 2. Activity 中重写 onCreateOptionsMenu(), getMenuInflater().inflate(menu_xml);\n 3. 重写 onOptionsItemSelected()\n\n#### Intent\n 1. 显示 Intent\n  ``` java\n  Intent intent = new Intent(Context, Activity.class);\n  startActivity(intent);\n  ```\n 2. 隐式 Intent\n  + 筛选器\n  ``` xml\n  <intent-filter>\n        <action android:name=\"activity_name.ACTION_START\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n  </intent-filter>\n  ```\n  + startActivity\n  ``` java\n  Intent intent = new Intent(\"activity_name.ACTION_START\"); // 选择intent\n  //intent.addCategory(\"category_value\");\n  startActivity(intent);\n  ```\n  + 用于启动其他应用，网页、电话、其他应用，使用intent.setData()方法，还可以配置data标签。\n\n 3. 传递数据，intent.putExtra(\"KEY\", value);\n 4. 返回数据， startActivityForResult(intent, 1);//1 为请求码；在另一个Activity中使用 setResult(RESULT_OK, intent) //RESULT_CANCELED；重写本Activity 的 onActivityResult();\n\n\n#### 生命周期\n返回栈（Back Stack）管理，新开Activity入栈，退出出栈，总是显示栈顶Activity。\n\n 1. 状态：活动（活动）、暂停、停止、销毁共四种状态，对应处于栈顶、非栈顶但可见、非栈顶完全不可见、从栈中移除这四种实质。\n 2. 活动周期：完全生存期、可见生存期、前台生存期，对应onCreate()->onDestroy()、onStart()->onStop()、onResume()->onPause()三个过程。\n  ```\n  + onCreate():活动第一次创建时调用，初始化，加载布局、绑定事件\n  + onStart():不可见转为可见状态时调用\n  + onResume():活动准备好与用户交互式使用，处于栈顶，运行状态\n  + onPause():准备启动或恢复另一活动时使用，用于释放资源、保存数据。要求执行速度快，否则影响新栈顶活动使用\n  + onStop():完全不可见时调用，onPause()在部分可见就执行，而onStop()需要完全不可见，如对话框时不执行，onPause()执行\n  + onDestroy():活动销毁之前执行，随后销毁。\n  + onRestart():停止状态到运行状态时之前调用\n  ```\n 3. 回收活动的恢复：使用onSaveInstanceState()方法，用于保存数据，键值对方式，传入Buldle对象，使用putString()等Bulder实例的putDataType()方式保存。在onCreate()中检查传入的Budle saveInstanceState()参数是否为null。\n\n#### 启动模式\n 1. standard、singleTop、singleTask、singleInstance，在AndroidManifest中``<activity>``标签下使用android:launchMode属性选择。\n    + standard：默认启动方式，启动则会在返回栈顶生成新的活动\n    + singleTop:栈顶时该活动时不能重新生成，不处于栈顶时可重新生成\n    + singleTask：每次启动检查返回栈中是否有，如果有则不启动，而是将其上的活动移除，使用已有实例，没有时新建\n    + singleInstance：启用一个新的返回栈管理活动。如与其他程序共享同一个活动或者调用，不管哪个应用访问活动，共用一个返回栈（新的）。只有标记了singleInstance的活动才会入新栈，随后生成的活动还是返回到原始栈。\n\n### 基础UI\n 1. 基础中的基础：TextView、Button、EditText(hint,maxLines)、ImageView(src)、ProgressBar(style[更改显示样式，圆形，水平进度条]、setProgress(int))\n 2. AlertDialog、ProgressDialog：通过代码实现\n  ```java\n  AlertDialog.Builder dialog = new AlertDialog.Builder(Context);\n  //设置标题、信息、设置点击两个按钮的监听setPositiveButton(\"OK\", new DialogInterface.OnClickListener(){})与setNegative(\"Cancel\", new Dialog)\n  dialog.show();\n\n  ProgressDialog progressdialog = new ProgressDialog(Context);abstract// 设置标题、返回键关闭等\n  progressdialog.show();\n  // 绑定事件监听、使用dismiss()关闭\n  ```\n\n#### 布局\n 1. 四大基本布局：线型布局(LinearLayout)、相对布局(RelativeLayout)、帧布局(FrameLayout)、百分比布局(PercentFrameLayout)。\n  + 线型布局：orientation、layout_weight\n  + 相对布局：layout_alignParent[Left/Top/...]、layout_to[Left/Top/...]Of\n  + 帧布局：内部元素默认在左上角\n  + 百分比布局：'com.android.support:percent:version'、app:layout_[width/height]Percent\n  + gravity与layout_gravity:前者是View内部内容的布局位置、后者是布局在父布局的位置\n\n待续---2018年5月30日23点52分\n\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Day-1.md","raw":"---\ntitle: Android Day 1\ndate: 2018-05-30 23:56:19\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Day-1/index.jpg)\n\n### Activity\n一种包含用户界面的组件，主要用于和用户进行交互。\n\n#### Basic\n\n + extends AppCompatActivity\n + onCreate() // 重写方法\n + setContentView(R.layout.layout_name) //加载布局\n + AndroidManifest, <activity android:name=\".Activity_Name\">  //注册\n + finsh()      // 销毁活动 <!-- more -->\n#### Menu\n 1. res->New->Directory->menu, New->Menu resource file->file_name;建立menu的xml文件。\n 2. Activity 中重写 onCreateOptionsMenu(), getMenuInflater().inflate(menu_xml);\n 3. 重写 onOptionsItemSelected()\n\n#### Intent\n 1. 显示 Intent\n  ``` java\n  Intent intent = new Intent(Context, Activity.class);\n  startActivity(intent);\n  ```\n 2. 隐式 Intent\n  + 筛选器\n  ``` xml\n  <intent-filter>\n        <action android:name=\"activity_name.ACTION_START\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n  </intent-filter>\n  ```\n  + startActivity\n  ``` java\n  Intent intent = new Intent(\"activity_name.ACTION_START\"); // 选择intent\n  //intent.addCategory(\"category_value\");\n  startActivity(intent);\n  ```\n  + 用于启动其他应用，网页、电话、其他应用，使用intent.setData()方法，还可以配置data标签。\n\n 3. 传递数据，intent.putExtra(\"KEY\", value);\n 4. 返回数据， startActivityForResult(intent, 1);//1 为请求码；在另一个Activity中使用 setResult(RESULT_OK, intent) //RESULT_CANCELED；重写本Activity 的 onActivityResult();\n\n\n#### 生命周期\n返回栈（Back Stack）管理，新开Activity入栈，退出出栈，总是显示栈顶Activity。\n\n 1. 状态：活动（活动）、暂停、停止、销毁共四种状态，对应处于栈顶、非栈顶但可见、非栈顶完全不可见、从栈中移除这四种实质。\n 2. 活动周期：完全生存期、可见生存期、前台生存期，对应onCreate()->onDestroy()、onStart()->onStop()、onResume()->onPause()三个过程。\n  ```\n  + onCreate():活动第一次创建时调用，初始化，加载布局、绑定事件\n  + onStart():不可见转为可见状态时调用\n  + onResume():活动准备好与用户交互式使用，处于栈顶，运行状态\n  + onPause():准备启动或恢复另一活动时使用，用于释放资源、保存数据。要求执行速度快，否则影响新栈顶活动使用\n  + onStop():完全不可见时调用，onPause()在部分可见就执行，而onStop()需要完全不可见，如对话框时不执行，onPause()执行\n  + onDestroy():活动销毁之前执行，随后销毁。\n  + onRestart():停止状态到运行状态时之前调用\n  ```\n 3. 回收活动的恢复：使用onSaveInstanceState()方法，用于保存数据，键值对方式，传入Buldle对象，使用putString()等Bulder实例的putDataType()方式保存。在onCreate()中检查传入的Budle saveInstanceState()参数是否为null。\n\n#### 启动模式\n 1. standard、singleTop、singleTask、singleInstance，在AndroidManifest中``<activity>``标签下使用android:launchMode属性选择。\n    + standard：默认启动方式，启动则会在返回栈顶生成新的活动\n    + singleTop:栈顶时该活动时不能重新生成，不处于栈顶时可重新生成\n    + singleTask：每次启动检查返回栈中是否有，如果有则不启动，而是将其上的活动移除，使用已有实例，没有时新建\n    + singleInstance：启用一个新的返回栈管理活动。如与其他程序共享同一个活动或者调用，不管哪个应用访问活动，共用一个返回栈（新的）。只有标记了singleInstance的活动才会入新栈，随后生成的活动还是返回到原始栈。\n\n### 基础UI\n 1. 基础中的基础：TextView、Button、EditText(hint,maxLines)、ImageView(src)、ProgressBar(style[更改显示样式，圆形，水平进度条]、setProgress(int))\n 2. AlertDialog、ProgressDialog：通过代码实现\n  ```java\n  AlertDialog.Builder dialog = new AlertDialog.Builder(Context);\n  //设置标题、信息、设置点击两个按钮的监听setPositiveButton(\"OK\", new DialogInterface.OnClickListener(){})与setNegative(\"Cancel\", new Dialog)\n  dialog.show();\n\n  ProgressDialog progressdialog = new ProgressDialog(Context);abstract// 设置标题、返回键关闭等\n  progressdialog.show();\n  // 绑定事件监听、使用dismiss()关闭\n  ```\n\n#### 布局\n 1. 四大基本布局：线型布局(LinearLayout)、相对布局(RelativeLayout)、帧布局(FrameLayout)、百分比布局(PercentFrameLayout)。\n  + 线型布局：orientation、layout_weight\n  + 相对布局：layout_alignParent[Left/Top/...]、layout_to[Left/Top/...]Of\n  + 帧布局：内部元素默认在左上角\n  + 百分比布局：'com.android.support:percent:version'、app:layout_[width/height]Percent\n  + gravity与layout_gravity:前者是View内部内容的布局位置、后者是布局在父布局的位置\n\n待续---2018年5月30日23点52分\n\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Day-1","published":1,"updated":"2019-05-10T16:14:30.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxwd00075cv9sjqez7vj","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/05/30/Android-Day-1/index.jpg\" alt=\"\"></p>\n<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>一种包含用户界面的组件，主要用于和用户进行交互。</p>\n<h4 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h4><ul>\n<li>extends AppCompatActivity</li>\n<li>onCreate() // 重写方法</li>\n<li>setContentView(R.layout.layout_name) //加载布局</li>\n<li>AndroidManifest, <activity android:name=\".Activity_Name\">  //注册</activity></li>\n<li>finsh()      // 销毁活动 <a id=\"more\"></a><h4 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h4></li>\n</ul>\n<ol>\n<li>res-&gt;New-&gt;Directory-&gt;menu, New-&gt;Menu resource file-&gt;file_name;建立menu的xml文件。</li>\n<li>Activity 中重写 onCreateOptionsMenu(), getMenuInflater().inflate(menu_xml);</li>\n<li>重写 onOptionsItemSelected()</li>\n</ol>\n<h4 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h4><ol>\n<li><p>显示 Intent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Context, Activity.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式 Intent</p>\n<ul>\n<li><p>筛选器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"activity_name.ACTION_START\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>startActivity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"activity_name.ACTION_START\"</span>); <span class=\"comment\">// 选择intent</span></span><br><span class=\"line\"><span class=\"comment\">//intent.addCategory(\"category_value\");</span></span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用于启动其他应用，网页、电话、其他应用，使用intent.setData()方法，还可以配置data标签。</p>\n</li>\n</ul>\n</li>\n<li><p>传递数据，intent.putExtra(“KEY”, value);</p>\n</li>\n<li>返回数据， startActivityForResult(intent, 1);//1 为请求码；在另一个Activity中使用 setResult(RESULT_OK, intent) //RESULT_CANCELED；重写本Activity 的 onActivityResult();</li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>返回栈（Back Stack）管理，新开Activity入栈，退出出栈，总是显示栈顶Activity。</p>\n<ol>\n<li>状态：活动（活动）、暂停、停止、销毁共四种状态，对应处于栈顶、非栈顶但可见、非栈顶完全不可见、从栈中移除这四种实质。</li>\n<li><p>活动周期：完全生存期、可见生存期、前台生存期，对应onCreate()-&gt;onDestroy()、onStart()-&gt;onStop()、onResume()-&gt;onPause()三个过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ onCreate():活动第一次创建时调用，初始化，加载布局、绑定事件</span><br><span class=\"line\">+ onStart():不可见转为可见状态时调用</span><br><span class=\"line\">+ onResume():活动准备好与用户交互式使用，处于栈顶，运行状态</span><br><span class=\"line\">+ onPause():准备启动或恢复另一活动时使用，用于释放资源、保存数据。要求执行速度快，否则影响新栈顶活动使用</span><br><span class=\"line\">+ onStop():完全不可见时调用，onPause()在部分可见就执行，而onStop()需要完全不可见，如对话框时不执行，onPause()执行</span><br><span class=\"line\">+ onDestroy():活动销毁之前执行，随后销毁。</span><br><span class=\"line\">+ onRestart():停止状态到运行状态时之前调用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>回收活动的恢复：使用onSaveInstanceState()方法，用于保存数据，键值对方式，传入Buldle对象，使用putString()等Bulder实例的putDataType()方式保存。在onCreate()中检查传入的Budle saveInstanceState()参数是否为null。</p>\n</li>\n</ol>\n<h4 id=\"启动模式\"><a href=\"#启动模式\" class=\"headerlink\" title=\"启动模式\"></a>启动模式</h4><ol>\n<li>standard、singleTop、singleTask、singleInstance，在AndroidManifest中<code>&lt;activity&gt;</code>标签下使用android:launchMode属性选择。<ul>\n<li>standard：默认启动方式，启动则会在返回栈顶生成新的活动</li>\n<li>singleTop:栈顶时该活动时不能重新生成，不处于栈顶时可重新生成</li>\n<li>singleTask：每次启动检查返回栈中是否有，如果有则不启动，而是将其上的活动移除，使用已有实例，没有时新建</li>\n<li>singleInstance：启用一个新的返回栈管理活动。如与其他程序共享同一个活动或者调用，不管哪个应用访问活动，共用一个返回栈（新的）。只有标记了singleInstance的活动才会入新栈，随后生成的活动还是返回到原始栈。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"基础UI\"><a href=\"#基础UI\" class=\"headerlink\" title=\"基础UI\"></a>基础UI</h3><ol>\n<li>基础中的基础：TextView、Button、EditText(hint,maxLines)、ImageView(src)、ProgressBar(style[更改显示样式，圆形，水平进度条]、setProgress(int))</li>\n<li>AlertDialog、ProgressDialog：通过代码实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder dialog = <span class=\"keyword\">new</span> AlertDialog.Builder(Context);</span><br><span class=\"line\"><span class=\"comment\">//设置标题、信息、设置点击两个按钮的监听setPositiveButton(\"OK\", new DialogInterface.OnClickListener()&#123;&#125;)与setNegative(\"Cancel\", new Dialog)</span></span><br><span class=\"line\">dialog.show();</span><br><span class=\"line\"></span><br><span class=\"line\">ProgressDialog progressdialog = <span class=\"keyword\">new</span> ProgressDialog(Context);<span class=\"keyword\">abstract</span><span class=\"comment\">// 设置标题、返回键关闭等</span></span><br><span class=\"line\">progressdialog.show();</span><br><span class=\"line\"><span class=\"comment\">// 绑定事件监听、使用dismiss()关闭</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><ol>\n<li>四大基本布局：线型布局(LinearLayout)、相对布局(RelativeLayout)、帧布局(FrameLayout)、百分比布局(PercentFrameLayout)。<ul>\n<li>线型布局：orientation、layout_weight</li>\n<li>相对布局：layout_alignParent[Left/Top/…]、layout_to[Left/Top/…]Of</li>\n<li>帧布局：内部元素默认在左上角</li>\n<li>百分比布局：’com.android.support:percent:version’、app:layout_[width/height]Percent</li>\n<li>gravity与layout_gravity:前者是View内部内容的布局位置、后者是布局在父布局的位置</li>\n</ul>\n</li>\n</ol>\n<p>待续—2018年5月30日23点52分</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/05/30/Android-Day-1/index.jpg\" alt=\"\"></p>\n<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>一种包含用户界面的组件，主要用于和用户进行交互。</p>\n<h4 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h4><ul>\n<li>extends AppCompatActivity</li>\n<li>onCreate() // 重写方法</li>\n<li>setContentView(R.layout.layout_name) //加载布局</li>\n<li>AndroidManifest, <activity android:name=\".Activity_Name\">  //注册</activity></li>\n<li>finsh()      // 销毁活动</li></ul>","more":"<h4 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h4>\n\n<ol>\n<li>res-&gt;New-&gt;Directory-&gt;menu, New-&gt;Menu resource file-&gt;file_name;建立menu的xml文件。</li>\n<li>Activity 中重写 onCreateOptionsMenu(), getMenuInflater().inflate(menu_xml);</li>\n<li>重写 onOptionsItemSelected()</li>\n</ol>\n<h4 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h4><ol>\n<li><p>显示 Intent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Context, Activity.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式 Intent</p>\n<ul>\n<li><p>筛选器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"activity_name.ACTION_START\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>startActivity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"activity_name.ACTION_START\"</span>); <span class=\"comment\">// 选择intent</span></span><br><span class=\"line\"><span class=\"comment\">//intent.addCategory(\"category_value\");</span></span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用于启动其他应用，网页、电话、其他应用，使用intent.setData()方法，还可以配置data标签。</p>\n</li>\n</ul>\n</li>\n<li><p>传递数据，intent.putExtra(“KEY”, value);</p>\n</li>\n<li>返回数据， startActivityForResult(intent, 1);//1 为请求码；在另一个Activity中使用 setResult(RESULT_OK, intent) //RESULT_CANCELED；重写本Activity 的 onActivityResult();</li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>返回栈（Back Stack）管理，新开Activity入栈，退出出栈，总是显示栈顶Activity。</p>\n<ol>\n<li>状态：活动（活动）、暂停、停止、销毁共四种状态，对应处于栈顶、非栈顶但可见、非栈顶完全不可见、从栈中移除这四种实质。</li>\n<li><p>活动周期：完全生存期、可见生存期、前台生存期，对应onCreate()-&gt;onDestroy()、onStart()-&gt;onStop()、onResume()-&gt;onPause()三个过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ onCreate():活动第一次创建时调用，初始化，加载布局、绑定事件</span><br><span class=\"line\">+ onStart():不可见转为可见状态时调用</span><br><span class=\"line\">+ onResume():活动准备好与用户交互式使用，处于栈顶，运行状态</span><br><span class=\"line\">+ onPause():准备启动或恢复另一活动时使用，用于释放资源、保存数据。要求执行速度快，否则影响新栈顶活动使用</span><br><span class=\"line\">+ onStop():完全不可见时调用，onPause()在部分可见就执行，而onStop()需要完全不可见，如对话框时不执行，onPause()执行</span><br><span class=\"line\">+ onDestroy():活动销毁之前执行，随后销毁。</span><br><span class=\"line\">+ onRestart():停止状态到运行状态时之前调用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>回收活动的恢复：使用onSaveInstanceState()方法，用于保存数据，键值对方式，传入Buldle对象，使用putString()等Bulder实例的putDataType()方式保存。在onCreate()中检查传入的Budle saveInstanceState()参数是否为null。</p>\n</li>\n</ol>\n<h4 id=\"启动模式\"><a href=\"#启动模式\" class=\"headerlink\" title=\"启动模式\"></a>启动模式</h4><ol>\n<li>standard、singleTop、singleTask、singleInstance，在AndroidManifest中<code>&lt;activity&gt;</code>标签下使用android:launchMode属性选择。<ul>\n<li>standard：默认启动方式，启动则会在返回栈顶生成新的活动</li>\n<li>singleTop:栈顶时该活动时不能重新生成，不处于栈顶时可重新生成</li>\n<li>singleTask：每次启动检查返回栈中是否有，如果有则不启动，而是将其上的活动移除，使用已有实例，没有时新建</li>\n<li>singleInstance：启用一个新的返回栈管理活动。如与其他程序共享同一个活动或者调用，不管哪个应用访问活动，共用一个返回栈（新的）。只有标记了singleInstance的活动才会入新栈，随后生成的活动还是返回到原始栈。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"基础UI\"><a href=\"#基础UI\" class=\"headerlink\" title=\"基础UI\"></a>基础UI</h3><ol>\n<li>基础中的基础：TextView、Button、EditText(hint,maxLines)、ImageView(src)、ProgressBar(style[更改显示样式，圆形，水平进度条]、setProgress(int))</li>\n<li>AlertDialog、ProgressDialog：通过代码实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder dialog = <span class=\"keyword\">new</span> AlertDialog.Builder(Context);</span><br><span class=\"line\"><span class=\"comment\">//设置标题、信息、设置点击两个按钮的监听setPositiveButton(\"OK\", new DialogInterface.OnClickListener()&#123;&#125;)与setNegative(\"Cancel\", new Dialog)</span></span><br><span class=\"line\">dialog.show();</span><br><span class=\"line\"></span><br><span class=\"line\">ProgressDialog progressdialog = <span class=\"keyword\">new</span> ProgressDialog(Context);<span class=\"keyword\">abstract</span><span class=\"comment\">// 设置标题、返回键关闭等</span></span><br><span class=\"line\">progressdialog.show();</span><br><span class=\"line\"><span class=\"comment\">// 绑定事件监听、使用dismiss()关闭</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><ol>\n<li>四大基本布局：线型布局(LinearLayout)、相对布局(RelativeLayout)、帧布局(FrameLayout)、百分比布局(PercentFrameLayout)。<ul>\n<li>线型布局：orientation、layout_weight</li>\n<li>相对布局：layout_alignParent[Left/Top/…]、layout_to[Left/Top/…]Of</li>\n<li>帧布局：内部元素默认在左上角</li>\n<li>百分比布局：’com.android.support:percent:version’、app:layout_[width/height]Percent</li>\n<li>gravity与layout_gravity:前者是View内部内容的布局位置、后者是布局在父布局的位置</li>\n</ul>\n</li>\n</ol>\n<p>待续—2018年5月30日23点52分</p>\n<center> — end — </center>\n\n<hr>"},{"title":"Android Studio 中常用的一些布局(三)","date":"2017-04-16T13:30:28.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局-三/naturetree.jpg)\n\n## 侧滑菜单的优化\n这是这个系列的第三篇文章。今天是在以前的基础上实现优化，上一次的侧滑菜单只是一个简单的 TexiView，今天我们将要把它做的更加好看、更加符合一般在 APP 中看到的样子。今天的成果图如下：\n<!-- more -->\n![](Android-Studio-中常用的一些布局-三/rst.png)\n\n### 菜单页面定制布局\n谷歌给我们提供一个很好的方法来实现上述的功能，就是 NavigationView。NavigationView 是 Design Support 库中提供的一个控件，所以我们首先要添加对应的依赖项。在 app/build.gradle 中添加依赖项如下：\n``` xml\n    compile 'com.android.support:appcompat-v7:25.3.0'\n    compile 'com.android.support:design:25.3.0'\n    compile 'de.hdodenhof:circleimageview:2.1.0'\n```\n注意依赖包的版本问题，support 包的版本要一致，此处我用的是 25.3.0 的版本。其中的 circleimageview 是一个实现图片圆形化的包。\n\n另外，在 NavigationView 中，我们还需要准备两个布局，一个 menu 和 一个 headerLayout，分别对应的是成果图中的下部菜单选项和上部个人信息部分。在 menu 文件夹中生成一个 nav_menu.xml 文件，编写：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_call\"\n            android:icon=\"@drawable/account_circle\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/people_white\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/nav_location\"\n            android:icon=\"@drawable/my_location\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/nav_mail\"\n            android:icon=\"@drawable/event\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/nav_task\"\n            android:icon=\"@drawable/settings_white\"\n            android:title=\"Tasks\"/>\n    </group>\n</menu>\n```\n在 layout 文件夹中同理新建一个 nav_header.xml 文件，编写如下\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"?attr/colorPrimary\">\n\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/icon_image\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:layout_centerInParent=\"true\"\n        android:src=\"@drawable/avatar\"/>\n\n    <TextView\n        android:id=\"@+id/mail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"dongodao@gamil.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n    <TextView\n        android:id=\"@+id/username\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/mail\"\n        android:text=\"dongmodao\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"24sp\"/>\n</RelativeLayout>\n```\n于是准备工作就完成了，接下来就在 activity_main.xml 中使用 NavigationView， 在 DrawerLayout 中删除原来的 TextView 布局，并添加子布局如下：\n``` xml\n<android.support.design.widget.NavigationView\n    android:id=\"@+id/nav_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_gravity=\"start\"\n    app:menu=\"@menu/nav_menu\"\n    app:headerLayout=\"@layout/nav_header\"/>\n```\n于是乎，关于页面的部分就写完了。接下来就是在界面中侧滑菜单上显示出来了，转到 activity_main.xml 中，在 onCreate 中加入如下代码：\n``` java\nNavigationView navView = (NavigationView)findViewById(R.id.nav_view);\nnavView.setCheckedItem(R.id.nav_call);\nnavView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){\n    @Override\n    public boolean onNavigationItemSelected( MenuItem item) {\n        mDrawerLayout.closeDrawers();\n        return true;\n    }\n});\n```\n\n到了这里，我们就已经基本实现了侧滑菜单了。这次就先到这里吧，最近时间段比较忙，这篇也被迫推到了现在。。本来基本每周周五都有时间来进行更新，这周进行实验然后也就被用去了这段时间，唉，加油吧以后！！！\n\n## 小说明\n下次更新这个系列应该是比较久之后了吧，毕竟这是学习郭神的书写的，以后打算写一些自己的东西。最近觉得只有那些自己能写出个一二三来的东西，才是自己比较了解的，对自己的帮助也更大。所以以后还是尽量写干货，这也是一个重复学习的过程。如果一味的学习人家的东西而不加入自己的成分就没有太多效果了，这也是我后面要多写自己的东西的原因之一。Anyway，加油！\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Studio-中常用的一些布局-三.md","raw":"---\ntitle: Android Studio 中常用的一些布局(三)\ndate: 2017-04-16 21:30:28\ntags: [Android Studio, 布局]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局-三/naturetree.jpg)\n\n## 侧滑菜单的优化\n这是这个系列的第三篇文章。今天是在以前的基础上实现优化，上一次的侧滑菜单只是一个简单的 TexiView，今天我们将要把它做的更加好看、更加符合一般在 APP 中看到的样子。今天的成果图如下：\n<!-- more -->\n![](Android-Studio-中常用的一些布局-三/rst.png)\n\n### 菜单页面定制布局\n谷歌给我们提供一个很好的方法来实现上述的功能，就是 NavigationView。NavigationView 是 Design Support 库中提供的一个控件，所以我们首先要添加对应的依赖项。在 app/build.gradle 中添加依赖项如下：\n``` xml\n    compile 'com.android.support:appcompat-v7:25.3.0'\n    compile 'com.android.support:design:25.3.0'\n    compile 'de.hdodenhof:circleimageview:2.1.0'\n```\n注意依赖包的版本问题，support 包的版本要一致，此处我用的是 25.3.0 的版本。其中的 circleimageview 是一个实现图片圆形化的包。\n\n另外，在 NavigationView 中，我们还需要准备两个布局，一个 menu 和 一个 headerLayout，分别对应的是成果图中的下部菜单选项和上部个人信息部分。在 menu 文件夹中生成一个 nav_menu.xml 文件，编写：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_call\"\n            android:icon=\"@drawable/account_circle\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/people_white\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/nav_location\"\n            android:icon=\"@drawable/my_location\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/nav_mail\"\n            android:icon=\"@drawable/event\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/nav_task\"\n            android:icon=\"@drawable/settings_white\"\n            android:title=\"Tasks\"/>\n    </group>\n</menu>\n```\n在 layout 文件夹中同理新建一个 nav_header.xml 文件，编写如下\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"?attr/colorPrimary\">\n\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/icon_image\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:layout_centerInParent=\"true\"\n        android:src=\"@drawable/avatar\"/>\n\n    <TextView\n        android:id=\"@+id/mail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"dongodao@gamil.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n    <TextView\n        android:id=\"@+id/username\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/mail\"\n        android:text=\"dongmodao\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"24sp\"/>\n</RelativeLayout>\n```\n于是准备工作就完成了，接下来就在 activity_main.xml 中使用 NavigationView， 在 DrawerLayout 中删除原来的 TextView 布局，并添加子布局如下：\n``` xml\n<android.support.design.widget.NavigationView\n    android:id=\"@+id/nav_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_gravity=\"start\"\n    app:menu=\"@menu/nav_menu\"\n    app:headerLayout=\"@layout/nav_header\"/>\n```\n于是乎，关于页面的部分就写完了。接下来就是在界面中侧滑菜单上显示出来了，转到 activity_main.xml 中，在 onCreate 中加入如下代码：\n``` java\nNavigationView navView = (NavigationView)findViewById(R.id.nav_view);\nnavView.setCheckedItem(R.id.nav_call);\nnavView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){\n    @Override\n    public boolean onNavigationItemSelected( MenuItem item) {\n        mDrawerLayout.closeDrawers();\n        return true;\n    }\n});\n```\n\n到了这里，我们就已经基本实现了侧滑菜单了。这次就先到这里吧，最近时间段比较忙，这篇也被迫推到了现在。。本来基本每周周五都有时间来进行更新，这周进行实验然后也就被用去了这段时间，唉，加油吧以后！！！\n\n## 小说明\n下次更新这个系列应该是比较久之后了吧，毕竟这是学习郭神的书写的，以后打算写一些自己的东西。最近觉得只有那些自己能写出个一二三来的东西，才是自己比较了解的，对自己的帮助也更大。所以以后还是尽量写干货，这也是一个重复学习的过程。如果一味的学习人家的东西而不加入自己的成分就没有太多效果了，这也是我后面要多写自己的东西的原因之一。Anyway，加油！\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Studio-中常用的一些布局-三","published":1,"updated":"2019-05-10T16:14:30.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxwi00095cv9ctd4v86p","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/16/Android-Studio-中常用的一些布局-三/naturetree.jpg\" alt=\"\"></p>\n<h2 id=\"侧滑菜单的优化\"><a href=\"#侧滑菜单的优化\" class=\"headerlink\" title=\"侧滑菜单的优化\"></a>侧滑菜单的优化</h2><p>这是这个系列的第三篇文章。今天是在以前的基础上实现优化，上一次的侧滑菜单只是一个简单的 TexiView，今天我们将要把它做的更加好看、更加符合一般在 APP 中看到的样子。今天的成果图如下：<br><a id=\"more\"></a><br><img src=\"/2017/04/16/Android-Studio-中常用的一些布局-三/rst.png\" alt=\"\"></p>\n<h3 id=\"菜单页面定制布局\"><a href=\"#菜单页面定制布局\" class=\"headerlink\" title=\"菜单页面定制布局\"></a>菜单页面定制布局</h3><p>谷歌给我们提供一个很好的方法来实现上述的功能，就是 NavigationView。NavigationView 是 Design Support 库中提供的一个控件，所以我们首先要添加对应的依赖项。在 app/build.gradle 中添加依赖项如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile 'com.android.support:appcompat-v7:25.3.0'</span><br><span class=\"line\">compile 'com.android.support:design:25.3.0'</span><br><span class=\"line\">compile 'de.hdodenhof:circleimageview:2.1.0'</span><br></pre></td></tr></table></figure></p>\n<p>注意依赖包的版本问题，support 包的版本要一致，此处我用的是 25.3.0 的版本。其中的 circleimageview 是一个实现图片圆形化的包。</p>\n<p>另外，在 NavigationView 中，我们还需要准备两个布局，一个 menu 和 一个 headerLayout，分别对应的是成果图中的下部菜单选项和上部个人信息部分。在 menu 文件夹中生成一个 nav_menu.xml 文件，编写：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/account_circle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Call\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/people_white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Friends\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_location\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/my_location\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Location\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Mail\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_task\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/settings_white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Tasks\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在 layout 文件夹中同理新建一个 nav_header.xml 文件，编写如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">de.hdodenhof.circleimageview.CircleImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/icon_image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"70dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"70dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/avatar\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentBottom</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"dongodao@gamil.com\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"14sp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_above</span>=<span class=\"string\">\"@id/mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"dongmodao\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>于是准备工作就完成了，接下来就在 activity_main.xml 中使用 NavigationView， 在 DrawerLayout 中删除原来的 TextView 布局，并添加子布局如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/nav_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/nav_header\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>于是乎，关于页面的部分就写完了。接下来就是在界面中侧滑菜单上显示出来了，转到 activity_main.xml 中，在 onCreate 中加入如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationView navView = (NavigationView)findViewById(R.id.nav_view);</span><br><span class=\"line\">navView.setCheckedItem(R.id.nav_call);</span><br><span class=\"line\">navView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">( MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        mDrawerLayout.closeDrawers();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>到了这里，我们就已经基本实现了侧滑菜单了。这次就先到这里吧，最近时间段比较忙，这篇也被迫推到了现在。。本来基本每周周五都有时间来进行更新，这周进行实验然后也就被用去了这段时间，唉，加油吧以后！！！</p>\n<h2 id=\"小说明\"><a href=\"#小说明\" class=\"headerlink\" title=\"小说明\"></a>小说明</h2><p>下次更新这个系列应该是比较久之后了吧，毕竟这是学习郭神的书写的，以后打算写一些自己的东西。最近觉得只有那些自己能写出个一二三来的东西，才是自己比较了解的，对自己的帮助也更大。所以以后还是尽量写干货，这也是一个重复学习的过程。如果一味的学习人家的东西而不加入自己的成分就没有太多效果了，这也是我后面要多写自己的东西的原因之一。Anyway，加油！</p>\n<blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/16/Android-Studio-中常用的一些布局-三/naturetree.jpg\" alt=\"\"></p>\n<h2 id=\"侧滑菜单的优化\"><a href=\"#侧滑菜单的优化\" class=\"headerlink\" title=\"侧滑菜单的优化\"></a>侧滑菜单的优化</h2><p>这是这个系列的第三篇文章。今天是在以前的基础上实现优化，上一次的侧滑菜单只是一个简单的 TexiView，今天我们将要把它做的更加好看、更加符合一般在 APP 中看到的样子。今天的成果图如下：<br></p>","more":"<br><img src=\"/2017/04/16/Android-Studio-中常用的一些布局-三/rst.png\" alt=\"\"><p></p>\n<h3 id=\"菜单页面定制布局\"><a href=\"#菜单页面定制布局\" class=\"headerlink\" title=\"菜单页面定制布局\"></a>菜单页面定制布局</h3><p>谷歌给我们提供一个很好的方法来实现上述的功能，就是 NavigationView。NavigationView 是 Design Support 库中提供的一个控件，所以我们首先要添加对应的依赖项。在 app/build.gradle 中添加依赖项如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile 'com.android.support:appcompat-v7:25.3.0'</span><br><span class=\"line\">compile 'com.android.support:design:25.3.0'</span><br><span class=\"line\">compile 'de.hdodenhof:circleimageview:2.1.0'</span><br></pre></td></tr></table></figure></p>\n<p>注意依赖包的版本问题，support 包的版本要一致，此处我用的是 25.3.0 的版本。其中的 circleimageview 是一个实现图片圆形化的包。</p>\n<p>另外，在 NavigationView 中，我们还需要准备两个布局，一个 menu 和 一个 headerLayout，分别对应的是成果图中的下部菜单选项和上部个人信息部分。在 menu 文件夹中生成一个 nav_menu.xml 文件，编写：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/account_circle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Call\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/people_white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Friends\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_location\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/my_location\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Location\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Mail\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_task\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/settings_white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Tasks\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在 layout 文件夹中同理新建一个 nav_header.xml 文件，编写如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">de.hdodenhof.circleimageview.CircleImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/icon_image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"70dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"70dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/avatar\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentBottom</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"dongodao@gamil.com\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"14sp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_above</span>=<span class=\"string\">\"@id/mail\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"dongmodao\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>于是准备工作就完成了，接下来就在 activity_main.xml 中使用 NavigationView， 在 DrawerLayout 中删除原来的 TextView 布局，并添加子布局如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/nav_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/nav_header\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>于是乎，关于页面的部分就写完了。接下来就是在界面中侧滑菜单上显示出来了，转到 activity_main.xml 中，在 onCreate 中加入如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationView navView = (NavigationView)findViewById(R.id.nav_view);</span><br><span class=\"line\">navView.setCheckedItem(R.id.nav_call);</span><br><span class=\"line\">navView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">( MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        mDrawerLayout.closeDrawers();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>到了这里，我们就已经基本实现了侧滑菜单了。这次就先到这里吧，最近时间段比较忙，这篇也被迫推到了现在。。本来基本每周周五都有时间来进行更新，这周进行实验然后也就被用去了这段时间，唉，加油吧以后！！！</p>\n<h2 id=\"小说明\"><a href=\"#小说明\" class=\"headerlink\" title=\"小说明\"></a>小说明</h2><p>下次更新这个系列应该是比较久之后了吧，毕竟这是学习郭神的书写的，以后打算写一些自己的东西。最近觉得只有那些自己能写出个一二三来的东西，才是自己比较了解的，对自己的帮助也更大。所以以后还是尽量写干货，这也是一个重复学习的过程。如果一味的学习人家的东西而不加入自己的成分就没有太多效果了，这也是我后面要多写自己的东西的原因之一。Anyway，加油！</p>\n<blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>"},{"title":"Android Service","date":"2018-06-09T12:23:49.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Service/index.jpg)\n\n\n### 服务 Service\n\n 在程序后台运行的，不需要和用户交互且要求长期运行的任务，不依赖于用户界面，程序被切换到后台之后仍能正常运行。依赖于应用程序的进程，应用程序进程被杀死时，服务也停止。代码运行于主线程中，需要则考虑自己开线程。<!-- more -->\n\n#### 异步处理机制\n 1. 组成：Message、Handler、MessageQueue、Looper\n  + Message 用于消息的存取，what、arg1、arg2、obj 等可以存取，\n  + Handler 则是处理消息，使用 sendMessage() 方法发送消息到 MessageQueue 中，最终传到 Hanlder 的 hanldeMessage() 方法中，以供处理。\n  + MessageQueue 是消息队列，用于存放 Hander 使用 sendMessage() 发送的 Message，等待 Looper 的提取，处理。每个线程只会有一个 MessageQueue 对象。\n  + Looper 循环监控 MessageQueue，调用 Looper 的 loop() 发送的消息之后，无限循环，发现 MessageQueue 中有消息时取出给 Hander 调用 handleMessage() 方法。每个线程只有一个 Looper 对象。\n  ![异步消息处理机制流程《第一行代码》第二版·郭霖](images/handler.png \"异步消息处理机制流程《第一行代码》第二版·郭霖\")\n\n 2. AsyncTask 的使用\n  实现原理基于异步处理机制，抽象类，需要子类继承使用，继承时可以使用 3 个泛型参数：\n  ```\n  Params: 执行 AsyncTask 时需要传入的参数，可用于后台任务\n  Progress: 后台执行任务时，用于显示进度\n  Result: 执行完毕之后，如需对结果进行返回，则用于返回\n\n  定义如下：\n\n  class NewTask extends AsyncTask<Void, Integer, Boolean> {\n    ...\n  }\n  ```\n  重写 AsyncTask 方法完成任务的定制，主要方法有以下几个：\n  1. onPreExecute(): 会在后台任务执行之前使用， 可以进行 UI 操作，如一些界面上的初始化操作，如进度条对话框。\n  2. doInBackground(Params...): 这个方法的所有代码都会在子线程中执行，处理耗时任务，任务完成时可以通过 return 返回结果，如果 Result 的类型是 Void 则没有返回。不可以进行 UI 操作，但可以调用诸如 publishProgress(Progress...) 方法完成。\n  3. onProgressUpdate(Progress...): 当在后台调用 publishProgress(Progress...) 方法后，这个方法很快被调用，携带的参数就是后台任务中传递过来的。可以进行 UI 的操作。\n  4. onPostExecute(Result): 当在后台执行完毕并通过 return 返回时，调用方法。返回的数据作为参数传递到该方法，可以进行 UI 操作，如提醒结果，关闭对话框等。\n  5. 使用 new NewTask().execute(); 来启动这个任务\n\n  **注意:** publishProgress() 方法要在 doInBackground() 中调用，才能把执行的进度传到 onProgressUpdate() 中， onProgressUpdate() 才会执行。\n\n#### 服务的基本用法\n 1. 定义服务\n  从 AS 中右键 New 中定义新的的服务。其中除了命名之外还需要选中 Exported 和 Enabled 两个属性，和广播的属性定义是一样的。AS 会在 AndroidManifest.xml 中自动生成相关代码。\n\n  自定义 NewService 继承自称自 Service 类，要重写一个 onBind() 方法，在 Service 类中时抽象的，需要在子类中实现。\n\n  重写其他和 Service 生命周期有关的方法，比如：onCreate()、onStartCommand()、onDestroy()，分别在服务创建时、每次启动服务时、服务销毁时进行调用。\n\n 2. 启动与停止\n  借助 Intent 来实现启动和停止。\n  + 在活动中调用 ``startService(new Intent(this, NewService.class));``  进行启动\n  + 同理，使用 ``stopService(new Intent(this, NewService.class));`` 来停止\n  + 在 NewService 中，可以使用 stopSelf() 方法停止服务\n\n  **注意：** 对于广播和服务等一些比较特殊的类型来说，当子类时内部类时，需要使用 static 修饰。否则将报错： has no zero argument constructor 的错误。\n\n#### 活动和服务的通信\n 使用自定义服务 onBind() 方法进行管理。\n 1. 创建自定义绑定类，继承于 Binder，在该类中可以定义了解服务内容需要的方法。\n 2. 在 onBind() 中返回这一个绑定类，实现了 IBinder 接口\n 3. 使用 ServiceConnection 实例来获取服务 onBind() 中返回的自定义 Binder（需要转型），在该类中可以定义了解服务内容需要的方法。实现了两个接口，分别在活动与服务成功绑定以及接触绑定的时候调用。\n 4. 使用 ``bindService(Intent, ServiceConnection, BIND_AUTO_CREATE);`` 绑定服务，使用 ``unbindService(ServiceConnection);`` 解绑服务。其中 BIND_AUTO_CREATE 表示在霍东阁和服务绑定后自动创建服务而不经过 onStartCommand() 方法。\n 5. 绑定之后，可以通过调用自定义的 Binder 类的方法来实现服务执行功能。\n 6. 可以和不同的活动进行绑定，返回的是同一个 Binder 实例。\n 7. 可以进行借助自定义的 Binder 和 Service 进行通信了。\n\n **注意**\n\n  服务都会只有一个，当服务都使用了 startService() 和 bindService() 两个方法，需要同时调用 stopService() 和 unbindService() 才能销毁服务，两个条件要都满足。而且如果使用 bindService() 生成、不使用 startService()，则必定是以 unbindService() 销毁；同理，使用 startService() 创建而不适用 bindService()，则必以 stopService() 销毁。两者都使用，则两者都不使用时才销毁，否则服务将一直运行。\n\n  当使用服务做一些耗时的工作时，主要执行在 onStartCommand() 方法中，所以需要开启子线程进行处理。如果不适用子线程，则代码运行在主线程中，很容易出现 ANR(Application Not Responding) 的情况。\n\n  可以使用继承自 IntentService 的类来避免复杂操作，该类可简单创建异步、会自动停止的服务。重写 onHandleIntent() 中执行代码则不需要担心 ANR 问题，因为该方法在子线程中运行。\n\n#### 生命周期\n 1. startService -> (onCreate) -> onStartCommand -> stopService/stopSelf -> onDestroy\n 2. bindService -> (onCreate) -> onBind -> unbindService -> onDestroy\n 3. 每调用一次 startService 就会执行一次 onStartCommand\n\n#### 进阶\n 前台服务与普通服务，有一个图标显示在状态栏，下拉可看到更详细信息，类似于同值效果，防止 GC。使用 PendingIntent，Notification 等。使用 IntentService 等。\n\n **致谢：**\n  1. 《第一行代码（第二版）》·郭霖\n\n\n <center> --- end --- </center>\n\n ---\n","source":"_posts/Android-Service.md","raw":"---\ntitle: Android Service\ndate: 2018-06-09 20:23:49\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-Service/index.jpg)\n\n\n### 服务 Service\n\n 在程序后台运行的，不需要和用户交互且要求长期运行的任务，不依赖于用户界面，程序被切换到后台之后仍能正常运行。依赖于应用程序的进程，应用程序进程被杀死时，服务也停止。代码运行于主线程中，需要则考虑自己开线程。<!-- more -->\n\n#### 异步处理机制\n 1. 组成：Message、Handler、MessageQueue、Looper\n  + Message 用于消息的存取，what、arg1、arg2、obj 等可以存取，\n  + Handler 则是处理消息，使用 sendMessage() 方法发送消息到 MessageQueue 中，最终传到 Hanlder 的 hanldeMessage() 方法中，以供处理。\n  + MessageQueue 是消息队列，用于存放 Hander 使用 sendMessage() 发送的 Message，等待 Looper 的提取，处理。每个线程只会有一个 MessageQueue 对象。\n  + Looper 循环监控 MessageQueue，调用 Looper 的 loop() 发送的消息之后，无限循环，发现 MessageQueue 中有消息时取出给 Hander 调用 handleMessage() 方法。每个线程只有一个 Looper 对象。\n  ![异步消息处理机制流程《第一行代码》第二版·郭霖](images/handler.png \"异步消息处理机制流程《第一行代码》第二版·郭霖\")\n\n 2. AsyncTask 的使用\n  实现原理基于异步处理机制，抽象类，需要子类继承使用，继承时可以使用 3 个泛型参数：\n  ```\n  Params: 执行 AsyncTask 时需要传入的参数，可用于后台任务\n  Progress: 后台执行任务时，用于显示进度\n  Result: 执行完毕之后，如需对结果进行返回，则用于返回\n\n  定义如下：\n\n  class NewTask extends AsyncTask<Void, Integer, Boolean> {\n    ...\n  }\n  ```\n  重写 AsyncTask 方法完成任务的定制，主要方法有以下几个：\n  1. onPreExecute(): 会在后台任务执行之前使用， 可以进行 UI 操作，如一些界面上的初始化操作，如进度条对话框。\n  2. doInBackground(Params...): 这个方法的所有代码都会在子线程中执行，处理耗时任务，任务完成时可以通过 return 返回结果，如果 Result 的类型是 Void 则没有返回。不可以进行 UI 操作，但可以调用诸如 publishProgress(Progress...) 方法完成。\n  3. onProgressUpdate(Progress...): 当在后台调用 publishProgress(Progress...) 方法后，这个方法很快被调用，携带的参数就是后台任务中传递过来的。可以进行 UI 的操作。\n  4. onPostExecute(Result): 当在后台执行完毕并通过 return 返回时，调用方法。返回的数据作为参数传递到该方法，可以进行 UI 操作，如提醒结果，关闭对话框等。\n  5. 使用 new NewTask().execute(); 来启动这个任务\n\n  **注意:** publishProgress() 方法要在 doInBackground() 中调用，才能把执行的进度传到 onProgressUpdate() 中， onProgressUpdate() 才会执行。\n\n#### 服务的基本用法\n 1. 定义服务\n  从 AS 中右键 New 中定义新的的服务。其中除了命名之外还需要选中 Exported 和 Enabled 两个属性，和广播的属性定义是一样的。AS 会在 AndroidManifest.xml 中自动生成相关代码。\n\n  自定义 NewService 继承自称自 Service 类，要重写一个 onBind() 方法，在 Service 类中时抽象的，需要在子类中实现。\n\n  重写其他和 Service 生命周期有关的方法，比如：onCreate()、onStartCommand()、onDestroy()，分别在服务创建时、每次启动服务时、服务销毁时进行调用。\n\n 2. 启动与停止\n  借助 Intent 来实现启动和停止。\n  + 在活动中调用 ``startService(new Intent(this, NewService.class));``  进行启动\n  + 同理，使用 ``stopService(new Intent(this, NewService.class));`` 来停止\n  + 在 NewService 中，可以使用 stopSelf() 方法停止服务\n\n  **注意：** 对于广播和服务等一些比较特殊的类型来说，当子类时内部类时，需要使用 static 修饰。否则将报错： has no zero argument constructor 的错误。\n\n#### 活动和服务的通信\n 使用自定义服务 onBind() 方法进行管理。\n 1. 创建自定义绑定类，继承于 Binder，在该类中可以定义了解服务内容需要的方法。\n 2. 在 onBind() 中返回这一个绑定类，实现了 IBinder 接口\n 3. 使用 ServiceConnection 实例来获取服务 onBind() 中返回的自定义 Binder（需要转型），在该类中可以定义了解服务内容需要的方法。实现了两个接口，分别在活动与服务成功绑定以及接触绑定的时候调用。\n 4. 使用 ``bindService(Intent, ServiceConnection, BIND_AUTO_CREATE);`` 绑定服务，使用 ``unbindService(ServiceConnection);`` 解绑服务。其中 BIND_AUTO_CREATE 表示在霍东阁和服务绑定后自动创建服务而不经过 onStartCommand() 方法。\n 5. 绑定之后，可以通过调用自定义的 Binder 类的方法来实现服务执行功能。\n 6. 可以和不同的活动进行绑定，返回的是同一个 Binder 实例。\n 7. 可以进行借助自定义的 Binder 和 Service 进行通信了。\n\n **注意**\n\n  服务都会只有一个，当服务都使用了 startService() 和 bindService() 两个方法，需要同时调用 stopService() 和 unbindService() 才能销毁服务，两个条件要都满足。而且如果使用 bindService() 生成、不使用 startService()，则必定是以 unbindService() 销毁；同理，使用 startService() 创建而不适用 bindService()，则必以 stopService() 销毁。两者都使用，则两者都不使用时才销毁，否则服务将一直运行。\n\n  当使用服务做一些耗时的工作时，主要执行在 onStartCommand() 方法中，所以需要开启子线程进行处理。如果不适用子线程，则代码运行在主线程中，很容易出现 ANR(Application Not Responding) 的情况。\n\n  可以使用继承自 IntentService 的类来避免复杂操作，该类可简单创建异步、会自动停止的服务。重写 onHandleIntent() 中执行代码则不需要担心 ANR 问题，因为该方法在子线程中运行。\n\n#### 生命周期\n 1. startService -> (onCreate) -> onStartCommand -> stopService/stopSelf -> onDestroy\n 2. bindService -> (onCreate) -> onBind -> unbindService -> onDestroy\n 3. 每调用一次 startService 就会执行一次 onStartCommand\n\n#### 进阶\n 前台服务与普通服务，有一个图标显示在状态栏，下拉可看到更详细信息，类似于同值效果，防止 GC。使用 PendingIntent，Notification 等。使用 IntentService 等。\n\n **致谢：**\n  1. 《第一行代码（第二版）》·郭霖\n\n\n <center> --- end --- </center>\n\n ---\n","slug":"Android-Service","published":1,"updated":"2019-05-10T16:14:30.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxwm000a5cv9ms4t4bnt","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/09/Android-Service/index.jpg\" alt=\"\"></p>\n<h3 id=\"服务-Service\"><a href=\"#服务-Service\" class=\"headerlink\" title=\"服务 Service\"></a>服务 Service</h3><p> 在程序后台运行的，不需要和用户交互且要求长期运行的任务，不依赖于用户界面，程序被切换到后台之后仍能正常运行。依赖于应用程序的进程，应用程序进程被杀死时，服务也停止。代码运行于主线程中，需要则考虑自己开线程。<a id=\"more\"></a></p>\n<h4 id=\"异步处理机制\"><a href=\"#异步处理机制\" class=\"headerlink\" title=\"异步处理机制\"></a>异步处理机制</h4><ol>\n<li><p>组成：Message、Handler、MessageQueue、Looper</p>\n<ul>\n<li>Message 用于消息的存取，what、arg1、arg2、obj 等可以存取，</li>\n<li>Handler 则是处理消息，使用 sendMessage() 方法发送消息到 MessageQueue 中，最终传到 Hanlder 的 hanldeMessage() 方法中，以供处理。</li>\n<li>MessageQueue 是消息队列，用于存放 Hander 使用 sendMessage() 发送的 Message，等待 Looper 的提取，处理。每个线程只会有一个 MessageQueue 对象。</li>\n<li>Looper 循环监控 MessageQueue，调用 Looper 的 loop() 发送的消息之后，无限循环，发现 MessageQueue 中有消息时取出给 Hander 调用 handleMessage() 方法。每个线程只有一个 Looper 对象。<br><img src=\"/2018/06/09/Android-Service/handler.png\" alt=\"异步消息处理机制流程《第一行代码》第二版·郭霖\" title=\"异步消息处理机制流程《第一行代码》第二版·郭霖\"></li>\n</ul>\n</li>\n<li><p>AsyncTask 的使用<br>实现原理基于异步处理机制，抽象类，需要子类继承使用，继承时可以使用 3 个泛型参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Params: 执行 AsyncTask 时需要传入的参数，可用于后台任务</span><br><span class=\"line\">Progress: 后台执行任务时，用于显示进度</span><br><span class=\"line\">Result: 执行完毕之后，如需对结果进行返回，则用于返回</span><br><span class=\"line\"></span><br><span class=\"line\">定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">class NewTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写 AsyncTask 方法完成任务的定制，主要方法有以下几个：</p>\n<ol>\n<li>onPreExecute(): 会在后台任务执行之前使用， 可以进行 UI 操作，如一些界面上的初始化操作，如进度条对话框。</li>\n<li>doInBackground(Params…): 这个方法的所有代码都会在子线程中执行，处理耗时任务，任务完成时可以通过 return 返回结果，如果 Result 的类型是 Void 则没有返回。不可以进行 UI 操作，但可以调用诸如 publishProgress(Progress…) 方法完成。</li>\n<li>onProgressUpdate(Progress…): 当在后台调用 publishProgress(Progress…) 方法后，这个方法很快被调用，携带的参数就是后台任务中传递过来的。可以进行 UI 的操作。</li>\n<li>onPostExecute(Result): 当在后台执行完毕并通过 return 返回时，调用方法。返回的数据作为参数传递到该方法，可以进行 UI 操作，如提醒结果，关闭对话框等。</li>\n<li>使用 new NewTask().execute(); 来启动这个任务</li>\n</ol>\n<p><strong>注意:</strong> publishProgress() 方法要在 doInBackground() 中调用，才能把执行的进度传到 onProgressUpdate() 中， onProgressUpdate() 才会执行。</p>\n</li>\n</ol>\n<h4 id=\"服务的基本用法\"><a href=\"#服务的基本用法\" class=\"headerlink\" title=\"服务的基本用法\"></a>服务的基本用法</h4><ol>\n<li><p>定义服务<br>从 AS 中右键 New 中定义新的的服务。其中除了命名之外还需要选中 Exported 和 Enabled 两个属性，和广播的属性定义是一样的。AS 会在 AndroidManifest.xml 中自动生成相关代码。</p>\n<p>自定义 NewService 继承自称自 Service 类，要重写一个 onBind() 方法，在 Service 类中时抽象的，需要在子类中实现。</p>\n<p>重写其他和 Service 生命周期有关的方法，比如：onCreate()、onStartCommand()、onDestroy()，分别在服务创建时、每次启动服务时、服务销毁时进行调用。</p>\n</li>\n<li><p>启动与停止<br>借助 Intent 来实现启动和停止。</p>\n<ul>\n<li>在活动中调用 <code>startService(new Intent(this, NewService.class));</code>  进行启动</li>\n<li>同理，使用 <code>stopService(new Intent(this, NewService.class));</code> 来停止</li>\n<li>在 NewService 中，可以使用 stopSelf() 方法停止服务</li>\n</ul>\n<p><strong>注意：</strong> 对于广播和服务等一些比较特殊的类型来说，当子类时内部类时，需要使用 static 修饰。否则将报错： has no zero argument constructor 的错误。</p>\n</li>\n</ol>\n<h4 id=\"活动和服务的通信\"><a href=\"#活动和服务的通信\" class=\"headerlink\" title=\"活动和服务的通信\"></a>活动和服务的通信</h4><p> 使用自定义服务 onBind() 方法进行管理。</p>\n<ol>\n<li>创建自定义绑定类，继承于 Binder，在该类中可以定义了解服务内容需要的方法。</li>\n<li>在 onBind() 中返回这一个绑定类，实现了 IBinder 接口</li>\n<li>使用 ServiceConnection 实例来获取服务 onBind() 中返回的自定义 Binder（需要转型），在该类中可以定义了解服务内容需要的方法。实现了两个接口，分别在活动与服务成功绑定以及接触绑定的时候调用。</li>\n<li>使用 <code>bindService(Intent, ServiceConnection, BIND_AUTO_CREATE);</code> 绑定服务，使用 <code>unbindService(ServiceConnection);</code> 解绑服务。其中 BIND_AUTO_CREATE 表示在霍东阁和服务绑定后自动创建服务而不经过 onStartCommand() 方法。</li>\n<li>绑定之后，可以通过调用自定义的 Binder 类的方法来实现服务执行功能。</li>\n<li>可以和不同的活动进行绑定，返回的是同一个 Binder 实例。</li>\n<li><p>可以进行借助自定义的 Binder 和 Service 进行通信了。</p>\n<p><strong>注意</strong></p>\n<p>服务都会只有一个，当服务都使用了 startService() 和 bindService() 两个方法，需要同时调用 stopService() 和 unbindService() 才能销毁服务，两个条件要都满足。而且如果使用 bindService() 生成、不使用 startService()，则必定是以 unbindService() 销毁；同理，使用 startService() 创建而不适用 bindService()，则必以 stopService() 销毁。两者都使用，则两者都不使用时才销毁，否则服务将一直运行。</p>\n<p>当使用服务做一些耗时的工作时，主要执行在 onStartCommand() 方法中，所以需要开启子线程进行处理。如果不适用子线程，则代码运行在主线程中，很容易出现 ANR(Application Not Responding) 的情况。</p>\n<p>可以使用继承自 IntentService 的类来避免复杂操作，该类可简单创建异步、会自动停止的服务。重写 onHandleIntent() 中执行代码则不需要担心 ANR 问题，因为该方法在子线程中运行。</p>\n</li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ol>\n<li>startService -&gt; (onCreate) -&gt; onStartCommand -&gt; stopService/stopSelf -&gt; onDestroy</li>\n<li>bindService -&gt; (onCreate) -&gt; onBind -&gt; unbindService -&gt; onDestroy</li>\n<li>每调用一次 startService 就会执行一次 onStartCommand</li>\n</ol>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p> 前台服务与普通服务，有一个图标显示在状态栏，下拉可看到更详细信息，类似于同值效果，防止 GC。使用 PendingIntent，Notification 等。使用 IntentService 等。</p>\n<p> <strong>致谢：</strong></p>\n<ol>\n<li>《第一行代码（第二版）》·郭霖</li>\n</ol>\n <center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/09/Android-Service/index.jpg\" alt=\"\"></p>\n<h3 id=\"服务-Service\"><a href=\"#服务-Service\" class=\"headerlink\" title=\"服务 Service\"></a>服务 Service</h3><p> 在程序后台运行的，不需要和用户交互且要求长期运行的任务，不依赖于用户界面，程序被切换到后台之后仍能正常运行。依赖于应用程序的进程，应用程序进程被杀死时，服务也停止。代码运行于主线程中，需要则考虑自己开线程。</p>","more":"<p></p>\n<h4 id=\"异步处理机制\"><a href=\"#异步处理机制\" class=\"headerlink\" title=\"异步处理机制\"></a>异步处理机制</h4><ol>\n<li><p>组成：Message、Handler、MessageQueue、Looper</p>\n<ul>\n<li>Message 用于消息的存取，what、arg1、arg2、obj 等可以存取，</li>\n<li>Handler 则是处理消息，使用 sendMessage() 方法发送消息到 MessageQueue 中，最终传到 Hanlder 的 hanldeMessage() 方法中，以供处理。</li>\n<li>MessageQueue 是消息队列，用于存放 Hander 使用 sendMessage() 发送的 Message，等待 Looper 的提取，处理。每个线程只会有一个 MessageQueue 对象。</li>\n<li>Looper 循环监控 MessageQueue，调用 Looper 的 loop() 发送的消息之后，无限循环，发现 MessageQueue 中有消息时取出给 Hander 调用 handleMessage() 方法。每个线程只有一个 Looper 对象。<br><img src=\"/2018/06/09/Android-Service/handler.png\" alt=\"异步消息处理机制流程《第一行代码》第二版·郭霖\" title=\"异步消息处理机制流程《第一行代码》第二版·郭霖\"></li>\n</ul>\n</li>\n<li><p>AsyncTask 的使用<br>实现原理基于异步处理机制，抽象类，需要子类继承使用，继承时可以使用 3 个泛型参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Params: 执行 AsyncTask 时需要传入的参数，可用于后台任务</span><br><span class=\"line\">Progress: 后台执行任务时，用于显示进度</span><br><span class=\"line\">Result: 执行完毕之后，如需对结果进行返回，则用于返回</span><br><span class=\"line\"></span><br><span class=\"line\">定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">class NewTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写 AsyncTask 方法完成任务的定制，主要方法有以下几个：</p>\n<ol>\n<li>onPreExecute(): 会在后台任务执行之前使用， 可以进行 UI 操作，如一些界面上的初始化操作，如进度条对话框。</li>\n<li>doInBackground(Params…): 这个方法的所有代码都会在子线程中执行，处理耗时任务，任务完成时可以通过 return 返回结果，如果 Result 的类型是 Void 则没有返回。不可以进行 UI 操作，但可以调用诸如 publishProgress(Progress…) 方法完成。</li>\n<li>onProgressUpdate(Progress…): 当在后台调用 publishProgress(Progress…) 方法后，这个方法很快被调用，携带的参数就是后台任务中传递过来的。可以进行 UI 的操作。</li>\n<li>onPostExecute(Result): 当在后台执行完毕并通过 return 返回时，调用方法。返回的数据作为参数传递到该方法，可以进行 UI 操作，如提醒结果，关闭对话框等。</li>\n<li>使用 new NewTask().execute(); 来启动这个任务</li>\n</ol>\n<p><strong>注意:</strong> publishProgress() 方法要在 doInBackground() 中调用，才能把执行的进度传到 onProgressUpdate() 中， onProgressUpdate() 才会执行。</p>\n</li>\n</ol>\n<h4 id=\"服务的基本用法\"><a href=\"#服务的基本用法\" class=\"headerlink\" title=\"服务的基本用法\"></a>服务的基本用法</h4><ol>\n<li><p>定义服务<br>从 AS 中右键 New 中定义新的的服务。其中除了命名之外还需要选中 Exported 和 Enabled 两个属性，和广播的属性定义是一样的。AS 会在 AndroidManifest.xml 中自动生成相关代码。</p>\n<p>自定义 NewService 继承自称自 Service 类，要重写一个 onBind() 方法，在 Service 类中时抽象的，需要在子类中实现。</p>\n<p>重写其他和 Service 生命周期有关的方法，比如：onCreate()、onStartCommand()、onDestroy()，分别在服务创建时、每次启动服务时、服务销毁时进行调用。</p>\n</li>\n<li><p>启动与停止<br>借助 Intent 来实现启动和停止。</p>\n<ul>\n<li>在活动中调用 <code>startService(new Intent(this, NewService.class));</code>  进行启动</li>\n<li>同理，使用 <code>stopService(new Intent(this, NewService.class));</code> 来停止</li>\n<li>在 NewService 中，可以使用 stopSelf() 方法停止服务</li>\n</ul>\n<p><strong>注意：</strong> 对于广播和服务等一些比较特殊的类型来说，当子类时内部类时，需要使用 static 修饰。否则将报错： has no zero argument constructor 的错误。</p>\n</li>\n</ol>\n<h4 id=\"活动和服务的通信\"><a href=\"#活动和服务的通信\" class=\"headerlink\" title=\"活动和服务的通信\"></a>活动和服务的通信</h4><p> 使用自定义服务 onBind() 方法进行管理。</p>\n<ol>\n<li>创建自定义绑定类，继承于 Binder，在该类中可以定义了解服务内容需要的方法。</li>\n<li>在 onBind() 中返回这一个绑定类，实现了 IBinder 接口</li>\n<li>使用 ServiceConnection 实例来获取服务 onBind() 中返回的自定义 Binder（需要转型），在该类中可以定义了解服务内容需要的方法。实现了两个接口，分别在活动与服务成功绑定以及接触绑定的时候调用。</li>\n<li>使用 <code>bindService(Intent, ServiceConnection, BIND_AUTO_CREATE);</code> 绑定服务，使用 <code>unbindService(ServiceConnection);</code> 解绑服务。其中 BIND_AUTO_CREATE 表示在霍东阁和服务绑定后自动创建服务而不经过 onStartCommand() 方法。</li>\n<li>绑定之后，可以通过调用自定义的 Binder 类的方法来实现服务执行功能。</li>\n<li>可以和不同的活动进行绑定，返回的是同一个 Binder 实例。</li>\n<li><p>可以进行借助自定义的 Binder 和 Service 进行通信了。</p>\n<p><strong>注意</strong></p>\n<p>服务都会只有一个，当服务都使用了 startService() 和 bindService() 两个方法，需要同时调用 stopService() 和 unbindService() 才能销毁服务，两个条件要都满足。而且如果使用 bindService() 生成、不使用 startService()，则必定是以 unbindService() 销毁；同理，使用 startService() 创建而不适用 bindService()，则必以 stopService() 销毁。两者都使用，则两者都不使用时才销毁，否则服务将一直运行。</p>\n<p>当使用服务做一些耗时的工作时，主要执行在 onStartCommand() 方法中，所以需要开启子线程进行处理。如果不适用子线程，则代码运行在主线程中，很容易出现 ANR(Application Not Responding) 的情况。</p>\n<p>可以使用继承自 IntentService 的类来避免复杂操作，该类可简单创建异步、会自动停止的服务。重写 onHandleIntent() 中执行代码则不需要担心 ANR 问题，因为该方法在子线程中运行。</p>\n</li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ol>\n<li>startService -&gt; (onCreate) -&gt; onStartCommand -&gt; stopService/stopSelf -&gt; onDestroy</li>\n<li>bindService -&gt; (onCreate) -&gt; onBind -&gt; unbindService -&gt; onDestroy</li>\n<li>每调用一次 startService 就会执行一次 onStartCommand</li>\n</ol>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p> 前台服务与普通服务，有一个图标显示在状态栏，下拉可看到更详细信息，类似于同值效果，防止 GC。使用 PendingIntent，Notification 等。使用 IntentService 等。</p>\n<p> <strong>致谢：</strong></p>\n<ol>\n<li>《第一行代码（第二版）》·郭霖</li>\n</ol>\n <center> — end — </center>\n\n<hr>"},{"title":"Android N 以上使用其他应用打开文件 FileProvider","date":"2018-11-24T06:59:31.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-N-以上使用其他应用打开文件-FileProvider/index.jpg)\n\n  又是好长一段时间没有写东西了，说忙到没有时间写东西，这个说法在任何时候都是借口。总的来说还是没有写，真的要写的话还是有时间来写的，不说成为一个高产的人吧，但是稍微写一些的时间还是有的，再不济也可以分开到很多天再来写的吧。所以说这到头来还是个人的问题，没有主动有意识的去写这些东西，没有有意识的去学习去分享。这也在一定程度上说自己这段时间主动学习的时间少了。无论如何，还是要好好学习的，虽然已经不再学校，但从另一个角度来说自己应该更能明白知识的重要性。所以以后要多加注意主动学习。<!-- more -->\n\n### 前言\n  Android 在很多时候需要使用本地的文件，除了需要使用到读写外部存储文件权限之外，有时候还需要使用到内容提供器：ContentProvider。说到这里我真的感叹 Android 开发的混乱，需要使用到各种适配。比如 Android 随着版本的变化带来的 API 的变化，不同生产商自定义的 Android 的功能，不同手机不同屏幕尺寸的适配。总之这就带来了很多问题，原本在这个手机上运行好好的程序到另一个手机上却是 cash 了，十分的蛋疼。这次要说的是对于文件的处理差异，主要涉及的是文件 Uri 的处理。此处以 Android N 为分界，SDK_INT < N 归为一种情况，另外是一种情况。\n\n### API < 24\n ``Uri uri = Uri.fromFile(file)``\n\n 在 Android N 也就是 Android 7.0 之前使用上面这个方法是完全没有问题的，比如\n``` java\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    File file = new File(path);     // path 是外部存储中的一个图片的路径\n    Uri uri = Uri.fromFile(file);\n    intent.setDataAndType(uri, \"image/*\");\n    startActivity(Intent.createChooser(intent, null));\n\n```\n这个方法可以调用系统中支持打开图片的应用让用户选择并打开对应的图片，而没有任何问题。当时事情到了 7.0 之后就不一样了，这个方法会抛出一个 FileUriExposedException 的异常。\n\n### API >= 24\n  ``Uri uri = FileProvider.getUriForFile(context, athorty_key, file)``\n\n  从 7.0 之后提高了文件的安全性，就需要用上述的方法来获取文件的 Uri。总共分为这几步。\n  1. 在 AndroidManifest.xml 中定义 FileProvider 如下\n    ``` xml\n    <provider\n        android:name=\"android.support.v4.content.FileProvider\"\n        android:authorities=\"${applicationId}.fileprovider\"\n        android:exported=\"false\"\n        android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/provider_paths\" />\n    </provider>\n    ```\n    其中 name, exported, grantUriPermissions 的值不能改变，authorities 则是在使用 getUriForFile() 方法的第二个参数，用于标识与验证。\n  2. 添加 @xml/provider_paths 资源如下\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <paths>\n        <external-path name=\"external_files\" path=\".\"/>\n    </paths>\n    ```\n    其中 name 的值会在构成的 uri 中出现，用于隐藏实际的路径，增加安全性；path 则表示文件的读取路径，此处是表示外部存储中的所有文件路径，当然你可以指定为某一个文件夹，比如\"image/\",则只有这个文件夹下的文件能正常访问，其他的文件夹不行；至于 ``external-path`` 标签则是表示这个提供的是外部存储的读取，如果你需要读取缓存路径或者其他的路径的文件的 uri 则必须要添加对应的标签值。有哪些标签可以去官方看。\n\n  3. 使用  Uri uri = FileProvider.getUriForFile(context, athorty_key, file); 把文件转换成 Uri。如\n    ``` java\n    File imagePath = new File(Context.getFilesDir(), \"images\");\n    File newFile = new File(imagePath, \"default_image.jpg\");\n    Uri contentUri = getUriForFile(getContext(), \"com.mydomain.fileprovider\", newFile);   // 官方示例\n    ```\n  4. 如果分享到其他应用，还需要进行授权。需要给目标应用添加读取 uri 的权限。\n    + 使用  Context.grantUriPermission(package, Uri, mode_flags) 给特定的应用包添加读写权限，mode_flags 包括 FLAG_GRANT_READ_URI_PERMISSION 和 FLAG_GRANT_WRITE_URI_PERMISSION，可以都添加，分别是读和写 Uri 的权限。授权期限到重启设备或者使用 revokeUriPermission() 取消权限为止。\n    + 除上面的方法之外，也可以使用在自己的要使用的 Intent 中加入这个权限，比如有一个 Intent 为 intent，调用 intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); 则使用该 intent 的应该可以读取 uri，但下次还需要添加才行。\n\n所以上面的那个分享的方式可以写成如下的形式来调用：\n``` java\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    File file = new File(path);     // path 是外部存储中的一个图片的路径\n    Uri uri;\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n        uri = Uri.fromFile(file);\n    } else {\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        uri = FileProvider.getUriForFile(content, authorities, file);\n    }\n    intent.setDataAndType(uri, \"image/*\");\n    startActivity(Intent.createChooser(intent, null));\n\n```\n\n### 后记\n时隔很久之后才重新写的分享，发现写起来真的废力啊，耗时比预计时间长，自己的打字速度不行啊。总之，以后也要加油啊。本次分享到这里，下一次，写的应该是关于不同 Android 版本的热点和 Wifi 的管理，这里面套路比这个更深啊，汗颜。。。\n\n**链接**\n\n1. [官方对于 FileProvider 的文档](https://developer.android.com/reference/android/support/v4/content/FileProvider)(需要翻墙)\n\n\n <center> --- end --- </center>\n\n ---\n","source":"_posts/Android-N-以上使用其他应用打开文件-FileProvider.md","raw":"---\ntitle: Android N 以上使用其他应用打开文件 FileProvider\ndate: 2018-11-24 14:59:31\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-N-以上使用其他应用打开文件-FileProvider/index.jpg)\n\n  又是好长一段时间没有写东西了，说忙到没有时间写东西，这个说法在任何时候都是借口。总的来说还是没有写，真的要写的话还是有时间来写的，不说成为一个高产的人吧，但是稍微写一些的时间还是有的，再不济也可以分开到很多天再来写的吧。所以说这到头来还是个人的问题，没有主动有意识的去写这些东西，没有有意识的去学习去分享。这也在一定程度上说自己这段时间主动学习的时间少了。无论如何，还是要好好学习的，虽然已经不再学校，但从另一个角度来说自己应该更能明白知识的重要性。所以以后要多加注意主动学习。<!-- more -->\n\n### 前言\n  Android 在很多时候需要使用本地的文件，除了需要使用到读写外部存储文件权限之外，有时候还需要使用到内容提供器：ContentProvider。说到这里我真的感叹 Android 开发的混乱，需要使用到各种适配。比如 Android 随着版本的变化带来的 API 的变化，不同生产商自定义的 Android 的功能，不同手机不同屏幕尺寸的适配。总之这就带来了很多问题，原本在这个手机上运行好好的程序到另一个手机上却是 cash 了，十分的蛋疼。这次要说的是对于文件的处理差异，主要涉及的是文件 Uri 的处理。此处以 Android N 为分界，SDK_INT < N 归为一种情况，另外是一种情况。\n\n### API < 24\n ``Uri uri = Uri.fromFile(file)``\n\n 在 Android N 也就是 Android 7.0 之前使用上面这个方法是完全没有问题的，比如\n``` java\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    File file = new File(path);     // path 是外部存储中的一个图片的路径\n    Uri uri = Uri.fromFile(file);\n    intent.setDataAndType(uri, \"image/*\");\n    startActivity(Intent.createChooser(intent, null));\n\n```\n这个方法可以调用系统中支持打开图片的应用让用户选择并打开对应的图片，而没有任何问题。当时事情到了 7.0 之后就不一样了，这个方法会抛出一个 FileUriExposedException 的异常。\n\n### API >= 24\n  ``Uri uri = FileProvider.getUriForFile(context, athorty_key, file)``\n\n  从 7.0 之后提高了文件的安全性，就需要用上述的方法来获取文件的 Uri。总共分为这几步。\n  1. 在 AndroidManifest.xml 中定义 FileProvider 如下\n    ``` xml\n    <provider\n        android:name=\"android.support.v4.content.FileProvider\"\n        android:authorities=\"${applicationId}.fileprovider\"\n        android:exported=\"false\"\n        android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/provider_paths\" />\n    </provider>\n    ```\n    其中 name, exported, grantUriPermissions 的值不能改变，authorities 则是在使用 getUriForFile() 方法的第二个参数，用于标识与验证。\n  2. 添加 @xml/provider_paths 资源如下\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <paths>\n        <external-path name=\"external_files\" path=\".\"/>\n    </paths>\n    ```\n    其中 name 的值会在构成的 uri 中出现，用于隐藏实际的路径，增加安全性；path 则表示文件的读取路径，此处是表示外部存储中的所有文件路径，当然你可以指定为某一个文件夹，比如\"image/\",则只有这个文件夹下的文件能正常访问，其他的文件夹不行；至于 ``external-path`` 标签则是表示这个提供的是外部存储的读取，如果你需要读取缓存路径或者其他的路径的文件的 uri 则必须要添加对应的标签值。有哪些标签可以去官方看。\n\n  3. 使用  Uri uri = FileProvider.getUriForFile(context, athorty_key, file); 把文件转换成 Uri。如\n    ``` java\n    File imagePath = new File(Context.getFilesDir(), \"images\");\n    File newFile = new File(imagePath, \"default_image.jpg\");\n    Uri contentUri = getUriForFile(getContext(), \"com.mydomain.fileprovider\", newFile);   // 官方示例\n    ```\n  4. 如果分享到其他应用，还需要进行授权。需要给目标应用添加读取 uri 的权限。\n    + 使用  Context.grantUriPermission(package, Uri, mode_flags) 给特定的应用包添加读写权限，mode_flags 包括 FLAG_GRANT_READ_URI_PERMISSION 和 FLAG_GRANT_WRITE_URI_PERMISSION，可以都添加，分别是读和写 Uri 的权限。授权期限到重启设备或者使用 revokeUriPermission() 取消权限为止。\n    + 除上面的方法之外，也可以使用在自己的要使用的 Intent 中加入这个权限，比如有一个 Intent 为 intent，调用 intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); 则使用该 intent 的应该可以读取 uri，但下次还需要添加才行。\n\n所以上面的那个分享的方式可以写成如下的形式来调用：\n``` java\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    File file = new File(path);     // path 是外部存储中的一个图片的路径\n    Uri uri;\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n        uri = Uri.fromFile(file);\n    } else {\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        uri = FileProvider.getUriForFile(content, authorities, file);\n    }\n    intent.setDataAndType(uri, \"image/*\");\n    startActivity(Intent.createChooser(intent, null));\n\n```\n\n### 后记\n时隔很久之后才重新写的分享，发现写起来真的废力啊，耗时比预计时间长，自己的打字速度不行啊。总之，以后也要加油啊。本次分享到这里，下一次，写的应该是关于不同 Android 版本的热点和 Wifi 的管理，这里面套路比这个更深啊，汗颜。。。\n\n**链接**\n\n1. [官方对于 FileProvider 的文档](https://developer.android.com/reference/android/support/v4/content/FileProvider)(需要翻墙)\n\n\n <center> --- end --- </center>\n\n ---\n","slug":"Android-N-以上使用其他应用打开文件-FileProvider","published":1,"updated":"2019-05-10T16:14:30.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxws000e5cv9a1qi3hg2","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/11/24/Android-N-以上使用其他应用打开文件-FileProvider/index.jpg\" alt=\"\"></p>\n<p>  又是好长一段时间没有写东西了，说忙到没有时间写东西，这个说法在任何时候都是借口。总的来说还是没有写，真的要写的话还是有时间来写的，不说成为一个高产的人吧，但是稍微写一些的时间还是有的，再不济也可以分开到很多天再来写的吧。所以说这到头来还是个人的问题，没有主动有意识的去写这些东西，没有有意识的去学习去分享。这也在一定程度上说自己这段时间主动学习的时间少了。无论如何，还是要好好学习的，虽然已经不再学校，但从另一个角度来说自己应该更能明白知识的重要性。所以以后要多加注意主动学习。<a id=\"more\"></a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  Android 在很多时候需要使用本地的文件，除了需要使用到读写外部存储文件权限之外，有时候还需要使用到内容提供器：ContentProvider。说到这里我真的感叹 Android 开发的混乱，需要使用到各种适配。比如 Android 随着版本的变化带来的 API 的变化，不同生产商自定义的 Android 的功能，不同手机不同屏幕尺寸的适配。总之这就带来了很多问题，原本在这个手机上运行好好的程序到另一个手机上却是 cash 了，十分的蛋疼。这次要说的是对于文件的处理差异，主要涉及的是文件 Uri 的处理。此处以 Android N 为分界，SDK_INT &lt; N 归为一种情况，另外是一种情况。</p>\n<h3 id=\"API-lt-24\"><a href=\"#API-lt-24\" class=\"headerlink\" title=\"API &lt; 24\"></a>API &lt; 24</h3><p> <code>Uri uri = Uri.fromFile(file)</code></p>\n<p> 在 Android N 也就是 Android 7.0 之前使用上面这个方法是完全没有问题的，比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">File file = <span class=\"keyword\">new</span> File(path);     <span class=\"comment\">// path 是外部存储中的一个图片的路径</span></span><br><span class=\"line\">Uri uri = Uri.fromFile(file);</span><br><span class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">startActivity(Intent.createChooser(intent, <span class=\"keyword\">null</span>));</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以调用系统中支持打开图片的应用让用户选择并打开对应的图片，而没有任何问题。当时事情到了 7.0 之后就不一样了，这个方法会抛出一个 FileUriExposedException 的异常。</p>\n<h3 id=\"API-gt-24\"><a href=\"#API-gt-24\" class=\"headerlink\" title=\"API &gt;= 24\"></a>API &gt;= 24</h3><p>  <code>Uri uri = FileProvider.getUriForFile(context, athorty_key, file)</code></p>\n<p>  从 7.0 之后提高了文件的安全性，就需要用上述的方法来获取文件的 Uri。总共分为这几步。</p>\n<ol>\n<li><p>在 AndroidManifest.xml 中定义 FileProvider 如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"$&#123;applicationId&#125;.fileprovider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/provider_paths\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 name, exported, grantUriPermissions 的值不能改变，authorities 则是在使用 getUriForFile() 方法的第二个参数，用于标识与验证。</p>\n</li>\n<li><p>添加 @xml/provider_paths 资源如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 name 的值会在构成的 uri 中出现，用于隐藏实际的路径，增加安全性；path 则表示文件的读取路径，此处是表示外部存储中的所有文件路径，当然你可以指定为某一个文件夹，比如”image/“,则只有这个文件夹下的文件能正常访问，其他的文件夹不行；至于 <code>external-path</code> 标签则是表示这个提供的是外部存储的读取，如果你需要读取缓存路径或者其他的路径的文件的 uri 则必须要添加对应的标签值。有哪些标签可以去官方看。</p>\n</li>\n<li><p>使用  Uri uri = FileProvider.getUriForFile(context, athorty_key, file); 把文件转换成 Uri。如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File imagePath = <span class=\"keyword\">new</span> File(Context.getFilesDir(), <span class=\"string\">\"images\"</span>);</span><br><span class=\"line\">File newFile = <span class=\"keyword\">new</span> File(imagePath, <span class=\"string\">\"default_image.jpg\"</span>);</span><br><span class=\"line\">Uri contentUri = getUriForFile(getContext(), <span class=\"string\">\"com.mydomain.fileprovider\"</span>, newFile);   <span class=\"comment\">// 官方示例</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果分享到其他应用，还需要进行授权。需要给目标应用添加读取 uri 的权限。</p>\n<ul>\n<li>使用  Context.grantUriPermission(package, Uri, mode_flags) 给特定的应用包添加读写权限，mode_flags 包括 FLAG_GRANT_READ_URI_PERMISSION 和 FLAG_GRANT_WRITE_URI_PERMISSION，可以都添加，分别是读和写 Uri 的权限。授权期限到重启设备或者使用 revokeUriPermission() 取消权限为止。</li>\n<li>除上面的方法之外，也可以使用在自己的要使用的 Intent 中加入这个权限，比如有一个 Intent 为 intent，调用 intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); 则使用该 intent 的应该可以读取 uri，但下次还需要添加才行。</li>\n</ul>\n</li>\n</ol>\n<p>所以上面的那个分享的方式可以写成如下的形式来调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">File file = <span class=\"keyword\">new</span> File(path);     <span class=\"comment\">// path 是外部存储中的一个图片的路径</span></span><br><span class=\"line\">Uri uri;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class=\"line\">    uri = Uri.fromFile(file);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">    uri = FileProvider.getUriForFile(content, authorities, file);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">startActivity(Intent.createChooser(intent, <span class=\"keyword\">null</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>时隔很久之后才重新写的分享，发现写起来真的废力啊，耗时比预计时间长，自己的打字速度不行啊。总之，以后也要加油啊。本次分享到这里，下一次，写的应该是关于不同 Android 版本的热点和 Wifi 的管理，这里面套路比这个更深啊，汗颜。。。</p>\n<p><strong>链接</strong></p>\n<ol>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider\" target=\"_blank\" rel=\"noopener\">官方对于 FileProvider 的文档</a>(需要翻墙)</li>\n</ol>\n <center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/11/24/Android-N-以上使用其他应用打开文件-FileProvider/index.jpg\" alt=\"\"></p>\n<p>  又是好长一段时间没有写东西了，说忙到没有时间写东西，这个说法在任何时候都是借口。总的来说还是没有写，真的要写的话还是有时间来写的，不说成为一个高产的人吧，但是稍微写一些的时间还是有的，再不济也可以分开到很多天再来写的吧。所以说这到头来还是个人的问题，没有主动有意识的去写这些东西，没有有意识的去学习去分享。这也在一定程度上说自己这段时间主动学习的时间少了。无论如何，还是要好好学习的，虽然已经不再学校，但从另一个角度来说自己应该更能明白知识的重要性。所以以后要多加注意主动学习。</p>","more":"<p></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  Android 在很多时候需要使用本地的文件，除了需要使用到读写外部存储文件权限之外，有时候还需要使用到内容提供器：ContentProvider。说到这里我真的感叹 Android 开发的混乱，需要使用到各种适配。比如 Android 随着版本的变化带来的 API 的变化，不同生产商自定义的 Android 的功能，不同手机不同屏幕尺寸的适配。总之这就带来了很多问题，原本在这个手机上运行好好的程序到另一个手机上却是 cash 了，十分的蛋疼。这次要说的是对于文件的处理差异，主要涉及的是文件 Uri 的处理。此处以 Android N 为分界，SDK_INT &lt; N 归为一种情况，另外是一种情况。</p>\n<h3 id=\"API-lt-24\"><a href=\"#API-lt-24\" class=\"headerlink\" title=\"API &lt; 24\"></a>API &lt; 24</h3><p> <code>Uri uri = Uri.fromFile(file)</code></p>\n<p> 在 Android N 也就是 Android 7.0 之前使用上面这个方法是完全没有问题的，比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">File file = <span class=\"keyword\">new</span> File(path);     <span class=\"comment\">// path 是外部存储中的一个图片的路径</span></span><br><span class=\"line\">Uri uri = Uri.fromFile(file);</span><br><span class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">startActivity(Intent.createChooser(intent, <span class=\"keyword\">null</span>));</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以调用系统中支持打开图片的应用让用户选择并打开对应的图片，而没有任何问题。当时事情到了 7.0 之后就不一样了，这个方法会抛出一个 FileUriExposedException 的异常。</p>\n<h3 id=\"API-gt-24\"><a href=\"#API-gt-24\" class=\"headerlink\" title=\"API &gt;= 24\"></a>API &gt;= 24</h3><p>  <code>Uri uri = FileProvider.getUriForFile(context, athorty_key, file)</code></p>\n<p>  从 7.0 之后提高了文件的安全性，就需要用上述的方法来获取文件的 Uri。总共分为这几步。</p>\n<ol>\n<li><p>在 AndroidManifest.xml 中定义 FileProvider 如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"$&#123;applicationId&#125;.fileprovider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/provider_paths\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 name, exported, grantUriPermissions 的值不能改变，authorities 则是在使用 getUriForFile() 方法的第二个参数，用于标识与验证。</p>\n</li>\n<li><p>添加 @xml/provider_paths 资源如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 name 的值会在构成的 uri 中出现，用于隐藏实际的路径，增加安全性；path 则表示文件的读取路径，此处是表示外部存储中的所有文件路径，当然你可以指定为某一个文件夹，比如”image/“,则只有这个文件夹下的文件能正常访问，其他的文件夹不行；至于 <code>external-path</code> 标签则是表示这个提供的是外部存储的读取，如果你需要读取缓存路径或者其他的路径的文件的 uri 则必须要添加对应的标签值。有哪些标签可以去官方看。</p>\n</li>\n<li><p>使用  Uri uri = FileProvider.getUriForFile(context, athorty_key, file); 把文件转换成 Uri。如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File imagePath = <span class=\"keyword\">new</span> File(Context.getFilesDir(), <span class=\"string\">\"images\"</span>);</span><br><span class=\"line\">File newFile = <span class=\"keyword\">new</span> File(imagePath, <span class=\"string\">\"default_image.jpg\"</span>);</span><br><span class=\"line\">Uri contentUri = getUriForFile(getContext(), <span class=\"string\">\"com.mydomain.fileprovider\"</span>, newFile);   <span class=\"comment\">// 官方示例</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果分享到其他应用，还需要进行授权。需要给目标应用添加读取 uri 的权限。</p>\n<ul>\n<li>使用  Context.grantUriPermission(package, Uri, mode_flags) 给特定的应用包添加读写权限，mode_flags 包括 FLAG_GRANT_READ_URI_PERMISSION 和 FLAG_GRANT_WRITE_URI_PERMISSION，可以都添加，分别是读和写 Uri 的权限。授权期限到重启设备或者使用 revokeUriPermission() 取消权限为止。</li>\n<li>除上面的方法之外，也可以使用在自己的要使用的 Intent 中加入这个权限，比如有一个 Intent 为 intent，调用 intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); 则使用该 intent 的应该可以读取 uri，但下次还需要添加才行。</li>\n</ul>\n</li>\n</ol>\n<p>所以上面的那个分享的方式可以写成如下的形式来调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">File file = <span class=\"keyword\">new</span> File(path);     <span class=\"comment\">// path 是外部存储中的一个图片的路径</span></span><br><span class=\"line\">Uri uri;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class=\"line\">    uri = Uri.fromFile(file);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">    uri = FileProvider.getUriForFile(content, authorities, file);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">startActivity(Intent.createChooser(intent, <span class=\"keyword\">null</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>时隔很久之后才重新写的分享，发现写起来真的废力啊，耗时比预计时间长，自己的打字速度不行啊。总之，以后也要加油啊。本次分享到这里，下一次，写的应该是关于不同 Android 版本的热点和 Wifi 的管理，这里面套路比这个更深啊，汗颜。。。</p>\n<p><strong>链接</strong></p>\n<ol>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider\" target=\"_blank\" rel=\"noopener\">官方对于 FileProvider 的文档</a>(需要翻墙)</li>\n</ol>\n <center> — end — </center>\n\n<hr>"},{"title":"Android 初次面试","date":"2018-06-26T14:28:00.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-初次面试/index.jpg)\n\n### 写在前面\n\n这是我的第一次技术类面试，很幸运的通过了。谨以这篇博客记录一下这个有着特殊意义的面试。流程为笔试，技术面、hr面、管理层面试。<!-- more -->\n\n### 笔试\n\n给了 4 页的试题，5 分，10 分不等。以下是一个试题的回忆版本：\n ```\n 1. 线程与进程的区别\n 2. 给 100 个 String 字符串对象，如何高效将其首尾连接起来？\n 3. A 为基类，B，C 为 A 的子类。给了几个引用，new 了几个对象。判断 6 个赋值语句中哪 3 个是正确的。考虑类型转换。\n 4. View 的 onTouchEvent 和 onInterceptTouchEvent 的区别？\n 5. 。。。\n 6. 类中有静态属性，有静态方法中调用了 ``this.静态属性名``，这种写法有问题吗？\n 7. 如何在后台线程中更新进度？如何在线程中更新控件内容？\n 8. 写一个 Singleton.\n 9. 一个有序的 ArrayList，利用折半的方法快速查找值的索引。\n 10. 两个有序整数数组 A，B，如何将 B 整合到 A 中，保持 A 是升序的。Java 实现。\n 11. 反转一个单向链表。\n 12. 计算一个目录下文件的数目，考虑存在子文件夹的情况。\n ```\n\n第五题不知道怎么就忘记了。。。第三题和第五题答得不好，其他都还可以。\n\n### 技术面试\n\n 来了一个技术面试管，问了十几个问题，对不会给了不少提示，很有耐心，挺好的一次面试体验。就没记得太清楚了，挑一些还记得的吧。\n  ```\n  + 开机启动广播，执行一个超过 10 秒的任务，如何实现？10s 无返回值则会被删掉。\n  + 用过数据库吗？怎么用的？\n  + try 中 return，catch，finally 中还执行吗？finally 都执行。\n  + A <- B <- C 的继承关系，其中无参构造器中调用方法，会输出什么？子类构造函数会调用父类的无参构造函数。\n  + 讲一下 Hanlder。\n  + 一个 App 有多个 moudle，如何通过一个 moudle A 唤起 moulde B？\n  + 闪屏页面内容如何更新？\n  + 。。。 还有很多？暂时记不起来了，总共有 13 条以上。。。\n  ```\n\n### HR 面和管理层面试\n HR 是个漂亮的小姐姐，问了不少生活上的问题，以及个人的兴趣之类的，坚持某件事情吗，大学生活等，很友善，聊的也挺开心，很轻松的环境。管理层面试时候就没问多少问题了，主要还是比较忙吧，面试进行到这个时候已经过了接近三个小时了，所以简单介绍了一下公司就结束了。总的来说，这是一个挺轻松的面试过程。不过从面试中也察觉了自己存在的诸多问题，以后要着手解决，收获也不少。\n\n### 总结\n 总的来说，在面试的前几天是有点消极懈怠的，看了一些泰剧。。。威敏啥的刷完了就单刷了几部。。。所以说准备其实是不太充分的，其实应该可以做到更好。而且并不是等到准备完成了再去面试，不断的面试对自己其实有很大的帮助。有点小后悔准备的很晚，而且还不充分，这是病，得改！！！\n\n <center> --- end --- </center>\n\n ---\n","source":"_posts/Android-初次面试.md","raw":"---\ntitle: Android 初次面试\ndate: 2018-06-26 22:28:00\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-初次面试/index.jpg)\n\n### 写在前面\n\n这是我的第一次技术类面试，很幸运的通过了。谨以这篇博客记录一下这个有着特殊意义的面试。流程为笔试，技术面、hr面、管理层面试。<!-- more -->\n\n### 笔试\n\n给了 4 页的试题，5 分，10 分不等。以下是一个试题的回忆版本：\n ```\n 1. 线程与进程的区别\n 2. 给 100 个 String 字符串对象，如何高效将其首尾连接起来？\n 3. A 为基类，B，C 为 A 的子类。给了几个引用，new 了几个对象。判断 6 个赋值语句中哪 3 个是正确的。考虑类型转换。\n 4. View 的 onTouchEvent 和 onInterceptTouchEvent 的区别？\n 5. 。。。\n 6. 类中有静态属性，有静态方法中调用了 ``this.静态属性名``，这种写法有问题吗？\n 7. 如何在后台线程中更新进度？如何在线程中更新控件内容？\n 8. 写一个 Singleton.\n 9. 一个有序的 ArrayList，利用折半的方法快速查找值的索引。\n 10. 两个有序整数数组 A，B，如何将 B 整合到 A 中，保持 A 是升序的。Java 实现。\n 11. 反转一个单向链表。\n 12. 计算一个目录下文件的数目，考虑存在子文件夹的情况。\n ```\n\n第五题不知道怎么就忘记了。。。第三题和第五题答得不好，其他都还可以。\n\n### 技术面试\n\n 来了一个技术面试管，问了十几个问题，对不会给了不少提示，很有耐心，挺好的一次面试体验。就没记得太清楚了，挑一些还记得的吧。\n  ```\n  + 开机启动广播，执行一个超过 10 秒的任务，如何实现？10s 无返回值则会被删掉。\n  + 用过数据库吗？怎么用的？\n  + try 中 return，catch，finally 中还执行吗？finally 都执行。\n  + A <- B <- C 的继承关系，其中无参构造器中调用方法，会输出什么？子类构造函数会调用父类的无参构造函数。\n  + 讲一下 Hanlder。\n  + 一个 App 有多个 moudle，如何通过一个 moudle A 唤起 moulde B？\n  + 闪屏页面内容如何更新？\n  + 。。。 还有很多？暂时记不起来了，总共有 13 条以上。。。\n  ```\n\n### HR 面和管理层面试\n HR 是个漂亮的小姐姐，问了不少生活上的问题，以及个人的兴趣之类的，坚持某件事情吗，大学生活等，很友善，聊的也挺开心，很轻松的环境。管理层面试时候就没问多少问题了，主要还是比较忙吧，面试进行到这个时候已经过了接近三个小时了，所以简单介绍了一下公司就结束了。总的来说，这是一个挺轻松的面试过程。不过从面试中也察觉了自己存在的诸多问题，以后要着手解决，收获也不少。\n\n### 总结\n 总的来说，在面试的前几天是有点消极懈怠的，看了一些泰剧。。。威敏啥的刷完了就单刷了几部。。。所以说准备其实是不太充分的，其实应该可以做到更好。而且并不是等到准备完成了再去面试，不断的面试对自己其实有很大的帮助。有点小后悔准备的很晚，而且还不充分，这是病，得改！！！\n\n <center> --- end --- </center>\n\n ---\n","slug":"Android-初次面试","published":1,"updated":"2019-05-10T16:14:30.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxwv000g5cv9zb4xnm2b","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/26/Android-初次面试/index.jpg\" alt=\"\"></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>这是我的第一次技术类面试，很幸运的通过了。谨以这篇博客记录一下这个有着特殊意义的面试。流程为笔试，技术面、hr面、管理层面试。<a id=\"more\"></a></p>\n<h3 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h3><p>给了 4 页的试题，5 分，10 分不等。以下是一个试题的回忆版本：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 线程与进程的区别</span><br><span class=\"line\">2. 给 100 个 String 字符串对象，如何高效将其首尾连接起来？</span><br><span class=\"line\">3. A 为基类，B，C 为 A 的子类。给了几个引用，new 了几个对象。判断 6 个赋值语句中哪 3 个是正确的。考虑类型转换。</span><br><span class=\"line\">4. View 的 onTouchEvent 和 onInterceptTouchEvent 的区别？</span><br><span class=\"line\">5. 。。。</span><br><span class=\"line\">6. 类中有静态属性，有静态方法中调用了 ``this.静态属性名``，这种写法有问题吗？</span><br><span class=\"line\">7. 如何在后台线程中更新进度？如何在线程中更新控件内容？</span><br><span class=\"line\">8. 写一个 Singleton.</span><br><span class=\"line\">9. 一个有序的 ArrayList，利用折半的方法快速查找值的索引。</span><br><span class=\"line\">10. 两个有序整数数组 A，B，如何将 B 整合到 A 中，保持 A 是升序的。Java 实现。</span><br><span class=\"line\">11. 反转一个单向链表。</span><br><span class=\"line\">12. 计算一个目录下文件的数目，考虑存在子文件夹的情况。</span><br></pre></td></tr></table></figure></p>\n<p>第五题不知道怎么就忘记了。。。第三题和第五题答得不好，其他都还可以。</p>\n<h3 id=\"技术面试\"><a href=\"#技术面试\" class=\"headerlink\" title=\"技术面试\"></a>技术面试</h3><p> 来了一个技术面试管，问了十几个问题，对不会给了不少提示，很有耐心，挺好的一次面试体验。就没记得太清楚了，挑一些还记得的吧。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 开机启动广播，执行一个超过 10 秒的任务，如何实现？10s 无返回值则会被删掉。</span><br><span class=\"line\">+ 用过数据库吗？怎么用的？</span><br><span class=\"line\">+ try 中 return，catch，finally 中还执行吗？finally 都执行。</span><br><span class=\"line\">+ A &lt;- B &lt;- C 的继承关系，其中无参构造器中调用方法，会输出什么？子类构造函数会调用父类的无参构造函数。</span><br><span class=\"line\">+ 讲一下 Hanlder。</span><br><span class=\"line\">+ 一个 App 有多个 moudle，如何通过一个 moudle A 唤起 moulde B？</span><br><span class=\"line\">+ 闪屏页面内容如何更新？</span><br><span class=\"line\">+ 。。。 还有很多？暂时记不起来了，总共有 13 条以上。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HR-面和管理层面试\"><a href=\"#HR-面和管理层面试\" class=\"headerlink\" title=\"HR 面和管理层面试\"></a>HR 面和管理层面试</h3><p> HR 是个漂亮的小姐姐，问了不少生活上的问题，以及个人的兴趣之类的，坚持某件事情吗，大学生活等，很友善，聊的也挺开心，很轻松的环境。管理层面试时候就没问多少问题了，主要还是比较忙吧，面试进行到这个时候已经过了接近三个小时了，所以简单介绍了一下公司就结束了。总的来说，这是一个挺轻松的面试过程。不过从面试中也察觉了自己存在的诸多问题，以后要着手解决，收获也不少。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 总的来说，在面试的前几天是有点消极懈怠的，看了一些泰剧。。。威敏啥的刷完了就单刷了几部。。。所以说准备其实是不太充分的，其实应该可以做到更好。而且并不是等到准备完成了再去面试，不断的面试对自己其实有很大的帮助。有点小后悔准备的很晚，而且还不充分，这是病，得改！！！</p>\n <center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/06/26/Android-初次面试/index.jpg\" alt=\"\"></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>这是我的第一次技术类面试，很幸运的通过了。谨以这篇博客记录一下这个有着特殊意义的面试。流程为笔试，技术面、hr面、管理层面试。</p>","more":"<p></p>\n<h3 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h3><p>给了 4 页的试题，5 分，10 分不等。以下是一个试题的回忆版本：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 线程与进程的区别</span><br><span class=\"line\">2. 给 100 个 String 字符串对象，如何高效将其首尾连接起来？</span><br><span class=\"line\">3. A 为基类，B，C 为 A 的子类。给了几个引用，new 了几个对象。判断 6 个赋值语句中哪 3 个是正确的。考虑类型转换。</span><br><span class=\"line\">4. View 的 onTouchEvent 和 onInterceptTouchEvent 的区别？</span><br><span class=\"line\">5. 。。。</span><br><span class=\"line\">6. 类中有静态属性，有静态方法中调用了 ``this.静态属性名``，这种写法有问题吗？</span><br><span class=\"line\">7. 如何在后台线程中更新进度？如何在线程中更新控件内容？</span><br><span class=\"line\">8. 写一个 Singleton.</span><br><span class=\"line\">9. 一个有序的 ArrayList，利用折半的方法快速查找值的索引。</span><br><span class=\"line\">10. 两个有序整数数组 A，B，如何将 B 整合到 A 中，保持 A 是升序的。Java 实现。</span><br><span class=\"line\">11. 反转一个单向链表。</span><br><span class=\"line\">12. 计算一个目录下文件的数目，考虑存在子文件夹的情况。</span><br></pre></td></tr></table></figure></p>\n<p>第五题不知道怎么就忘记了。。。第三题和第五题答得不好，其他都还可以。</p>\n<h3 id=\"技术面试\"><a href=\"#技术面试\" class=\"headerlink\" title=\"技术面试\"></a>技术面试</h3><p> 来了一个技术面试管，问了十几个问题，对不会给了不少提示，很有耐心，挺好的一次面试体验。就没记得太清楚了，挑一些还记得的吧。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 开机启动广播，执行一个超过 10 秒的任务，如何实现？10s 无返回值则会被删掉。</span><br><span class=\"line\">+ 用过数据库吗？怎么用的？</span><br><span class=\"line\">+ try 中 return，catch，finally 中还执行吗？finally 都执行。</span><br><span class=\"line\">+ A &lt;- B &lt;- C 的继承关系，其中无参构造器中调用方法，会输出什么？子类构造函数会调用父类的无参构造函数。</span><br><span class=\"line\">+ 讲一下 Hanlder。</span><br><span class=\"line\">+ 一个 App 有多个 moudle，如何通过一个 moudle A 唤起 moulde B？</span><br><span class=\"line\">+ 闪屏页面内容如何更新？</span><br><span class=\"line\">+ 。。。 还有很多？暂时记不起来了，总共有 13 条以上。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HR-面和管理层面试\"><a href=\"#HR-面和管理层面试\" class=\"headerlink\" title=\"HR 面和管理层面试\"></a>HR 面和管理层面试</h3><p> HR 是个漂亮的小姐姐，问了不少生活上的问题，以及个人的兴趣之类的，坚持某件事情吗，大学生活等，很友善，聊的也挺开心，很轻松的环境。管理层面试时候就没问多少问题了，主要还是比较忙吧，面试进行到这个时候已经过了接近三个小时了，所以简单介绍了一下公司就结束了。总的来说，这是一个挺轻松的面试过程。不过从面试中也察觉了自己存在的诸多问题，以后要着手解决，收获也不少。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 总的来说，在面试的前几天是有点消极懈怠的，看了一些泰剧。。。威敏啥的刷完了就单刷了几部。。。所以说准备其实是不太充分的，其实应该可以做到更好。而且并不是等到准备完成了再去面试，不断的面试对自己其实有很大的帮助。有点小后悔准备的很晚，而且还不充分，这是病，得改！！！</p>\n <center> — end — </center>\n\n<hr>"},{"title":"Android Studio 中常用的一些布局(二)","date":"2017-04-02T13:00:03.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局-二/sea.jpg)\n\n## 接上篇\n今天来讲讲如何实现侧滑菜单。效果图如下：<!--more-->\n\n![](Android-Studio-中常用的一些布局-二/rst.png)\n\n看上去是不是很丑陋？我觉得也是（捂脸）。不过后续我们会逐步完善它，使得它成为下面这样的：\n\n![](Android-Studio-中常用的一些布局-二/nextrst.png)\n\n是不是就高大上不少呢！嘿嘿，不过凡事都要慢慢来，一口吃不成胖子，我们今天还是实现第一张图的效果吧。话不多说，开工！\n\n2\\.  DrawerLayout 实现侧滑菜单\n侧滑菜单，顾名思义，就是把一些菜单隐藏，不在主屏幕上显示，通过滑动的方式将菜单显示出来。为了实现这个效果，我们需要使用谷歌提供了一个  DrawerLayout  控件。这个控件实现侧滑菜单很方便。\n\nDrawerLayout 是一个布局，其中允许放入两个直接子控件，第一个子控件是显示主屏幕内容，第二个则是菜单的内容。在  activity_main.xml 中修改：\n``` xml\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <FrameLayout...>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:text=\"This is Menu!\"\n        android:textSize=\"30sp\"\n        android:background=\"#FFF\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n在上面的 FrameLayout 中的部分就是我们上次主屏幕的布局代码，请主动移除其中多余的名字空间。此时在侧滑菜单中，我们看到只加入了一个 TextView，所有在当前的状态就只能看到一行字。其中要注意的是：\n``` bash\nandroid:layout_gravity=\"start\"\n```\n这个属性是必须指定的，start 表示根据系统语言的书写方向显示菜单的方向，也可以定义 left, right。意思很明显，此处不多解释。\n此时，如果我们运行程序，通过滑动就可以看到侧滑菜单了。但是很多人有可能不会发现这个功能，所以我们给它加上一个导航按钮。在 MainActivity  中修改：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);\n        ActionBar actionBar = getSupportActionBar();\n        if(actionBar != null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);\n        }\n    }\n\n    @Override   //菜单栏的点击事件\n    public boolean onOptionsItemSelected(MenuItem item){\n        switch (item.getItemId()){\n            case android.R.id.home:\n                mDrawerLayout.openDrawer(GravityCompat.START);\n                break;\n            ...\n            default:\n          }\n          return true;\n   }\n```\n上面的代码应该很好理解，说明的一点就是 HomeAsUp 也即是 Toolbar 最左侧的按钮，默认是箭头，此处对它进行了修改，其 id 永远是 android.R.home，主要不要少了 android。\n至此，在 Toolbar 的最左侧就有了一个按钮，可以打开侧滑菜单。今天的任务也就完成了。\n\n#### 小说明\n这个布局系列后面还会继续，不过不一定是连续发，因为我可能写一个近期看的东西，比如最近在研究谷歌的基本 MVP 架构，也许下次先讲这个。至于布局系列可能会延后，不过不会停更。（如果发现有什么问题可以联系我）。\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Studio-中常用的一些布局-二.md","raw":"---\ntitle: Android Studio 中常用的一些布局(二)\ndate: 2017-04-02 21:00:03\ntags: [Android Studio, 布局]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局-二/sea.jpg)\n\n## 接上篇\n今天来讲讲如何实现侧滑菜单。效果图如下：<!--more-->\n\n![](Android-Studio-中常用的一些布局-二/rst.png)\n\n看上去是不是很丑陋？我觉得也是（捂脸）。不过后续我们会逐步完善它，使得它成为下面这样的：\n\n![](Android-Studio-中常用的一些布局-二/nextrst.png)\n\n是不是就高大上不少呢！嘿嘿，不过凡事都要慢慢来，一口吃不成胖子，我们今天还是实现第一张图的效果吧。话不多说，开工！\n\n2\\.  DrawerLayout 实现侧滑菜单\n侧滑菜单，顾名思义，就是把一些菜单隐藏，不在主屏幕上显示，通过滑动的方式将菜单显示出来。为了实现这个效果，我们需要使用谷歌提供了一个  DrawerLayout  控件。这个控件实现侧滑菜单很方便。\n\nDrawerLayout 是一个布局，其中允许放入两个直接子控件，第一个子控件是显示主屏幕内容，第二个则是菜单的内容。在  activity_main.xml 中修改：\n``` xml\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <FrameLayout...>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:text=\"This is Menu!\"\n        android:textSize=\"30sp\"\n        android:background=\"#FFF\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n在上面的 FrameLayout 中的部分就是我们上次主屏幕的布局代码，请主动移除其中多余的名字空间。此时在侧滑菜单中，我们看到只加入了一个 TextView，所有在当前的状态就只能看到一行字。其中要注意的是：\n``` bash\nandroid:layout_gravity=\"start\"\n```\n这个属性是必须指定的，start 表示根据系统语言的书写方向显示菜单的方向，也可以定义 left, right。意思很明显，此处不多解释。\n此时，如果我们运行程序，通过滑动就可以看到侧滑菜单了。但是很多人有可能不会发现这个功能，所以我们给它加上一个导航按钮。在 MainActivity  中修改：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);\n        ActionBar actionBar = getSupportActionBar();\n        if(actionBar != null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);\n        }\n    }\n\n    @Override   //菜单栏的点击事件\n    public boolean onOptionsItemSelected(MenuItem item){\n        switch (item.getItemId()){\n            case android.R.id.home:\n                mDrawerLayout.openDrawer(GravityCompat.START);\n                break;\n            ...\n            default:\n          }\n          return true;\n   }\n```\n上面的代码应该很好理解，说明的一点就是 HomeAsUp 也即是 Toolbar 最左侧的按钮，默认是箭头，此处对它进行了修改，其 id 永远是 android.R.home，主要不要少了 android。\n至此，在 Toolbar 的最左侧就有了一个按钮，可以打开侧滑菜单。今天的任务也就完成了。\n\n#### 小说明\n这个布局系列后面还会继续，不过不一定是连续发，因为我可能写一个近期看的东西，比如最近在研究谷歌的基本 MVP 架构，也许下次先讲这个。至于布局系列可能会延后，不过不会停更。（如果发现有什么问题可以联系我）。\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Studio-中常用的一些布局-二","published":1,"updated":"2019-05-10T16:14:30.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxwy000l5cv98qgtw9xp","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/sea.jpg\" alt=\"\"></p>\n<h2 id=\"接上篇\"><a href=\"#接上篇\" class=\"headerlink\" title=\"接上篇\"></a>接上篇</h2><p>今天来讲讲如何实现侧滑菜单。效果图如下：<a id=\"more\"></a></p>\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/rst.png\" alt=\"\"></p>\n<p>看上去是不是很丑陋？我觉得也是（捂脸）。不过后续我们会逐步完善它，使得它成为下面这样的：</p>\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/nextrst.png\" alt=\"\"></p>\n<p>是不是就高大上不少呢！嘿嘿，不过凡事都要慢慢来，一口吃不成胖子，我们今天还是实现第一张图的效果吧。话不多说，开工！</p>\n<p>2.  DrawerLayout 实现侧滑菜单<br>侧滑菜单，顾名思义，就是把一些菜单隐藏，不在主屏幕上显示，通过滑动的方式将菜单显示出来。为了实现这个效果，我们需要使用谷歌提供了一个  DrawerLayout  控件。这个控件实现侧滑菜单很方便。</p>\n<p>DrawerLayout 是一个布局，其中允许放入两个直接子控件，第一个子控件是显示主屏幕内容，第二个则是菜单的内容。在  activity_main.xml 中修改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout...</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is Menu!\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#FFF\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的 FrameLayout 中的部分就是我们上次主屏幕的布局代码，请主动移除其中多余的名字空间。此时在侧滑菜单中，我们看到只加入了一个 TextView，所有在当前的状态就只能看到一行字。其中要注意的是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:layout_gravity=<span class=\"string\">\"start\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这个属性是必须指定的，start 表示根据系统语言的书写方向显示菜单的方向，也可以定义 left, right。意思很明显，此处不多解释。<br>此时，如果我们运行程序，通过滑动就可以看到侧滑菜单了。但是很多人有可能不会发现这个功能，所以我们给它加上一个导航按钮。在 MainActivity  中修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);</span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>   <span class=\"comment\">//菜单栏的点击事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码应该很好理解，说明的一点就是 HomeAsUp 也即是 Toolbar 最左侧的按钮，默认是箭头，此处对它进行了修改，其 id 永远是 android.R.home，主要不要少了 android。<br>至此，在 Toolbar 的最左侧就有了一个按钮，可以打开侧滑菜单。今天的任务也就完成了。</p>\n<h4 id=\"小说明\"><a href=\"#小说明\" class=\"headerlink\" title=\"小说明\"></a>小说明</h4><p>这个布局系列后面还会继续，不过不一定是连续发，因为我可能写一个近期看的东西，比如最近在研究谷歌的基本 MVP 架构，也许下次先讲这个。至于布局系列可能会延后，不过不会停更。（如果发现有什么问题可以联系我）。</p>\n<blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/sea.jpg\" alt=\"\"></p>\n<h2 id=\"接上篇\"><a href=\"#接上篇\" class=\"headerlink\" title=\"接上篇\"></a>接上篇</h2><p>今天来讲讲如何实现侧滑菜单。效果图如下：</p>","more":"<p></p>\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/rst.png\" alt=\"\"></p>\n<p>看上去是不是很丑陋？我觉得也是（捂脸）。不过后续我们会逐步完善它，使得它成为下面这样的：</p>\n<p><img src=\"/2017/04/02/Android-Studio-中常用的一些布局-二/nextrst.png\" alt=\"\"></p>\n<p>是不是就高大上不少呢！嘿嘿，不过凡事都要慢慢来，一口吃不成胖子，我们今天还是实现第一张图的效果吧。话不多说，开工！</p>\n<p>2.  DrawerLayout 实现侧滑菜单<br>侧滑菜单，顾名思义，就是把一些菜单隐藏，不在主屏幕上显示，通过滑动的方式将菜单显示出来。为了实现这个效果，我们需要使用谷歌提供了一个  DrawerLayout  控件。这个控件实现侧滑菜单很方便。</p>\n<p>DrawerLayout 是一个布局，其中允许放入两个直接子控件，第一个子控件是显示主屏幕内容，第二个则是菜单的内容。在  activity_main.xml 中修改：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout...</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is Menu!\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#FFF\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的 FrameLayout 中的部分就是我们上次主屏幕的布局代码，请主动移除其中多余的名字空间。此时在侧滑菜单中，我们看到只加入了一个 TextView，所有在当前的状态就只能看到一行字。其中要注意的是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:layout_gravity=<span class=\"string\">\"start\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这个属性是必须指定的，start 表示根据系统语言的书写方向显示菜单的方向，也可以定义 left, right。意思很明显，此处不多解释。<br>此时，如果我们运行程序，通过滑动就可以看到侧滑菜单了。但是很多人有可能不会发现这个功能，所以我们给它加上一个导航按钮。在 MainActivity  中修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);</span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>   <span class=\"comment\">//菜单栏的点击事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码应该很好理解，说明的一点就是 HomeAsUp 也即是 Toolbar 最左侧的按钮，默认是箭头，此处对它进行了修改，其 id 永远是 android.R.home，主要不要少了 android。<br>至此，在 Toolbar 的最左侧就有了一个按钮，可以打开侧滑菜单。今天的任务也就完成了。</p>\n<h4 id=\"小说明\"><a href=\"#小说明\" class=\"headerlink\" title=\"小说明\"></a>小说明</h4><p>这个布局系列后面还会继续，不过不一定是连续发，因为我可能写一个近期看的东西，比如最近在研究谷歌的基本 MVP 架构，也许下次先讲这个。至于布局系列可能会延后，不过不会停更。（如果发现有什么问题可以联系我）。</p>\n<blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>"},{"title":"Android Studio 中常用的一些布局(一)","date":"2017-03-31T02:58:26.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局/Beach.jpg)\n\n## 写在前面\n对于应用开发者来说，让应用拥有一个漂亮的外观往往能让用户有一个很好的印象。而上一星期刚好看了郭神的《第一行代码》，觉得其中介绍的布局方式使我受益良多，所以今天就介绍一些在 Android Studio 中的布局。这些是目前我所遇到了比较合适于简单开发的布局，以此记之。如果想要更详细的了解，建议阅读郭霖大神的 《第一行代码(第二版)》。\n<!--more-->\n## 正式开始\n\n1\\. Toolbar\n众所周知，Toolbar 是 Android App 上端显示的内容，当我们新建一个 AS 项目时，AS 自动给我们添加了 ActionBar，但是这个 Toolbar 并不总能满足我们的需求，有时候就需要自定义的 Toolbar。因此我们就需要先修改为没有自带的 Toolbar 的主题。 下面是主要代码:\n修改 res/values/styles.xml 中的相应属性如下:\n``` xml\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n```\n此时达到的效果就是隐藏了原本的 ActionBar， 接下来使用 Toolbar 代替它。\n修改 activity_main.xml 如下：\n``` xml\n<!-- 引用 app -->\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n<android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\" />\n\n```\n接着在 MainActivity 中的 onCreate 方法中 Toolbar 加入到 SupportActionBar 中\n``` java\nToolbar toolbar = (Toolbar)findViewById(R.id.toolbar);\nsetSupportActionBar(toolbar);\n```\n此时就可以看到和 ActionBar 完全相同的效果。我们接下来对它继续完善。\n右击 res → New → Directory， 创建 menu 文件夹。 在其中新建一个 toolbar.xml， 添加如下代码：\n``` xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <item\n        android:id=\"@+id/backup\"\n        android:icon=\"@drawable/ic_backup\"\n        android:title=\"Backup\"\n        app:showAsAction=\"always\"/>\n    <item\n        android:id=\"@+id/delete\"\n        android:icon=\"@drawable/ic_delete\"\n        android:title=\"Delete\"\n        app:showAsAction=\"ifRoom\"/>\n    <item\n        android:id=\"@+id/settings\"\n        android:icon=\"@drawable/ic_settings\"\n        android:title=\"Settings\"\n        app:showAsAction=\"never\"/>\n</menu>\n```\n代码中的图片自行查找并添加，此处推荐 Google 使用的 [Material Design Icon](https://material.io/icons/)，这个网站上有非常丰富的标准图标资源，而且提供多种分辨率的图片，能满足很多开发的需要了。\n此时已经可以显示了，接下来进行点击事件的模拟。在 MainActivity 中加入\n``` java\n   public boolean onCreateOptionsMenu(Menu menu){\n        getMenuInflater().inflate(R.menu.toolbar, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item){\n        switch (item.getItemId()){\n            case R.id.backup:\n                Toast.makeText(this, \"You clicked Backup\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.delete:\n                Toast.makeText(this, \"You clicked Delete\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.settings:\n                Toast.makeText(this, \"You clicked Settings\", Toast.LENGTH_SHORT).show();\n                break;\n            default:\n        }\n        return true;\n    }\n```\n\n以上就完成了点击事件的模拟。\n\n##### 由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/Android-Studio-中常用的一些布局.md","raw":"---\ntitle: Android Studio 中常用的一些布局(一)\ndate: 2017-03-31 10:58:26\ntags: [Android Studio, 布局]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](Android-Studio-中常用的一些布局/Beach.jpg)\n\n## 写在前面\n对于应用开发者来说，让应用拥有一个漂亮的外观往往能让用户有一个很好的印象。而上一星期刚好看了郭神的《第一行代码》，觉得其中介绍的布局方式使我受益良多，所以今天就介绍一些在 Android Studio 中的布局。这些是目前我所遇到了比较合适于简单开发的布局，以此记之。如果想要更详细的了解，建议阅读郭霖大神的 《第一行代码(第二版)》。\n<!--more-->\n## 正式开始\n\n1\\. Toolbar\n众所周知，Toolbar 是 Android App 上端显示的内容，当我们新建一个 AS 项目时，AS 自动给我们添加了 ActionBar，但是这个 Toolbar 并不总能满足我们的需求，有时候就需要自定义的 Toolbar。因此我们就需要先修改为没有自带的 Toolbar 的主题。 下面是主要代码:\n修改 res/values/styles.xml 中的相应属性如下:\n``` xml\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n```\n此时达到的效果就是隐藏了原本的 ActionBar， 接下来使用 Toolbar 代替它。\n修改 activity_main.xml 如下：\n``` xml\n<!-- 引用 app -->\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n<android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\" />\n\n```\n接着在 MainActivity 中的 onCreate 方法中 Toolbar 加入到 SupportActionBar 中\n``` java\nToolbar toolbar = (Toolbar)findViewById(R.id.toolbar);\nsetSupportActionBar(toolbar);\n```\n此时就可以看到和 ActionBar 完全相同的效果。我们接下来对它继续完善。\n右击 res → New → Directory， 创建 menu 文件夹。 在其中新建一个 toolbar.xml， 添加如下代码：\n``` xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <item\n        android:id=\"@+id/backup\"\n        android:icon=\"@drawable/ic_backup\"\n        android:title=\"Backup\"\n        app:showAsAction=\"always\"/>\n    <item\n        android:id=\"@+id/delete\"\n        android:icon=\"@drawable/ic_delete\"\n        android:title=\"Delete\"\n        app:showAsAction=\"ifRoom\"/>\n    <item\n        android:id=\"@+id/settings\"\n        android:icon=\"@drawable/ic_settings\"\n        android:title=\"Settings\"\n        app:showAsAction=\"never\"/>\n</menu>\n```\n代码中的图片自行查找并添加，此处推荐 Google 使用的 [Material Design Icon](https://material.io/icons/)，这个网站上有非常丰富的标准图标资源，而且提供多种分辨率的图片，能满足很多开发的需要了。\n此时已经可以显示了，接下来进行点击事件的模拟。在 MainActivity 中加入\n``` java\n   public boolean onCreateOptionsMenu(Menu menu){\n        getMenuInflater().inflate(R.menu.toolbar, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item){\n        switch (item.getItemId()){\n            case R.id.backup:\n                Toast.makeText(this, \"You clicked Backup\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.delete:\n                Toast.makeText(this, \"You clicked Delete\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.settings:\n                Toast.makeText(this, \"You clicked Settings\", Toast.LENGTH_SHORT).show();\n                break;\n            default:\n        }\n        return true;\n    }\n```\n\n以上就完成了点击事件的模拟。\n\n##### 由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\n\n> ### 如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\n\n\n<center> --- end --- </center>\n\n---\n","slug":"Android-Studio-中常用的一些布局","published":1,"updated":"2019-05-10T16:14:30.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxx1000o5cv9xl92peda","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/03/31/Android-Studio-中常用的一些布局/Beach.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>对于应用开发者来说，让应用拥有一个漂亮的外观往往能让用户有一个很好的印象。而上一星期刚好看了郭神的《第一行代码》，觉得其中介绍的布局方式使我受益良多，所以今天就介绍一些在 Android Studio 中的布局。这些是目前我所遇到了比较合适于简单开发的布局，以此记之。如果想要更详细的了解，建议阅读郭霖大神的 《第一行代码(第二版)》。<br><a id=\"more\"></a></p>\n<h2 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h2><p>1. Toolbar<br>众所周知，Toolbar 是 Android App 上端显示的内容，当我们新建一个 AS 项目时，AS 自动给我们添加了 ActionBar，但是这个 Toolbar 并不总能满足我们的需求，有时候就需要自定义的 Toolbar。因此我们就需要先修改为没有自带的 Toolbar 的主题。 下面是主要代码:<br>修改 res/values/styles.xml 中的相应属性如下:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br></pre></td></tr></table></figure></p>\n<p>此时达到的效果就是隐藏了原本的 ActionBar， 接下来使用 Toolbar 代替它。<br>修改 activity_main.xml 如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用 app --&gt;</span></span><br><span class=\"line\">xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways|snap\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在 MainActivity 中的 onCreate 方法中 Toolbar 加入到 SupportActionBar 中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class=\"line\">setSupportActionBar(toolbar);</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以看到和 ActionBar 完全相同的效果。我们接下来对它继续完善。<br>右击 res → New → Directory， 创建 menu 文件夹。 在其中新建一个 toolbar.xml， 添加如下代码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"always\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"never\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>代码中的图片自行查找并添加，此处推荐 Google 使用的 <a href=\"https://material.io/icons/\" target=\"_blank\" rel=\"noopener\">Material Design Icon</a>，这个网站上有非常丰富的标准图标资源，而且提供多种分辨率的图片，能满足很多开发的需要了。<br>此时已经可以显示了，接下来进行点击事件的模拟。在 MainActivity 中加入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span></span>&#123;</span><br><span class=\"line\">     getMenuInflater().inflate(R.menu.toolbar, menu);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.backup:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Backup\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.delete:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Delete\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.settings:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Settings\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就完成了点击事件的模拟。</p>\n<h5 id=\"由于篇幅原因以及肚子饿了-最大原因-，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\"><a href=\"#由于篇幅原因以及肚子饿了-最大原因-，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\" class=\"headerlink\" title=\"由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\"></a>由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。</h5><blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/03/31/Android-Studio-中常用的一些布局/Beach.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>对于应用开发者来说，让应用拥有一个漂亮的外观往往能让用户有一个很好的印象。而上一星期刚好看了郭神的《第一行代码》，觉得其中介绍的布局方式使我受益良多，所以今天就介绍一些在 Android Studio 中的布局。这些是目前我所遇到了比较合适于简单开发的布局，以此记之。如果想要更详细的了解，建议阅读郭霖大神的 《第一行代码(第二版)》。<br></p>","more":"<p></p>\n<h2 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h2><p>1. Toolbar<br>众所周知，Toolbar 是 Android App 上端显示的内容，当我们新建一个 AS 项目时，AS 自动给我们添加了 ActionBar，但是这个 Toolbar 并不总能满足我们的需求，有时候就需要自定义的 Toolbar。因此我们就需要先修改为没有自带的 Toolbar 的主题。 下面是主要代码:<br>修改 res/values/styles.xml 中的相应属性如下:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br></pre></td></tr></table></figure></p>\n<p>此时达到的效果就是隐藏了原本的 ActionBar， 接下来使用 Toolbar 代替它。<br>修改 activity_main.xml 如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用 app --&gt;</span></span><br><span class=\"line\">xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways|snap\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在 MainActivity 中的 onCreate 方法中 Toolbar 加入到 SupportActionBar 中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class=\"line\">setSupportActionBar(toolbar);</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以看到和 ActionBar 完全相同的效果。我们接下来对它继续完善。<br>右击 res → New → Directory， 创建 menu 文件夹。 在其中新建一个 toolbar.xml， 添加如下代码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Backup\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"always\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"Settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"never\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>代码中的图片自行查找并添加，此处推荐 Google 使用的 <a href=\"https://material.io/icons/\" target=\"_blank\" rel=\"noopener\">Material Design Icon</a>，这个网站上有非常丰富的标准图标资源，而且提供多种分辨率的图片，能满足很多开发的需要了。<br>此时已经可以显示了，接下来进行点击事件的模拟。在 MainActivity 中加入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span></span>&#123;</span><br><span class=\"line\">     getMenuInflater().inflate(R.menu.toolbar, menu);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.backup:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Backup\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.delete:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Delete\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> R.id.settings:</span><br><span class=\"line\">             Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You clicked Settings\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就完成了点击事件的模拟。</p>\n<h5 id=\"由于篇幅原因以及肚子饿了-最大原因-，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\"><a href=\"#由于篇幅原因以及肚子饿了-最大原因-，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\" class=\"headerlink\" title=\"由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。\"></a>由于篇幅原因以及肚子饿了(最大原因)，今天暂时到这里，后面会补上其他内容。下一次讲滑动菜单。</h5><blockquote>\n<h3 id=\"如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\"><a href=\"#如果想要了解的更仔细，请阅读郭霖大神著作-《第一行代码（第二版）》。\" class=\"headerlink\" title=\"如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。\"></a>如果想要了解的更仔细，请阅读郭霖大神著作 《第一行代码（第二版）》。</h3></blockquote>\n<center> — end — </center>\n\n<hr>"},{"title":"Android开发者的升级之路","date":"2019-05-10T16:18:26.000Z","_content":"","source":"_posts/Android开发者的升级之路.md","raw":"---\ntitle: Android开发者的升级之路\ndate: 2019-05-11 00:18:26\ntags:\n---\n","slug":"Android开发者的升级之路","published":1,"updated":"2019-05-10T16:18:26.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxx4000s5cv97t3sg83a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C# 中的委托与事件","date":"2017-05-27T17:06:16.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![](C-中的委托与事件\\water.jpg)\n## 委托与事件\n\n委托和事件是 C# 中一个比较重要的部分。最近小组作业中使用到了它们，今天自己写的时候遇到了小问题，于是也就稍微探究了一下。\n<!-- more -->\n\n**实现的基本方法**\n``` csharp\n// (1) 定义委托\ninternal delegate void myHandler(int a, int b);\n// (2) 定义事件\ninternal event myHandler myevent;\n// (3) 注册事件\nmyevent += myFunction;\n// (4) 实现方法\nvoid myFunction(int a, int b)\n{...}\n```\n\n**个人理解**\n\n委托相当于获得了一个函数的指针。可以在本类中调用其他类的函数，只要这个委托可以在其他类中注册；同时，在实现上，这个所谓的其他类的参数也可以被使用，这也是委托和事件的方便之处。\n也就是说该类的持有者可以实现该类的事件，并在事件中使用持有者类的对象，在该类中调用该事件则会执行持有者类中的事件。\n\n![](C-中的委托与事件\\Csharp_delegate_event.png)\n\n如上图，在 Fields 类中定义了委托 FieldDeleteHandle(object sender, Field field) 以及事件 FieldDeleteHandle FieldDelete，在持有者 Dataset 类中注册并实现了该事件，其中调用的 DataSet 类的其他成员，这些成员并不是 Fields 类中的。\n\n所以，如果某个类改变后要对另外一个类有某种影响，则可以通过事件已经两个对象的公共持有者进行处理，子类通知持有者类，由持有者类对另外的子类进行处理。\n\n本文最初是收录在自己的学习笔记关于 C# 部分内容的，只是今天突然所感而写。好久没更新了，虽然这篇文章很短，而且还有些许不成熟之处，但是还是发一下，至少感觉到学到了一点东西的。\n\n懒癌病发！！！\n\n不想写作业！！！\n\n期末更懒。。。。\n\n就这样，没了。\n\n<center> --- end --- </center>\n","source":"_posts/C-中的委托与事件.md","raw":"---\ntitle: 'C# 中的委托与事件'\ndate: 2017-05-28 01:06:16\ntags: [C#, 委托, 事件]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![](C-中的委托与事件\\water.jpg)\n## 委托与事件\n\n委托和事件是 C# 中一个比较重要的部分。最近小组作业中使用到了它们，今天自己写的时候遇到了小问题，于是也就稍微探究了一下。\n<!-- more -->\n\n**实现的基本方法**\n``` csharp\n// (1) 定义委托\ninternal delegate void myHandler(int a, int b);\n// (2) 定义事件\ninternal event myHandler myevent;\n// (3) 注册事件\nmyevent += myFunction;\n// (4) 实现方法\nvoid myFunction(int a, int b)\n{...}\n```\n\n**个人理解**\n\n委托相当于获得了一个函数的指针。可以在本类中调用其他类的函数，只要这个委托可以在其他类中注册；同时，在实现上，这个所谓的其他类的参数也可以被使用，这也是委托和事件的方便之处。\n也就是说该类的持有者可以实现该类的事件，并在事件中使用持有者类的对象，在该类中调用该事件则会执行持有者类中的事件。\n\n![](C-中的委托与事件\\Csharp_delegate_event.png)\n\n如上图，在 Fields 类中定义了委托 FieldDeleteHandle(object sender, Field field) 以及事件 FieldDeleteHandle FieldDelete，在持有者 Dataset 类中注册并实现了该事件，其中调用的 DataSet 类的其他成员，这些成员并不是 Fields 类中的。\n\n所以，如果某个类改变后要对另外一个类有某种影响，则可以通过事件已经两个对象的公共持有者进行处理，子类通知持有者类，由持有者类对另外的子类进行处理。\n\n本文最初是收录在自己的学习笔记关于 C# 部分内容的，只是今天突然所感而写。好久没更新了，虽然这篇文章很短，而且还有些许不成熟之处，但是还是发一下，至少感觉到学到了一点东西的。\n\n懒癌病发！！！\n\n不想写作业！！！\n\n期末更懒。。。。\n\n就这样，没了。\n\n<center> --- end --- </center>\n","slug":"C-中的委托与事件","published":1,"updated":"2019-05-10T16:14:30.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxx7000v5cv9usqix2ka","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/05/28/C-中的委托与事件/water.jpg\" alt=\"\"></p>\n<h2 id=\"委托与事件\"><a href=\"#委托与事件\" class=\"headerlink\" title=\"委托与事件\"></a>委托与事件</h2><p>委托和事件是 C# 中一个比较重要的部分。最近小组作业中使用到了它们，今天自己写的时候遇到了小问题，于是也就稍微探究了一下。<br><a id=\"more\"></a></p>\n<p><strong>实现的基本方法</strong><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (1) 定义委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">myHandler</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// (2) 定义事件</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">event</span> myHandler myevent;</span><br><span class=\"line\"><span class=\"comment\">// (3) 注册事件</span></span><br><span class=\"line\">myevent += myFunction;</span><br><span class=\"line\"><span class=\"comment\">// (4) 实现方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>个人理解</strong></p>\n<p>委托相当于获得了一个函数的指针。可以在本类中调用其他类的函数，只要这个委托可以在其他类中注册；同时，在实现上，这个所谓的其他类的参数也可以被使用，这也是委托和事件的方便之处。<br>也就是说该类的持有者可以实现该类的事件，并在事件中使用持有者类的对象，在该类中调用该事件则会执行持有者类中的事件。</p>\n<p><img src=\"/2017/05/28/C-中的委托与事件/Csharp_delegate_event.png\" alt=\"\"></p>\n<p>如上图，在 Fields 类中定义了委托 FieldDeleteHandle(object sender, Field field) 以及事件 FieldDeleteHandle FieldDelete，在持有者 Dataset 类中注册并实现了该事件，其中调用的 DataSet 类的其他成员，这些成员并不是 Fields 类中的。</p>\n<p>所以，如果某个类改变后要对另外一个类有某种影响，则可以通过事件已经两个对象的公共持有者进行处理，子类通知持有者类，由持有者类对另外的子类进行处理。</p>\n<p>本文最初是收录在自己的学习笔记关于 C# 部分内容的，只是今天突然所感而写。好久没更新了，虽然这篇文章很短，而且还有些许不成熟之处，但是还是发一下，至少感觉到学到了一点东西的。</p>\n<p>懒癌病发！！！</p>\n<p>不想写作业！！！</p>\n<p>期末更懒。。。。</p>\n<p>就这样，没了。</p>\n<center> — end — </center>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/05/28/C-中的委托与事件/water.jpg\" alt=\"\"></p>\n<h2 id=\"委托与事件\"><a href=\"#委托与事件\" class=\"headerlink\" title=\"委托与事件\"></a>委托与事件</h2><p>委托和事件是 C# 中一个比较重要的部分。最近小组作业中使用到了它们，今天自己写的时候遇到了小问题，于是也就稍微探究了一下。<br></p>","more":"<p></p>\n<p><strong>实现的基本方法</strong><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (1) 定义委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">myHandler</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// (2) 定义事件</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">event</span> myHandler myevent;</span><br><span class=\"line\"><span class=\"comment\">// (3) 注册事件</span></span><br><span class=\"line\">myevent += myFunction;</span><br><span class=\"line\"><span class=\"comment\">// (4) 实现方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>个人理解</strong></p>\n<p>委托相当于获得了一个函数的指针。可以在本类中调用其他类的函数，只要这个委托可以在其他类中注册；同时，在实现上，这个所谓的其他类的参数也可以被使用，这也是委托和事件的方便之处。<br>也就是说该类的持有者可以实现该类的事件，并在事件中使用持有者类的对象，在该类中调用该事件则会执行持有者类中的事件。</p>\n<p><img src=\"/2017/05/28/C-中的委托与事件/Csharp_delegate_event.png\" alt=\"\"></p>\n<p>如上图，在 Fields 类中定义了委托 FieldDeleteHandle(object sender, Field field) 以及事件 FieldDeleteHandle FieldDelete，在持有者 Dataset 类中注册并实现了该事件，其中调用的 DataSet 类的其他成员，这些成员并不是 Fields 类中的。</p>\n<p>所以，如果某个类改变后要对另外一个类有某种影响，则可以通过事件已经两个对象的公共持有者进行处理，子类通知持有者类，由持有者类对另外的子类进行处理。</p>\n<p>本文最初是收录在自己的学习笔记关于 C# 部分内容的，只是今天突然所感而写。好久没更新了，虽然这篇文章很短，而且还有些许不成熟之处，但是还是发一下，至少感觉到学到了一点东西的。</p>\n<p>懒癌病发！！！</p>\n<p>不想写作业！！！</p>\n<p>期末更懒。。。。</p>\n<p>就这样，没了。</p>\n<center> — end — </center>"},{"title":"Android 广播机制与服务","date":"2018-03-07T09:54:23.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-广播机制与服务/main-img.jpg \"image from Momentum\")\n\n## 前言\n今天有兴趣来看看 Android 相关的一些东西，看了一些关于桌面弹窗的内容，然后谷歌看到实现方式大多是使用服务(Service)来实现的，然后想着想着又想到了广播机制(Broadcast)。于是今天稍微写一下关于两者的一点内容，内容不多，偏向于入门，算是用于备忘吧。<!-- more -->\n\n## 广播机制(Broadcast)\n 广播机制，广而播之，通俗来说就是将一个通告向所有地方（频道）发送，在 Android 中，就是向监听了某个广播的接收器发送通告。比如电池电量、时间更变等情况下，会发送对应的广播，如果应用注册了这两个广播，就可以接收到该条广播，从而实现对应的操作。\n 广播分为两种类型：标准广播和有序广播。\n - **标准广播**：完全异步的广播，所有接收器几乎同时收到消息，无顺序，不可截获。是 1:N 的状态。\n - **有序广播**:同步执行的广播，一个时刻只会被一个接收器接收，完成逻辑的执行后方可继续传播，有顺序，可被截获，随后的接收器就不能收到消息了。\n\n\n### 接收广播\n 广播接收器需要注册广播才能接收到广播，并处理逻辑。注册广播有两种方法，动态注册，也即在代码中注册，静态注册则是在 AndroidManifest.xml 中注册。\n\n 接收流程主要为：\n 1. 新建继承自 BroadcastReceiver 的接收器，并重写 onReceive() 方法。\n 2. 使用 IntentFilter 的实例的 addAction() 方法添加对应广播的 action。\n 3. 创建接收器实例，然受使用 registerReceiver 传入参数接收器和 IntentFilter 的实例。动态注册时需要 unregisterReceiver() 取消注册。\n\n 郭神《第一行代码》示范如下(如需进行其他的复杂逻辑操作，可能需要添加权限)：\n ``` java\n    private IntentFilter intentFilter;\n    private NetworkChangeReceiver networkChangeReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        intentFilter = new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n        networkChangeReceiver = new NetworkChangeReceiver();\n        registerReceiver(networkChangeReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver(networkChangeReceiver);\n    }\n\n    class NetworkChangeReceiver extends BroadcastReceiver{\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"network change.\", Toast.LENGTH_SHORT).show();\n        }\n    }\n ```\n\n 动态注册需要在程序启动之后才能接收广播，静态注册则不必启动。静态注册也需要自定义接收器才能实现自己的逻辑。同时要在 AndroidManifest.xml 中注册，在 application 标签内新建子标签如下：\n ``` xml\n        <receiver android:name=\"广播接收器名\"\n            android:enabled=\"true\"\n            android:exported=\"true\" >\n            <intent-filter>\n                <action android:name=\"广播活动\" />\n            </intent-filter>\n        </receiver>\n ```\n\n### 发送广播\n 发送自定义广播流程：\n 1. 定义接收器\n 2. 在 AndroidManifest.xml 中注册接收器，名称为接收器类名，使用自定义广播值作为筛选，\n 3. 使用 sendBroadcast(new Intent(\"广播活动值\")) 发送广播。\n\n 发送有序广播，使用 sendOrderBroadcast(intetn, 权限字符串/null)，可以在筛选器中使用 priority 更改接收广播的优先级，接收器收到后可以截断 abortBroadcast()。\n\n **使用本地广播**：为了避免其他程序接收广播，使用本地广播，广播只能在应用内接收，不能在系统全局接收，作用为保密性强，排外性高（不接受外部应用同一个广播活动值），高效率。\n\n\n 所以要定义一个 LocalBroadcastManager 实例如 localBroadcastManager 用于管理本地广播的接发。发送时使用该 localBroadcastManager.sendBroadcast(new Intent(\"广播活动值\"))，注册/注销时也需要该实例的相应方法，和全局类似，只是有实例发起。不再赘述。\n\n## 服务(Service)\n服务可以认为是在后台运行的任务，使用于执行不需交互并长期运行的任务，切换应用至后台时仍然运行。依赖于创建服务的应用程序进程，杀死该进程则服务停止。服务不会自动开启线程，代码默认运行在主线程中，需在内部手动开启子线程并处理任务，否则可能阻塞主线程。\n\n### 使用流程\n服务的使用流程：\n1. 自定义服务继承于 Service，实现 onBind() 方法。\n2. 可根据需求重写诸如 onCreate()、onStartCommand()、 onDestroy() 等方法。\n3. 在 AndroidManifest.xml 中注册服务，类似于广播，标签为 service，主要属性 enabled 和 exported.\n4. 使用 Intent 启动和停止，如 startService(new Intent(Context, ServiceName.class)), 同理使用 stopService(Intent)。\n\n### 和活动通信\n 使用 onBind() 方法实现，在其中返回一个继承 Binder 类型的实例，如 UploadBinder extends Binder,其中定义可以在外部使用的方法，以进行消息传递。创建 ServiceConnection 匿名类，重写相应方法。绑定服务和解绑服务。\n\n 主要的代码入下：\n ``` java\n         class MyService extends Service{\n            \n            private MyBinder myBinder = new MyBinder();\n\n            class MyBinder extends Binder{\n                public int getXXX(){\n                    // todo:.........\n                    return 0;\n                }\n            }\n            \n            @Nullable\n            @Override\n            public IBinder onBind(Intent intent) {\n                return myBinder;\n            }\n        }\n        \n        // 创建 ServiceConnection 匿名类，并重写两个方法，分别用于连接服务时和断开服务时\n        private ServiceConnection connection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n                myBinder = (MyBinder)iBinder;\n                // 执行 MyBinder 的公开方法，获取信息\n                myBinder.getXXX();\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName componentName) {\n            }\n        };\n        // 绑定服务\n        Intent bindIntent = new Intent(this, MyService.class);\n        bindService(bindIntent, connection, BIND_AUTO_CREATE); // 绑定，绑定后自动创建服务\n        unbindService(connection);  // 解除绑定\n ```\n\n## 后记\n好饿，写不下去了，今天看了这两个东西，写这个要时间好久，饿的不行了，11 点早午餐到现在，不行了，我要回去吃东西了，后面写的仓促，不过大致能看懂吧。如果不懂可以找找郭神的《第一行代码》看看对应章节。这些东西书籍为主，谷歌为辅，差不多的。饿，饿，饿，曲项向晚餐。—— 2018-03-07 20:51\n\n<center> --- end --- </center>","source":"_posts/Android-广播机制与服务.md","raw":"---\ntitle: Android 广播机制与服务\ndate: 2018-03-07 17:54:23\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](Android-广播机制与服务/main-img.jpg \"image from Momentum\")\n\n## 前言\n今天有兴趣来看看 Android 相关的一些东西，看了一些关于桌面弹窗的内容，然后谷歌看到实现方式大多是使用服务(Service)来实现的，然后想着想着又想到了广播机制(Broadcast)。于是今天稍微写一下关于两者的一点内容，内容不多，偏向于入门，算是用于备忘吧。<!-- more -->\n\n## 广播机制(Broadcast)\n 广播机制，广而播之，通俗来说就是将一个通告向所有地方（频道）发送，在 Android 中，就是向监听了某个广播的接收器发送通告。比如电池电量、时间更变等情况下，会发送对应的广播，如果应用注册了这两个广播，就可以接收到该条广播，从而实现对应的操作。\n 广播分为两种类型：标准广播和有序广播。\n - **标准广播**：完全异步的广播，所有接收器几乎同时收到消息，无顺序，不可截获。是 1:N 的状态。\n - **有序广播**:同步执行的广播，一个时刻只会被一个接收器接收，完成逻辑的执行后方可继续传播，有顺序，可被截获，随后的接收器就不能收到消息了。\n\n\n### 接收广播\n 广播接收器需要注册广播才能接收到广播，并处理逻辑。注册广播有两种方法，动态注册，也即在代码中注册，静态注册则是在 AndroidManifest.xml 中注册。\n\n 接收流程主要为：\n 1. 新建继承自 BroadcastReceiver 的接收器，并重写 onReceive() 方法。\n 2. 使用 IntentFilter 的实例的 addAction() 方法添加对应广播的 action。\n 3. 创建接收器实例，然受使用 registerReceiver 传入参数接收器和 IntentFilter 的实例。动态注册时需要 unregisterReceiver() 取消注册。\n\n 郭神《第一行代码》示范如下(如需进行其他的复杂逻辑操作，可能需要添加权限)：\n ``` java\n    private IntentFilter intentFilter;\n    private NetworkChangeReceiver networkChangeReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        intentFilter = new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n        networkChangeReceiver = new NetworkChangeReceiver();\n        registerReceiver(networkChangeReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver(networkChangeReceiver);\n    }\n\n    class NetworkChangeReceiver extends BroadcastReceiver{\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"network change.\", Toast.LENGTH_SHORT).show();\n        }\n    }\n ```\n\n 动态注册需要在程序启动之后才能接收广播，静态注册则不必启动。静态注册也需要自定义接收器才能实现自己的逻辑。同时要在 AndroidManifest.xml 中注册，在 application 标签内新建子标签如下：\n ``` xml\n        <receiver android:name=\"广播接收器名\"\n            android:enabled=\"true\"\n            android:exported=\"true\" >\n            <intent-filter>\n                <action android:name=\"广播活动\" />\n            </intent-filter>\n        </receiver>\n ```\n\n### 发送广播\n 发送自定义广播流程：\n 1. 定义接收器\n 2. 在 AndroidManifest.xml 中注册接收器，名称为接收器类名，使用自定义广播值作为筛选，\n 3. 使用 sendBroadcast(new Intent(\"广播活动值\")) 发送广播。\n\n 发送有序广播，使用 sendOrderBroadcast(intetn, 权限字符串/null)，可以在筛选器中使用 priority 更改接收广播的优先级，接收器收到后可以截断 abortBroadcast()。\n\n **使用本地广播**：为了避免其他程序接收广播，使用本地广播，广播只能在应用内接收，不能在系统全局接收，作用为保密性强，排外性高（不接受外部应用同一个广播活动值），高效率。\n\n\n 所以要定义一个 LocalBroadcastManager 实例如 localBroadcastManager 用于管理本地广播的接发。发送时使用该 localBroadcastManager.sendBroadcast(new Intent(\"广播活动值\"))，注册/注销时也需要该实例的相应方法，和全局类似，只是有实例发起。不再赘述。\n\n## 服务(Service)\n服务可以认为是在后台运行的任务，使用于执行不需交互并长期运行的任务，切换应用至后台时仍然运行。依赖于创建服务的应用程序进程，杀死该进程则服务停止。服务不会自动开启线程，代码默认运行在主线程中，需在内部手动开启子线程并处理任务，否则可能阻塞主线程。\n\n### 使用流程\n服务的使用流程：\n1. 自定义服务继承于 Service，实现 onBind() 方法。\n2. 可根据需求重写诸如 onCreate()、onStartCommand()、 onDestroy() 等方法。\n3. 在 AndroidManifest.xml 中注册服务，类似于广播，标签为 service，主要属性 enabled 和 exported.\n4. 使用 Intent 启动和停止，如 startService(new Intent(Context, ServiceName.class)), 同理使用 stopService(Intent)。\n\n### 和活动通信\n 使用 onBind() 方法实现，在其中返回一个继承 Binder 类型的实例，如 UploadBinder extends Binder,其中定义可以在外部使用的方法，以进行消息传递。创建 ServiceConnection 匿名类，重写相应方法。绑定服务和解绑服务。\n\n 主要的代码入下：\n ``` java\n         class MyService extends Service{\n            \n            private MyBinder myBinder = new MyBinder();\n\n            class MyBinder extends Binder{\n                public int getXXX(){\n                    // todo:.........\n                    return 0;\n                }\n            }\n            \n            @Nullable\n            @Override\n            public IBinder onBind(Intent intent) {\n                return myBinder;\n            }\n        }\n        \n        // 创建 ServiceConnection 匿名类，并重写两个方法，分别用于连接服务时和断开服务时\n        private ServiceConnection connection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n                myBinder = (MyBinder)iBinder;\n                // 执行 MyBinder 的公开方法，获取信息\n                myBinder.getXXX();\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName componentName) {\n            }\n        };\n        // 绑定服务\n        Intent bindIntent = new Intent(this, MyService.class);\n        bindService(bindIntent, connection, BIND_AUTO_CREATE); // 绑定，绑定后自动创建服务\n        unbindService(connection);  // 解除绑定\n ```\n\n## 后记\n好饿，写不下去了，今天看了这两个东西，写这个要时间好久，饿的不行了，11 点早午餐到现在，不行了，我要回去吃东西了，后面写的仓促，不过大致能看懂吧。如果不懂可以找找郭神的《第一行代码》看看对应章节。这些东西书籍为主，谷歌为辅，差不多的。饿，饿，饿，曲项向晚餐。—— 2018-03-07 20:51\n\n<center> --- end --- </center>","slug":"Android-广播机制与服务","published":1,"updated":"2019-05-10T16:14:30.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxx9000y5cv9y3vkgkmj","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/03/07/Android-广播机制与服务/main-img.jpg\" alt=\"\" title=\"image from Momentum\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天有兴趣来看看 Android 相关的一些东西，看了一些关于桌面弹窗的内容，然后谷歌看到实现方式大多是使用服务(Service)来实现的，然后想着想着又想到了广播机制(Broadcast)。于是今天稍微写一下关于两者的一点内容，内容不多，偏向于入门，算是用于备忘吧。<a id=\"more\"></a></p>\n<h2 id=\"广播机制-Broadcast\"><a href=\"#广播机制-Broadcast\" class=\"headerlink\" title=\"广播机制(Broadcast)\"></a>广播机制(Broadcast)</h2><p> 广播机制，广而播之，通俗来说就是将一个通告向所有地方（频道）发送，在 Android 中，就是向监听了某个广播的接收器发送通告。比如电池电量、时间更变等情况下，会发送对应的广播，如果应用注册了这两个广播，就可以接收到该条广播，从而实现对应的操作。<br> 广播分为两种类型：标准广播和有序广播。</p>\n<ul>\n<li><strong>标准广播</strong>：完全异步的广播，所有接收器几乎同时收到消息，无顺序，不可截获。是 1:N 的状态。</li>\n<li><strong>有序广播</strong>:同步执行的广播，一个时刻只会被一个接收器接收，完成逻辑的执行后方可继续传播，有顺序，可被截获，随后的接收器就不能收到消息了。</li>\n</ul>\n<h3 id=\"接收广播\"><a href=\"#接收广播\" class=\"headerlink\" title=\"接收广播\"></a>接收广播</h3><p> 广播接收器需要注册广播才能接收到广播，并处理逻辑。注册广播有两种方法，动态注册，也即在代码中注册，静态注册则是在 AndroidManifest.xml 中注册。</p>\n<p> 接收流程主要为：</p>\n<ol>\n<li>新建继承自 BroadcastReceiver 的接收器，并重写 onReceive() 方法。</li>\n<li>使用 IntentFilter 的实例的 addAction() 方法添加对应广播的 action。</li>\n<li><p>创建接收器实例，然受使用 registerReceiver 传入参数接收器和 IntentFilter 的实例。动态注册时需要 unregisterReceiver() 取消注册。</p>\n<p>郭神《第一行代码》示范如下(如需进行其他的复杂逻辑操作，可能需要添加权限)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\"><span class=\"keyword\">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    intentFilter = <span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">    intentFilter.addAction(<span class=\"string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>);</span><br><span class=\"line\">    networkChangeReceiver = <span class=\"keyword\">new</span> NetworkChangeReceiver();</span><br><span class=\"line\">    registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    unregisterReceiver(networkChangeReceiver);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">\"network change.\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态注册需要在程序启动之后才能接收广播，静态注册则不必启动。静态注册也需要自定义接收器才能实现自己的逻辑。同时要在 AndroidManifest.xml 中注册，在 application 标签内新建子标签如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"广播接收器名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:enabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"广播活动\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"发送广播\"><a href=\"#发送广播\" class=\"headerlink\" title=\"发送广播\"></a>发送广播</h3><p> 发送自定义广播流程：</p>\n<ol>\n<li>定义接收器</li>\n<li>在 AndroidManifest.xml 中注册接收器，名称为接收器类名，使用自定义广播值作为筛选，</li>\n<li><p>使用 sendBroadcast(new Intent(“广播活动值”)) 发送广播。</p>\n<p>发送有序广播，使用 sendOrderBroadcast(intetn, 权限字符串/null)，可以在筛选器中使用 priority 更改接收广播的优先级，接收器收到后可以截断 abortBroadcast()。</p>\n<p><strong>使用本地广播</strong>：为了避免其他程序接收广播，使用本地广播，广播只能在应用内接收，不能在系统全局接收，作用为保密性强，排外性高（不接受外部应用同一个广播活动值），高效率。</p>\n</li>\n</ol>\n<p> 所以要定义一个 LocalBroadcastManager 实例如 localBroadcastManager 用于管理本地广播的接发。发送时使用该 localBroadcastManager.sendBroadcast(new Intent(“广播活动值”))，注册/注销时也需要该实例的相应方法，和全局类似，只是有实例发起。不再赘述。</p>\n<h2 id=\"服务-Service\"><a href=\"#服务-Service\" class=\"headerlink\" title=\"服务(Service)\"></a>服务(Service)</h2><p>服务可以认为是在后台运行的任务，使用于执行不需交互并长期运行的任务，切换应用至后台时仍然运行。依赖于创建服务的应用程序进程，杀死该进程则服务停止。服务不会自动开启线程，代码默认运行在主线程中，需在内部手动开启子线程并处理任务，否则可能阻塞主线程。</p>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><p>服务的使用流程：</p>\n<ol>\n<li>自定义服务继承于 Service，实现 onBind() 方法。</li>\n<li>可根据需求重写诸如 onCreate()、onStartCommand()、 onDestroy() 等方法。</li>\n<li>在 AndroidManifest.xml 中注册服务，类似于广播，标签为 service，主要属性 enabled 和 exported.</li>\n<li>使用 Intent 启动和停止，如 startService(new Intent(Context, ServiceName.class)), 同理使用 stopService(Intent)。</li>\n</ol>\n<h3 id=\"和活动通信\"><a href=\"#和活动通信\" class=\"headerlink\" title=\"和活动通信\"></a>和活动通信</h3><p> 使用 onBind() 方法实现，在其中返回一个继承 Binder 类型的实例，如 UploadBinder extends Binder,其中定义可以在外部使用的方法，以进行消息传递。创建 ServiceConnection 匿名类，重写相应方法。绑定服务和解绑服务。</p>\n<p> 主要的代码入下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBinder myBinder = <span class=\"keyword\">new</span> MyBinder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBinder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getXXX</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// todo:.........</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 ServiceConnection 匿名类，并重写两个方法，分别用于连接服务时和断开服务时</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class=\"line\">        myBinder = (MyBinder)iBinder;</span><br><span class=\"line\">        <span class=\"comment\">// 执行 MyBinder 的公开方法，获取信息</span></span><br><span class=\"line\">        myBinder.getXXX();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 绑定服务</span></span><br><span class=\"line\">Intent bindIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MyService.class);</span><br><span class=\"line\">bindService(bindIntent, connection, BIND_AUTO_CREATE); <span class=\"comment\">// 绑定，绑定后自动创建服务</span></span><br><span class=\"line\">unbindService(connection);  <span class=\"comment\">// 解除绑定</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>好饿，写不下去了，今天看了这两个东西，写这个要时间好久，饿的不行了，11 点早午餐到现在，不行了，我要回去吃东西了，后面写的仓促，不过大致能看懂吧。如果不懂可以找找郭神的《第一行代码》看看对应章节。这些东西书籍为主，谷歌为辅，差不多的。饿，饿，饿，曲项向晚餐。—— 2018-03-07 20:51</p>\n<center> — end — </center>","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/03/07/Android-广播机制与服务/main-img.jpg\" alt=\"\" title=\"image from Momentum\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天有兴趣来看看 Android 相关的一些东西，看了一些关于桌面弹窗的内容，然后谷歌看到实现方式大多是使用服务(Service)来实现的，然后想着想着又想到了广播机制(Broadcast)。于是今天稍微写一下关于两者的一点内容，内容不多，偏向于入门，算是用于备忘吧。</p>","more":"<p></p>\n<h2 id=\"广播机制-Broadcast\"><a href=\"#广播机制-Broadcast\" class=\"headerlink\" title=\"广播机制(Broadcast)\"></a>广播机制(Broadcast)</h2><p> 广播机制，广而播之，通俗来说就是将一个通告向所有地方（频道）发送，在 Android 中，就是向监听了某个广播的接收器发送通告。比如电池电量、时间更变等情况下，会发送对应的广播，如果应用注册了这两个广播，就可以接收到该条广播，从而实现对应的操作。<br> 广播分为两种类型：标准广播和有序广播。</p>\n<ul>\n<li><strong>标准广播</strong>：完全异步的广播，所有接收器几乎同时收到消息，无顺序，不可截获。是 1:N 的状态。</li>\n<li><strong>有序广播</strong>:同步执行的广播，一个时刻只会被一个接收器接收，完成逻辑的执行后方可继续传播，有顺序，可被截获，随后的接收器就不能收到消息了。</li>\n</ul>\n<h3 id=\"接收广播\"><a href=\"#接收广播\" class=\"headerlink\" title=\"接收广播\"></a>接收广播</h3><p> 广播接收器需要注册广播才能接收到广播，并处理逻辑。注册广播有两种方法，动态注册，也即在代码中注册，静态注册则是在 AndroidManifest.xml 中注册。</p>\n<p> 接收流程主要为：</p>\n<ol>\n<li>新建继承自 BroadcastReceiver 的接收器，并重写 onReceive() 方法。</li>\n<li>使用 IntentFilter 的实例的 addAction() 方法添加对应广播的 action。</li>\n<li><p>创建接收器实例，然受使用 registerReceiver 传入参数接收器和 IntentFilter 的实例。动态注册时需要 unregisterReceiver() 取消注册。</p>\n<p>郭神《第一行代码》示范如下(如需进行其他的复杂逻辑操作，可能需要添加权限)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\"><span class=\"keyword\">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    intentFilter = <span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">    intentFilter.addAction(<span class=\"string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>);</span><br><span class=\"line\">    networkChangeReceiver = <span class=\"keyword\">new</span> NetworkChangeReceiver();</span><br><span class=\"line\">    registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    unregisterReceiver(networkChangeReceiver);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">\"network change.\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态注册需要在程序启动之后才能接收广播，静态注册则不必启动。静态注册也需要自定义接收器才能实现自己的逻辑。同时要在 AndroidManifest.xml 中注册，在 application 标签内新建子标签如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"广播接收器名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:enabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"广播活动\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"发送广播\"><a href=\"#发送广播\" class=\"headerlink\" title=\"发送广播\"></a>发送广播</h3><p> 发送自定义广播流程：</p>\n<ol>\n<li>定义接收器</li>\n<li>在 AndroidManifest.xml 中注册接收器，名称为接收器类名，使用自定义广播值作为筛选，</li>\n<li><p>使用 sendBroadcast(new Intent(“广播活动值”)) 发送广播。</p>\n<p>发送有序广播，使用 sendOrderBroadcast(intetn, 权限字符串/null)，可以在筛选器中使用 priority 更改接收广播的优先级，接收器收到后可以截断 abortBroadcast()。</p>\n<p><strong>使用本地广播</strong>：为了避免其他程序接收广播，使用本地广播，广播只能在应用内接收，不能在系统全局接收，作用为保密性强，排外性高（不接受外部应用同一个广播活动值），高效率。</p>\n</li>\n</ol>\n<p> 所以要定义一个 LocalBroadcastManager 实例如 localBroadcastManager 用于管理本地广播的接发。发送时使用该 localBroadcastManager.sendBroadcast(new Intent(“广播活动值”))，注册/注销时也需要该实例的相应方法，和全局类似，只是有实例发起。不再赘述。</p>\n<h2 id=\"服务-Service\"><a href=\"#服务-Service\" class=\"headerlink\" title=\"服务(Service)\"></a>服务(Service)</h2><p>服务可以认为是在后台运行的任务，使用于执行不需交互并长期运行的任务，切换应用至后台时仍然运行。依赖于创建服务的应用程序进程，杀死该进程则服务停止。服务不会自动开启线程，代码默认运行在主线程中，需在内部手动开启子线程并处理任务，否则可能阻塞主线程。</p>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><p>服务的使用流程：</p>\n<ol>\n<li>自定义服务继承于 Service，实现 onBind() 方法。</li>\n<li>可根据需求重写诸如 onCreate()、onStartCommand()、 onDestroy() 等方法。</li>\n<li>在 AndroidManifest.xml 中注册服务，类似于广播，标签为 service，主要属性 enabled 和 exported.</li>\n<li>使用 Intent 启动和停止，如 startService(new Intent(Context, ServiceName.class)), 同理使用 stopService(Intent)。</li>\n</ol>\n<h3 id=\"和活动通信\"><a href=\"#和活动通信\" class=\"headerlink\" title=\"和活动通信\"></a>和活动通信</h3><p> 使用 onBind() 方法实现，在其中返回一个继承 Binder 类型的实例，如 UploadBinder extends Binder,其中定义可以在外部使用的方法，以进行消息传递。创建 ServiceConnection 匿名类，重写相应方法。绑定服务和解绑服务。</p>\n<p> 主要的代码入下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBinder myBinder = <span class=\"keyword\">new</span> MyBinder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBinder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getXXX</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// todo:.........</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 ServiceConnection 匿名类，并重写两个方法，分别用于连接服务时和断开服务时</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class=\"line\">        myBinder = (MyBinder)iBinder;</span><br><span class=\"line\">        <span class=\"comment\">// 执行 MyBinder 的公开方法，获取信息</span></span><br><span class=\"line\">        myBinder.getXXX();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 绑定服务</span></span><br><span class=\"line\">Intent bindIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MyService.class);</span><br><span class=\"line\">bindService(bindIntent, connection, BIND_AUTO_CREATE); <span class=\"comment\">// 绑定，绑定后自动创建服务</span></span><br><span class=\"line\">unbindService(connection);  <span class=\"comment\">// 解除绑定</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>好饿，写不下去了，今天看了这两个东西，写这个要时间好久，饿的不行了，11 点早午餐到现在，不行了，我要回去吃东西了，后面写的仓促，不过大致能看懂吧。如果不懂可以找找郭神的《第一行代码》看看对应章节。这些东西书籍为主，谷歌为辅，差不多的。饿，饿，饿，曲项向晚餐。—— 2018-03-07 20:51</p>\n<center> — end — </center>"},{"title":"C++ 多态性与虚函数","date":"2017-06-07T17:32:51.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![夜空与宁静](C-多态性与虚函数\\stars in night sky.jpg)\n\n**写在前面：**最近快期末考了，事情真的好多，作业总也写不完的感觉，好久没更新了，只能把自己的学习笔记中一些自己亲自测试过的东西搬到这边来了。这次写的是 C++ 中的多态性和虚函数，也是最近作业中需要使用的东西。知识这种东西吧，只有自己亲身体会以及实践后才能比较清楚，写笔记和不写笔记真的不一样。话不多说，回归主题！\n<!--more-->\n\n## 多态性\n\n多态性是指一个事物具有多个状态。重载函数拥有同一个函数名，不同的函数体，调用同一个函数，分别实现不同的函数体的功能，这也是多态的一个体现。不同的对象，对于同一个消息（函数），有不同的实现行为（功能），这也是多态的一种表现。\n\n多态性从实现上分为静态多态性以及动态多态性。\n\n静态多态性也称为编译时的多态性，在编译时，已经根据变量的类型和个数或者对象所属的类型确定执行什么操作，类似的就是函数的重载，在不同类型或者相同类型中同名函数的调用，除此之外，还有运算符的重载，也是静态多态性的一种。\n\n动态多态性也称为运行时的多态性，在编译时无法知道要处理的是什么操作，只能在程序的执行过程中根据具体的情况来动态的判断要执行的操作。这样多态性一般通过继承和虚函数来实现。\n\n单单使用继承，子类中如果需要使用和父类中同名的函数，则需要重新定义，并且新定义的函数会覆盖父类的函数，父类函数被屏蔽。也即，派生类的对象是不能访问从基类中继承来的同名函数，这也是虚函数的由来，通过虚函数就能动态解决这问题。\n\n先看一下使用继承而不使用虚函数带来的问题。\n\n**testcode.h**\n``` cpp\n#ifndef TESTCODE_H_\t//用于判断是否已经调用了该头文件，避免重复调用错误 #define 保护\n#define TESTCODE_H_\n\nclass Point\n{\nprotected:\ndouble x;\ndouble y;\npublic:\nPoint(double a, double b);\t//声明构造函数\ndouble GetX();\t//声明各类函数\ndouble GetY();\nvoid Print();\n};\n\nclass PointD : public Point\n{\nprotected:\ndouble z;\npublic:\nPointD(double a, double b, double c);\ndouble GetZ();\nvoid Print();\n};\n#endif\t//结束 ifndef\n```\n\n**testcode.cpp**\n``` cpp\n#include \"testcode.h\"\n#include<iostream>\nusing namespace std;\n\nPoint::Point(double a, double b)\n{\nthis->x = a;\nthis->y = b;\n}\n\ndouble Point::GetX()\n{\nreturn this->x;\n}\n\ndouble Point::GetY()\n{\nreturn this->y;\n}\n\nvoid Point::Print()\n{\ncout << \"x = \" << this->x << \"\\ty = \" << this->y << endl;\n}\n\nPointD::PointD(double a, double b, double c) :Point(a, b)\n{\nthis->z = c;\n}\n\ndouble PointD::GetZ()\n{\nreturn this->z;\n}\n\nvoid PointD::Print()\n{\ncout << \"x = \" << this->x << \"\\ty = \" << this->y << \"\\tz = \" << this->z << endl;\n}\n```\n\n**程序入口：test.cpp**\n``` cpp\n#include<iostream>\n#include \"testcode.h\"\nusing namespace std;\n\nvoid main(void)\n{\nPoint a(10, 20), *p;\np = &a;\np->Print();\nPointD b(10, 20, 30);\np = &b;\np->Print();\nsystem(\"pause\");\n}\n/*输出结果\nx = 10 y = 20\nx = 10 y = 20\n*/\n```\n\n从上面的程序可以看到，尽管使用的是基类的指针类型，但是指针指向派生类的时候也没有执行派生类定义的 Print 函数。这并不是我想要的，我想要的是，当指针指向的是派生类的时候，执行的是派生类定义的函数。要解决这个问题就需要使用虚函数。\n\n## 虚函数\n\n虚函数的出现就是为了实现派生类对象能够调用不同派生层次的同名函数。定义如下：\n在基类中：\n``` cpp\npublic:\nvirtual 函数类型 函数名(参数表){...}\n```\n\n运用虚函数解决上述问题。在 ``testcode.h`` 中在 ``void Print()`` 前加上关键字 ``virtual``，表明将把这个函数定义为虚函数，在其后的继承关系中不需要重复添加。只要要求函数名、函数类型、参数列表与基类相同即可，否则渐变成重载。\n\n其他部分不变，而结果则变为了：\n``` cpp\n/*\nx = 10 y = 20\nx = 10 y = 20 z = 30\n*/\n```\n符合预期，动态根据指针指向的类型选择执行怎样的操作。成功。\n\n**这个的笔记是根据书籍《程序设计与算法语言——C++ 程序设计基础》中对于虚函数的介绍而修改过来的。有条件可以读一读。**\n\n\n\n<center> --- end --- </center>\n","source":"_posts/C-多态性与虚函数.md","raw":"---\ntitle: C++ 多态性与虚函数\ndate: 2017-06-08 01:32:51\ntags: [C++, 多态性, 虚函数]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![夜空与宁静](C-多态性与虚函数\\stars in night sky.jpg)\n\n**写在前面：**最近快期末考了，事情真的好多，作业总也写不完的感觉，好久没更新了，只能把自己的学习笔记中一些自己亲自测试过的东西搬到这边来了。这次写的是 C++ 中的多态性和虚函数，也是最近作业中需要使用的东西。知识这种东西吧，只有自己亲身体会以及实践后才能比较清楚，写笔记和不写笔记真的不一样。话不多说，回归主题！\n<!--more-->\n\n## 多态性\n\n多态性是指一个事物具有多个状态。重载函数拥有同一个函数名，不同的函数体，调用同一个函数，分别实现不同的函数体的功能，这也是多态的一个体现。不同的对象，对于同一个消息（函数），有不同的实现行为（功能），这也是多态的一种表现。\n\n多态性从实现上分为静态多态性以及动态多态性。\n\n静态多态性也称为编译时的多态性，在编译时，已经根据变量的类型和个数或者对象所属的类型确定执行什么操作，类似的就是函数的重载，在不同类型或者相同类型中同名函数的调用，除此之外，还有运算符的重载，也是静态多态性的一种。\n\n动态多态性也称为运行时的多态性，在编译时无法知道要处理的是什么操作，只能在程序的执行过程中根据具体的情况来动态的判断要执行的操作。这样多态性一般通过继承和虚函数来实现。\n\n单单使用继承，子类中如果需要使用和父类中同名的函数，则需要重新定义，并且新定义的函数会覆盖父类的函数，父类函数被屏蔽。也即，派生类的对象是不能访问从基类中继承来的同名函数，这也是虚函数的由来，通过虚函数就能动态解决这问题。\n\n先看一下使用继承而不使用虚函数带来的问题。\n\n**testcode.h**\n``` cpp\n#ifndef TESTCODE_H_\t//用于判断是否已经调用了该头文件，避免重复调用错误 #define 保护\n#define TESTCODE_H_\n\nclass Point\n{\nprotected:\ndouble x;\ndouble y;\npublic:\nPoint(double a, double b);\t//声明构造函数\ndouble GetX();\t//声明各类函数\ndouble GetY();\nvoid Print();\n};\n\nclass PointD : public Point\n{\nprotected:\ndouble z;\npublic:\nPointD(double a, double b, double c);\ndouble GetZ();\nvoid Print();\n};\n#endif\t//结束 ifndef\n```\n\n**testcode.cpp**\n``` cpp\n#include \"testcode.h\"\n#include<iostream>\nusing namespace std;\n\nPoint::Point(double a, double b)\n{\nthis->x = a;\nthis->y = b;\n}\n\ndouble Point::GetX()\n{\nreturn this->x;\n}\n\ndouble Point::GetY()\n{\nreturn this->y;\n}\n\nvoid Point::Print()\n{\ncout << \"x = \" << this->x << \"\\ty = \" << this->y << endl;\n}\n\nPointD::PointD(double a, double b, double c) :Point(a, b)\n{\nthis->z = c;\n}\n\ndouble PointD::GetZ()\n{\nreturn this->z;\n}\n\nvoid PointD::Print()\n{\ncout << \"x = \" << this->x << \"\\ty = \" << this->y << \"\\tz = \" << this->z << endl;\n}\n```\n\n**程序入口：test.cpp**\n``` cpp\n#include<iostream>\n#include \"testcode.h\"\nusing namespace std;\n\nvoid main(void)\n{\nPoint a(10, 20), *p;\np = &a;\np->Print();\nPointD b(10, 20, 30);\np = &b;\np->Print();\nsystem(\"pause\");\n}\n/*输出结果\nx = 10 y = 20\nx = 10 y = 20\n*/\n```\n\n从上面的程序可以看到，尽管使用的是基类的指针类型，但是指针指向派生类的时候也没有执行派生类定义的 Print 函数。这并不是我想要的，我想要的是，当指针指向的是派生类的时候，执行的是派生类定义的函数。要解决这个问题就需要使用虚函数。\n\n## 虚函数\n\n虚函数的出现就是为了实现派生类对象能够调用不同派生层次的同名函数。定义如下：\n在基类中：\n``` cpp\npublic:\nvirtual 函数类型 函数名(参数表){...}\n```\n\n运用虚函数解决上述问题。在 ``testcode.h`` 中在 ``void Print()`` 前加上关键字 ``virtual``，表明将把这个函数定义为虚函数，在其后的继承关系中不需要重复添加。只要要求函数名、函数类型、参数列表与基类相同即可，否则渐变成重载。\n\n其他部分不变，而结果则变为了：\n``` cpp\n/*\nx = 10 y = 20\nx = 10 y = 20 z = 30\n*/\n```\n符合预期，动态根据指针指向的类型选择执行怎样的操作。成功。\n\n**这个的笔记是根据书籍《程序设计与算法语言——C++ 程序设计基础》中对于虚函数的介绍而修改过来的。有条件可以读一读。**\n\n\n\n<center> --- end --- </center>\n","slug":"C-多态性与虚函数","published":1,"updated":"2019-05-10T16:14:30.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxa00105cv9gekp1dwc","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/06/08/C-多态性与虚函数/stars in night sky.jpg\" alt=\"夜空与宁静\"></p>\n<p><strong>写在前面：</strong>最近快期末考了，事情真的好多，作业总也写不完的感觉，好久没更新了，只能把自己的学习笔记中一些自己亲自测试过的东西搬到这边来了。这次写的是 C++ 中的多态性和虚函数，也是最近作业中需要使用的东西。知识这种东西吧，只有自己亲身体会以及实践后才能比较清楚，写笔记和不写笔记真的不一样。话不多说，回归主题！<br><a id=\"more\"></a></p>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h2><p>多态性是指一个事物具有多个状态。重载函数拥有同一个函数名，不同的函数体，调用同一个函数，分别实现不同的函数体的功能，这也是多态的一个体现。不同的对象，对于同一个消息（函数），有不同的实现行为（功能），这也是多态的一种表现。</p>\n<p>多态性从实现上分为静态多态性以及动态多态性。</p>\n<p>静态多态性也称为编译时的多态性，在编译时，已经根据变量的类型和个数或者对象所属的类型确定执行什么操作，类似的就是函数的重载，在不同类型或者相同类型中同名函数的调用，除此之外，还有运算符的重载，也是静态多态性的一种。</p>\n<p>动态多态性也称为运行时的多态性，在编译时无法知道要处理的是什么操作，只能在程序的执行过程中根据具体的情况来动态的判断要执行的操作。这样多态性一般通过继承和虚函数来实现。</p>\n<p>单单使用继承，子类中如果需要使用和父类中同名的函数，则需要重新定义，并且新定义的函数会覆盖父类的函数，父类函数被屏蔽。也即，派生类的对象是不能访问从基类中继承来的同名函数，这也是虚函数的由来，通过虚函数就能动态解决这问题。</p>\n<p>先看一下使用继承而不使用虚函数带来的问题。</p>\n<p><strong>testcode.h</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> TESTCODE_H_\t<span class=\"comment\">//用于判断是否已经调用了该头文件，避免重复调用错误 #define 保护</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TESTCODE_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">double</span> x;</span><br><span class=\"line\"><span class=\"keyword\">double</span> y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">Point(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b);\t<span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetX</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//声明各类函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetY</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PointD</span> :</span> <span class=\"keyword\">public</span> Point</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">double</span> z;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">PointD(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetZ</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t<span class=\"comment\">//结束 ifndef</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>testcode.cpp</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"testcode.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Point::Point(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;x = a;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;y = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> Point::GetX()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> Point::GetY()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Point::Print()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;x &lt;&lt; <span class=\"string\">\"\\ty = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PointD::PointD(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c) :Point(a, b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;z = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> PointD::GetZ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PointD::Print()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;x &lt;&lt; <span class=\"string\">\"\\ty = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;y &lt;&lt; <span class=\"string\">\"\\tz = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;z &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>程序入口：test.cpp</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"testcode.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Point a(10, 20), *p;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">p-&gt;Print();</span><br><span class=\"line\"><span class=\"function\">PointD <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">p = &amp;b;</span><br><span class=\"line\">p-&gt;Print();</span><br><span class=\"line\">system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>从上面的程序可以看到，尽管使用的是基类的指针类型，但是指针指向派生类的时候也没有执行派生类定义的 Print 函数。这并不是我想要的，我想要的是，当指针指向的是派生类的时候，执行的是派生类定义的函数。要解决这个问题就需要使用虚函数。</p>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>虚函数的出现就是为了实现派生类对象能够调用不同派生层次的同名函数。定义如下：<br>在基类中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"keyword\">virtual</span> 函数类型 函数名(参数表)&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运用虚函数解决上述问题。在 <code>testcode.h</code> 中在 <code>void Print()</code> 前加上关键字 <code>virtual</code>，表明将把这个函数定义为虚函数，在其后的继承关系中不需要重复添加。只要要求函数名、函数类型、参数列表与基类相同即可，否则渐变成重载。</p>\n<p>其他部分不变，而结果则变为了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20 z = 30</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>符合预期，动态根据指针指向的类型选择执行怎样的操作。成功。</p>\n<p><strong>这个的笔记是根据书籍《程序设计与算法语言——C++ 程序设计基础》中对于虚函数的介绍而修改过来的。有条件可以读一读。</strong></p>\n<center> — end — </center>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/06/08/C-多态性与虚函数/stars in night sky.jpg\" alt=\"夜空与宁静\"></p>\n<p><strong>写在前面：</strong>最近快期末考了，事情真的好多，作业总也写不完的感觉，好久没更新了，只能把自己的学习笔记中一些自己亲自测试过的东西搬到这边来了。这次写的是 C++ 中的多态性和虚函数，也是最近作业中需要使用的东西。知识这种东西吧，只有自己亲身体会以及实践后才能比较清楚，写笔记和不写笔记真的不一样。话不多说，回归主题！<br></p>","more":"<p></p>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h2><p>多态性是指一个事物具有多个状态。重载函数拥有同一个函数名，不同的函数体，调用同一个函数，分别实现不同的函数体的功能，这也是多态的一个体现。不同的对象，对于同一个消息（函数），有不同的实现行为（功能），这也是多态的一种表现。</p>\n<p>多态性从实现上分为静态多态性以及动态多态性。</p>\n<p>静态多态性也称为编译时的多态性，在编译时，已经根据变量的类型和个数或者对象所属的类型确定执行什么操作，类似的就是函数的重载，在不同类型或者相同类型中同名函数的调用，除此之外，还有运算符的重载，也是静态多态性的一种。</p>\n<p>动态多态性也称为运行时的多态性，在编译时无法知道要处理的是什么操作，只能在程序的执行过程中根据具体的情况来动态的判断要执行的操作。这样多态性一般通过继承和虚函数来实现。</p>\n<p>单单使用继承，子类中如果需要使用和父类中同名的函数，则需要重新定义，并且新定义的函数会覆盖父类的函数，父类函数被屏蔽。也即，派生类的对象是不能访问从基类中继承来的同名函数，这也是虚函数的由来，通过虚函数就能动态解决这问题。</p>\n<p>先看一下使用继承而不使用虚函数带来的问题。</p>\n<p><strong>testcode.h</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> TESTCODE_H_\t<span class=\"comment\">//用于判断是否已经调用了该头文件，避免重复调用错误 #define 保护</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TESTCODE_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">double</span> x;</span><br><span class=\"line\"><span class=\"keyword\">double</span> y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">Point(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b);\t<span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetX</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//声明各类函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetY</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PointD</span> :</span> <span class=\"keyword\">public</span> Point</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">double</span> z;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">PointD(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetZ</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t<span class=\"comment\">//结束 ifndef</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>testcode.cpp</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"testcode.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Point::Point(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;x = a;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;y = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> Point::GetX()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> Point::GetY()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Point::Print()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;x &lt;&lt; <span class=\"string\">\"\\ty = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PointD::PointD(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c) :Point(a, b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;z = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> PointD::GetZ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PointD::Print()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;x &lt;&lt; <span class=\"string\">\"\\ty = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;y &lt;&lt; <span class=\"string\">\"\\tz = \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;z &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>程序入口：test.cpp</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"testcode.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Point a(10, 20), *p;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">p-&gt;Print();</span><br><span class=\"line\"><span class=\"function\">PointD <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">p = &amp;b;</span><br><span class=\"line\">p-&gt;Print();</span><br><span class=\"line\">system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>从上面的程序可以看到，尽管使用的是基类的指针类型，但是指针指向派生类的时候也没有执行派生类定义的 Print 函数。这并不是我想要的，我想要的是，当指针指向的是派生类的时候，执行的是派生类定义的函数。要解决这个问题就需要使用虚函数。</p>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>虚函数的出现就是为了实现派生类对象能够调用不同派生层次的同名函数。定义如下：<br>在基类中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"keyword\">virtual</span> 函数类型 函数名(参数表)&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运用虚函数解决上述问题。在 <code>testcode.h</code> 中在 <code>void Print()</code> 前加上关键字 <code>virtual</code>，表明将把这个函数定义为虚函数，在其后的继承关系中不需要重复添加。只要要求函数名、函数类型、参数列表与基类相同即可，否则渐变成重载。</p>\n<p>其他部分不变，而结果则变为了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20</span></span><br><span class=\"line\"><span class=\"comment\">x = 10 y = 20 z = 30</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>符合预期，动态根据指针指向的类型选择执行怎样的操作。成功。</p>\n<p><strong>这个的笔记是根据书籍《程序设计与算法语言——C++ 程序设计基础》中对于虚函数的介绍而修改过来的。有条件可以读一读。</strong></p>\n<center> — end — </center>"},{"title":"Echarts 的基本使用和 Android 连接 Mysql 数据库","date":"2018-01-29T11:24:46.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![](Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg)\n\n好久好久没有更新博客了。。。\n\n大学生活中的最后一个假期如期而至，这次回家好像比往常有更多学习的心思，可能时因为下学期准备毕业，准备找工作的原因？好像也不是很强烈。不过，回家一个人也是好无聊的样子，于是今天写了一些东西，虽然都是比较简单的东西吧。<!--more-->\n\n进入了少网络的环境下，更容易专注于做一些事情。今天下午做了一些在 Android 中使用 Echarts 和连接 Mysql 数据库的尝试。其实也是之前答应了朋友要和他一起做一个 App 的原因。趁着无聊就来学习一下。\n\n## 使用 Echarts\n### Echarts 是什么\nEcharts 是由百度公司开发的一个轻量级的可以轻松实现直观、可交互、高度自定义图表和可视化的 canvas 库，基于 zrender 和轻量级的 JavaScript 语言。其官方网址为 [Echarts](https://echarts.baidu.com)，在这里就不再多说，官网比我说的更加详细。\n\n### 使用 Echarts (附加 JS 和 Android 应用的交互)\n先从官网中下载最新的版本，[戳这里](https://echarts.baidu.com/tutorial.html)，同时还有如何操作的介绍。随后引入 Echarts，使用 echarts.init 方法初始化一个实例，使用 setOption 方法生成图表。如下是一个简单的示例：\n``` html\n<!DOCTYPE html>\n<html style=\"height: 100%\">\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body style=\"height: 100%; margin: 0\">\n\n<div id=\"container\" style=\"height: 100%\"></div>\n\n<script type=\"text/javascript\" src=\"http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js\"></script>\n<script type=\"text/javascript\">\n       var dom = document.getElementById(\"container\");\n       var myChart = echarts.init(dom);\n       var option = {\n              title:{\n                     text:'入门示例'\n              },\n              tooltip:{},\n              legend:{\n                     data:['销量']\n              },\n              xAxis:{\n                     data:[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n              },\n              yAxis:{},\n              series:[{\n                     name:'销量',\n                     type:'bar',\n                     data:[5, 20, 36, 10, 15, 20]\n              }]\n       };\n       myChart.setOption(option);\n</script>\n</body>\n</html>\n```\n\n概括来说就是先获取一个实例，生成一个对应的 option，使用 setOption 方法，成图，over！\n\n今天还涉及一个部分就是动态加载数据的问题，需要在手机上点击之后更改图表，所以使用一个 JavaScript 函数来实现，在上述代码中自定义的 JavaScript 脚本部分加入如下代码：\n``` javascript\n       \tfunction calljs(data){\t\t// 函数记得加 function 关键字\n       \t    var dom = document.getElementById(\"container\");\n       \t\tvar myChart = echarts.init(dom);\n       \t\t// 获取横纵数据\n       \t\tvar xList = data.map(function (item) {\n       \t\t    return item[0];\n       \t\t});\n       \t\tvar valueList = data.map(function (item) {\n       \t\t    return item[1];\n       \t\t});\n       \t    var option = {\n       \t\ttitle:{\n       \t\t\ttext:'入门示例'\n       \t\t},\n       \t\ttooltip:{},\n       \t\tlegend:{\n       \t\t\tdata:['销量']\n       \t\t},\n       \t\txAxis:{\n       \t\t\tdata:xList\n       \t\t},\n       \t\tyAxis:{},\n       \t\tseries:[{\n       \t\t\tname:'销量',\n       \t\t\ttype:'bar',\n       \t\t\tdata:valueList\n       \t\t}]\n       \t};\n       \tmyChart.setOption(option);\n       \t}\n\n```\n然后在 Android App 中加入如下代码：\n``` java\n    String data = \"[[\\\"衬衫\\\",5],[\\\"羊毛衫\\\",20],[\\\"雪纺衫\\\",36],[\\\"裤子\\\",10],[\\\"高跟鞋\\\",15],[\\\"袜子\\\",20]]\";\n    webView.loadUrl(MessageFormat.format(\"javascript:calljs({0})\", data));\t// 以参数 data 执行脚本方法 calljs。不必新开线程，webView 自动在子线程中使用\n```\n以上是我今天需要使用的部分，关于 Android 和 JS 的交互，可以移步[Android：你要的 WebView 与 JS 交互方式都在这里了](http://blog.csdn.net/carson_ho/article/details/64904691)查看。\n\n## 连接 Mysql 数据库\n下午的另一个事情就是连接 MySQL 数据库，并读取信息。实现步骤如下：\n 1. 下载 MySQL 和 Java 连接器的包，如我使用的是 mysql-connector-java-5.1.28.jar。\n 2. 主要代码如下，如果提示使用 try/catch 的，请自行添加，此处把流程过一遍：\n``` java\nString DRIVER = \"com.mysql.jdbc.Driver\";\nString USER = \"username\";\nString PASS = \"password\";\nString URL = \"jdbc:mysql://123.207.110.110:3306/yourDBName\";\nString sql = \"select * from ......\"\nClass.forName(DRIVER)\nConnection connection = DriverManager.getConnection(URL, USER, PASS);\nStatement statement = connection.createStatement();\nResultSet resultSet = statement.executeQuery(sql);\nwhile(resultSet.next())\n{\n\tString param1 = resultSet.getString(1);\t\t// 读取记录，记录初始字段从 1 开始，不是从 0 开始\n\t// Todo: anything...\n}\nresultSet.close();\nstatement.close();\nconnection.close();\n```\n上面的操作，有比较多的是要在子线程中实现的，如 getConnection 和 executeQuery。另外，要在读取结束之后再关闭连接，注意顺序，否之会报错。反正，报错了看是什么错误，解决一下应该都没问题。\n\n### 后记\n这其实是在假期写的文章，结果没有后续，留到现在才发布...[2018年3月4日 09点32分]\n\n<center> --- end --- </center>\n\n---\n\n","source":"_posts/Echarts-的基本使用和-Android-连接-Mysql-数据库.md","raw":"---\ntitle: Echarts 的基本使用和 Android 连接 Mysql 数据库\ndate: 2018-01-29 19:24:46\ntags: [Echarts, Mysql]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![](Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg)\n\n好久好久没有更新博客了。。。\n\n大学生活中的最后一个假期如期而至，这次回家好像比往常有更多学习的心思，可能时因为下学期准备毕业，准备找工作的原因？好像也不是很强烈。不过，回家一个人也是好无聊的样子，于是今天写了一些东西，虽然都是比较简单的东西吧。<!--more-->\n\n进入了少网络的环境下，更容易专注于做一些事情。今天下午做了一些在 Android 中使用 Echarts 和连接 Mysql 数据库的尝试。其实也是之前答应了朋友要和他一起做一个 App 的原因。趁着无聊就来学习一下。\n\n## 使用 Echarts\n### Echarts 是什么\nEcharts 是由百度公司开发的一个轻量级的可以轻松实现直观、可交互、高度自定义图表和可视化的 canvas 库，基于 zrender 和轻量级的 JavaScript 语言。其官方网址为 [Echarts](https://echarts.baidu.com)，在这里就不再多说，官网比我说的更加详细。\n\n### 使用 Echarts (附加 JS 和 Android 应用的交互)\n先从官网中下载最新的版本，[戳这里](https://echarts.baidu.com/tutorial.html)，同时还有如何操作的介绍。随后引入 Echarts，使用 echarts.init 方法初始化一个实例，使用 setOption 方法生成图表。如下是一个简单的示例：\n``` html\n<!DOCTYPE html>\n<html style=\"height: 100%\">\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body style=\"height: 100%; margin: 0\">\n\n<div id=\"container\" style=\"height: 100%\"></div>\n\n<script type=\"text/javascript\" src=\"http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js\"></script>\n<script type=\"text/javascript\">\n       var dom = document.getElementById(\"container\");\n       var myChart = echarts.init(dom);\n       var option = {\n              title:{\n                     text:'入门示例'\n              },\n              tooltip:{},\n              legend:{\n                     data:['销量']\n              },\n              xAxis:{\n                     data:[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n              },\n              yAxis:{},\n              series:[{\n                     name:'销量',\n                     type:'bar',\n                     data:[5, 20, 36, 10, 15, 20]\n              }]\n       };\n       myChart.setOption(option);\n</script>\n</body>\n</html>\n```\n\n概括来说就是先获取一个实例，生成一个对应的 option，使用 setOption 方法，成图，over！\n\n今天还涉及一个部分就是动态加载数据的问题，需要在手机上点击之后更改图表，所以使用一个 JavaScript 函数来实现，在上述代码中自定义的 JavaScript 脚本部分加入如下代码：\n``` javascript\n       \tfunction calljs(data){\t\t// 函数记得加 function 关键字\n       \t    var dom = document.getElementById(\"container\");\n       \t\tvar myChart = echarts.init(dom);\n       \t\t// 获取横纵数据\n       \t\tvar xList = data.map(function (item) {\n       \t\t    return item[0];\n       \t\t});\n       \t\tvar valueList = data.map(function (item) {\n       \t\t    return item[1];\n       \t\t});\n       \t    var option = {\n       \t\ttitle:{\n       \t\t\ttext:'入门示例'\n       \t\t},\n       \t\ttooltip:{},\n       \t\tlegend:{\n       \t\t\tdata:['销量']\n       \t\t},\n       \t\txAxis:{\n       \t\t\tdata:xList\n       \t\t},\n       \t\tyAxis:{},\n       \t\tseries:[{\n       \t\t\tname:'销量',\n       \t\t\ttype:'bar',\n       \t\t\tdata:valueList\n       \t\t}]\n       \t};\n       \tmyChart.setOption(option);\n       \t}\n\n```\n然后在 Android App 中加入如下代码：\n``` java\n    String data = \"[[\\\"衬衫\\\",5],[\\\"羊毛衫\\\",20],[\\\"雪纺衫\\\",36],[\\\"裤子\\\",10],[\\\"高跟鞋\\\",15],[\\\"袜子\\\",20]]\";\n    webView.loadUrl(MessageFormat.format(\"javascript:calljs({0})\", data));\t// 以参数 data 执行脚本方法 calljs。不必新开线程，webView 自动在子线程中使用\n```\n以上是我今天需要使用的部分，关于 Android 和 JS 的交互，可以移步[Android：你要的 WebView 与 JS 交互方式都在这里了](http://blog.csdn.net/carson_ho/article/details/64904691)查看。\n\n## 连接 Mysql 数据库\n下午的另一个事情就是连接 MySQL 数据库，并读取信息。实现步骤如下：\n 1. 下载 MySQL 和 Java 连接器的包，如我使用的是 mysql-connector-java-5.1.28.jar。\n 2. 主要代码如下，如果提示使用 try/catch 的，请自行添加，此处把流程过一遍：\n``` java\nString DRIVER = \"com.mysql.jdbc.Driver\";\nString USER = \"username\";\nString PASS = \"password\";\nString URL = \"jdbc:mysql://123.207.110.110:3306/yourDBName\";\nString sql = \"select * from ......\"\nClass.forName(DRIVER)\nConnection connection = DriverManager.getConnection(URL, USER, PASS);\nStatement statement = connection.createStatement();\nResultSet resultSet = statement.executeQuery(sql);\nwhile(resultSet.next())\n{\n\tString param1 = resultSet.getString(1);\t\t// 读取记录，记录初始字段从 1 开始，不是从 0 开始\n\t// Todo: anything...\n}\nresultSet.close();\nstatement.close();\nconnection.close();\n```\n上面的操作，有比较多的是要在子线程中实现的，如 getConnection 和 executeQuery。另外，要在读取结束之后再关闭连接，注意顺序，否之会报错。反正，报错了看是什么错误，解决一下应该都没问题。\n\n### 后记\n这其实是在假期写的文章，结果没有后续，留到现在才发布...[2018年3月4日 09点32分]\n\n<center> --- end --- </center>\n\n---\n\n","slug":"Echarts-的基本使用和-Android-连接-Mysql-数据库","published":1,"updated":"2019-05-10T16:14:30.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxf00145cv9s8fbd58n","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/01/29/Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg\" alt=\"\"></p>\n<p>好久好久没有更新博客了。。。</p>\n<p>大学生活中的最后一个假期如期而至，这次回家好像比往常有更多学习的心思，可能时因为下学期准备毕业，准备找工作的原因？好像也不是很强烈。不过，回家一个人也是好无聊的样子，于是今天写了一些东西，虽然都是比较简单的东西吧。<a id=\"more\"></a></p>\n<p>进入了少网络的环境下，更容易专注于做一些事情。今天下午做了一些在 Android 中使用 Echarts 和连接 Mysql 数据库的尝试。其实也是之前答应了朋友要和他一起做一个 App 的原因。趁着无聊就来学习一下。</p>\n<h2 id=\"使用-Echarts\"><a href=\"#使用-Echarts\" class=\"headerlink\" title=\"使用 Echarts\"></a>使用 Echarts</h2><h3 id=\"Echarts-是什么\"><a href=\"#Echarts-是什么\" class=\"headerlink\" title=\"Echarts 是什么\"></a>Echarts 是什么</h3><p>Echarts 是由百度公司开发的一个轻量级的可以轻松实现直观、可交互、高度自定义图表和可视化的 canvas 库，基于 zrender 和轻量级的 JavaScript 语言。其官方网址为 <a href=\"https://echarts.baidu.com\" target=\"_blank\" rel=\"noopener\">Echarts</a>，在这里就不再多说，官网比我说的更加详细。</p>\n<h3 id=\"使用-Echarts-附加-JS-和-Android-应用的交互\"><a href=\"#使用-Echarts-附加-JS-和-Android-应用的交互\" class=\"headerlink\" title=\"使用 Echarts (附加 JS 和 Android 应用的交互)\"></a>使用 Echarts (附加 JS 和 Android 应用的交互)</h3><p>先从官网中下载最新的版本，<a href=\"https://echarts.baidu.com/tutorial.html\" target=\"_blank\" rel=\"noopener\">戳这里</a>，同时还有如何操作的介绍。随后引入 Echarts，使用 echarts.init 方法初始化一个实例，使用 setOption 方法生成图表。如下是一个简单的示例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%; margin: 0\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">       var dom = document.getElementById(\"container\");</span></span><br><span class=\"line\"><span class=\"undefined\">       var myChart = echarts.init(dom);</span></span><br><span class=\"line\"><span class=\"undefined\">       var option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              title:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     text:'入门示例'</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              tooltip:&#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              legend:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:['销量']</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              xAxis:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              yAxis:&#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              series:[&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     name:'销量',</span></span><br><span class=\"line\"><span class=\"undefined\">                     type:'bar',</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:[5, 20, 36, 10, 15, 20]</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">       &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">       myChart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>概括来说就是先获取一个实例，生成一个对应的 option，使用 setOption 方法，成图，over！</p>\n<p>今天还涉及一个部分就是动态加载数据的问题，需要在手机上点击之后更改图表，所以使用一个 JavaScript 函数来实现，在上述代码中自定义的 JavaScript 脚本部分加入如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calljs</span>(<span class=\"params\">data</span>)</span>&#123;\t\t<span class=\"comment\">// 函数记得加 function 关键字</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> myChart = echarts.init(dom);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取横纵数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xList = data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> item[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> valueList = data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">\ttitle:&#123;</span><br><span class=\"line\">\t\ttext:<span class=\"string\">'入门示例'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttooltip:&#123;&#125;,</span><br><span class=\"line\">\tlegend:&#123;</span><br><span class=\"line\">\t\tdata:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\txAxis:&#123;</span><br><span class=\"line\">\t\tdata:xList</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tyAxis:&#123;&#125;,</span><br><span class=\"line\">\tseries:[&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'销量'</span>,</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'bar'</span>,</span><br><span class=\"line\">\t\tdata:valueList</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myChart.setOption(option);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 Android App 中加入如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String data = <span class=\"string\">\"[[\\\"衬衫\\\",5],[\\\"羊毛衫\\\",20],[\\\"雪纺衫\\\",36],[\\\"裤子\\\",10],[\\\"高跟鞋\\\",15],[\\\"袜子\\\",20]]\"</span>;</span><br><span class=\"line\">webView.loadUrl(MessageFormat.format(<span class=\"string\">\"javascript:calljs(&#123;0&#125;)\"</span>, data));\t<span class=\"comment\">// 以参数 data 执行脚本方法 calljs。不必新开线程，webView 自动在子线程中使用</span></span><br></pre></td></tr></table></figure></p>\n<p>以上是我今天需要使用的部分，关于 Android 和 JS 的交互，可以移步<a href=\"http://blog.csdn.net/carson_ho/article/details/64904691\" target=\"_blank\" rel=\"noopener\">Android：你要的 WebView 与 JS 交互方式都在这里了</a>查看。</p>\n<h2 id=\"连接-Mysql-数据库\"><a href=\"#连接-Mysql-数据库\" class=\"headerlink\" title=\"连接 Mysql 数据库\"></a>连接 Mysql 数据库</h2><p>下午的另一个事情就是连接 MySQL 数据库，并读取信息。实现步骤如下：</p>\n<ol>\n<li>下载 MySQL 和 Java 连接器的包，如我使用的是 mysql-connector-java-5.1.28.jar。</li>\n<li>主要代码如下，如果提示使用 try/catch 的，请自行添加，此处把流程过一遍：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String DRIVER = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\">String USER = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">String PASS = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\">String URL = <span class=\"string\">\"jdbc:mysql://123.207.110.110:3306/yourDBName\"</span>;</span><br><span class=\"line\">String sql = <span class=\"string\">\"select * from ......\"</span></span><br><span class=\"line\">Class.forName(DRIVER)</span><br><span class=\"line\">Connection connection = DriverManager.getConnection(URL, USER, PASS);</span><br><span class=\"line\">Statement statement = connection.createStatement();</span><br><span class=\"line\">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(resultSet.next())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tString param1 = resultSet.getString(<span class=\"number\">1</span>);\t\t<span class=\"comment\">// 读取记录，记录初始字段从 1 开始，不是从 0 开始</span></span><br><span class=\"line\">\t<span class=\"comment\">// Todo: anything...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultSet.close();</span><br><span class=\"line\">statement.close();</span><br><span class=\"line\">connection.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的操作，有比较多的是要在子线程中实现的，如 getConnection 和 executeQuery。另外，要在读取结束之后再关闭连接，注意顺序，否之会报错。反正，报错了看是什么错误，解决一下应该都没问题。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>这其实是在假期写的文章，结果没有后续，留到现在才发布…[2018年3月4日 09点32分]</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2018/01/29/Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg\" alt=\"\"></p>\n<p>好久好久没有更新博客了。。。</p>\n<p>大学生活中的最后一个假期如期而至，这次回家好像比往常有更多学习的心思，可能时因为下学期准备毕业，准备找工作的原因？好像也不是很强烈。不过，回家一个人也是好无聊的样子，于是今天写了一些东西，虽然都是比较简单的东西吧。</p>","more":"<p></p>\n<p>进入了少网络的环境下，更容易专注于做一些事情。今天下午做了一些在 Android 中使用 Echarts 和连接 Mysql 数据库的尝试。其实也是之前答应了朋友要和他一起做一个 App 的原因。趁着无聊就来学习一下。</p>\n<h2 id=\"使用-Echarts\"><a href=\"#使用-Echarts\" class=\"headerlink\" title=\"使用 Echarts\"></a>使用 Echarts</h2><h3 id=\"Echarts-是什么\"><a href=\"#Echarts-是什么\" class=\"headerlink\" title=\"Echarts 是什么\"></a>Echarts 是什么</h3><p>Echarts 是由百度公司开发的一个轻量级的可以轻松实现直观、可交互、高度自定义图表和可视化的 canvas 库，基于 zrender 和轻量级的 JavaScript 语言。其官方网址为 <a href=\"https://echarts.baidu.com\" target=\"_blank\" rel=\"noopener\">Echarts</a>，在这里就不再多说，官网比我说的更加详细。</p>\n<h3 id=\"使用-Echarts-附加-JS-和-Android-应用的交互\"><a href=\"#使用-Echarts-附加-JS-和-Android-应用的交互\" class=\"headerlink\" title=\"使用 Echarts (附加 JS 和 Android 应用的交互)\"></a>使用 Echarts (附加 JS 和 Android 应用的交互)</h3><p>先从官网中下载最新的版本，<a href=\"https://echarts.baidu.com/tutorial.html\" target=\"_blank\" rel=\"noopener\">戳这里</a>，同时还有如何操作的介绍。随后引入 Echarts，使用 echarts.init 方法初始化一个实例，使用 setOption 方法生成图表。如下是一个简单的示例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%; margin: 0\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">       var dom = document.getElementById(\"container\");</span></span><br><span class=\"line\"><span class=\"undefined\">       var myChart = echarts.init(dom);</span></span><br><span class=\"line\"><span class=\"undefined\">       var option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              title:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     text:'入门示例'</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              tooltip:&#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              legend:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:['销量']</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              xAxis:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              yAxis:&#123;&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">              series:[&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                     name:'销量',</span></span><br><span class=\"line\"><span class=\"undefined\">                     type:'bar',</span></span><br><span class=\"line\"><span class=\"undefined\">                     data:[5, 20, 36, 10, 15, 20]</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">       &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">       myChart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>概括来说就是先获取一个实例，生成一个对应的 option，使用 setOption 方法，成图，over！</p>\n<p>今天还涉及一个部分就是动态加载数据的问题，需要在手机上点击之后更改图表，所以使用一个 JavaScript 函数来实现，在上述代码中自定义的 JavaScript 脚本部分加入如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calljs</span>(<span class=\"params\">data</span>)</span>&#123;\t\t<span class=\"comment\">// 函数记得加 function 关键字</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> myChart = echarts.init(dom);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取横纵数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xList = data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> item[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> valueList = data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">\ttitle:&#123;</span><br><span class=\"line\">\t\ttext:<span class=\"string\">'入门示例'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttooltip:&#123;&#125;,</span><br><span class=\"line\">\tlegend:&#123;</span><br><span class=\"line\">\t\tdata:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\txAxis:&#123;</span><br><span class=\"line\">\t\tdata:xList</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tyAxis:&#123;&#125;,</span><br><span class=\"line\">\tseries:[&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'销量'</span>,</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'bar'</span>,</span><br><span class=\"line\">\t\tdata:valueList</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myChart.setOption(option);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 Android App 中加入如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String data = <span class=\"string\">\"[[\\\"衬衫\\\",5],[\\\"羊毛衫\\\",20],[\\\"雪纺衫\\\",36],[\\\"裤子\\\",10],[\\\"高跟鞋\\\",15],[\\\"袜子\\\",20]]\"</span>;</span><br><span class=\"line\">webView.loadUrl(MessageFormat.format(<span class=\"string\">\"javascript:calljs(&#123;0&#125;)\"</span>, data));\t<span class=\"comment\">// 以参数 data 执行脚本方法 calljs。不必新开线程，webView 自动在子线程中使用</span></span><br></pre></td></tr></table></figure></p>\n<p>以上是我今天需要使用的部分，关于 Android 和 JS 的交互，可以移步<a href=\"http://blog.csdn.net/carson_ho/article/details/64904691\" target=\"_blank\" rel=\"noopener\">Android：你要的 WebView 与 JS 交互方式都在这里了</a>查看。</p>\n<h2 id=\"连接-Mysql-数据库\"><a href=\"#连接-Mysql-数据库\" class=\"headerlink\" title=\"连接 Mysql 数据库\"></a>连接 Mysql 数据库</h2><p>下午的另一个事情就是连接 MySQL 数据库，并读取信息。实现步骤如下：</p>\n<ol>\n<li>下载 MySQL 和 Java 连接器的包，如我使用的是 mysql-connector-java-5.1.28.jar。</li>\n<li>主要代码如下，如果提示使用 try/catch 的，请自行添加，此处把流程过一遍：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String DRIVER = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\">String USER = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">String PASS = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\">String URL = <span class=\"string\">\"jdbc:mysql://123.207.110.110:3306/yourDBName\"</span>;</span><br><span class=\"line\">String sql = <span class=\"string\">\"select * from ......\"</span></span><br><span class=\"line\">Class.forName(DRIVER)</span><br><span class=\"line\">Connection connection = DriverManager.getConnection(URL, USER, PASS);</span><br><span class=\"line\">Statement statement = connection.createStatement();</span><br><span class=\"line\">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(resultSet.next())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tString param1 = resultSet.getString(<span class=\"number\">1</span>);\t\t<span class=\"comment\">// 读取记录，记录初始字段从 1 开始，不是从 0 开始</span></span><br><span class=\"line\">\t<span class=\"comment\">// Todo: anything...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultSet.close();</span><br><span class=\"line\">statement.close();</span><br><span class=\"line\">connection.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的操作，有比较多的是要在子线程中实现的，如 getConnection 和 executeQuery。另外，要在读取结束之后再关闭连接，注意顺序，否之会报错。反正，报错了看是什么错误，解决一下应该都没问题。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>这其实是在假期写的文章，结果没有后续，留到现在才发布…[2018年3月4日 09点32分]</p>\n<center> — end — </center>\n\n<hr>"},{"title":"Markdown语法的基本使用简介","date":"2017-03-04T00:58:43.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](Markdown语法的基本使用简介/beautifulnature.jpg)\n\nMarkdown是一种轻量级标记语言，创始人为John Gruber。Markdown目前是大多数博客爱好者以及作家比较钟爱的语言。本篇是一篇用Markdown语言写的介绍Markdown语法的博客。\n<!--more-->\n经常使用的Markdown语法主要有以下一些内容，包括标题、段落和换行、区块引用、列表、代码区块、分隔线、连接、强调、代码、图片等。只要掌握了这些内容，基本的一些写作就已经没有问题了。\n\n为了写的更精细一些，以及不让自己觉得麻烦，所以将这个简介分为几次来写。本次主要介绍的是标题、段落和换行、区块引用、列表，其余的留到下次介绍。\n\n## 标题\nMarkdown语法的标题可以有6级，使用#号对标题进行定级。把#号写在标题前，数目从1个到6个，表示不同的阶数。如下所示：\n<table><tr><td bgcolor=#E4E7E7>  # 这是1阶  \n  ## 这是2阶\n  ··· 依次类推\n  ###### 这是6阶\n</td></tr></table>\n\n此外，标题还有一种使用底线的写法，在标题文字下方加入底线‘=’或‘-’，可以是2个以上的任意数量。‘=’表示最高阶，‘-’表示次高阶。\n<table><tr><td bgcolor=#E4E7E7>\n这是最高阶\n===\n这是次高阶\n----\n</td></tr></table>\n\n## 段落和换行\nMarkdown中的段落是一个或者多个文本行。文本行的前后是空行时，这些文本行构成一个段落。(这个感觉没啥好说的，应该都懂。。。捂脸)\n\n## 区块引用\nMarkdown中使用‘>’号进行区块引用，可以再每一行的前面添加‘>’号，也可以一个段落的开头第一行加上‘>’号，意味着，如果你不使用空行进行段落划分，该段文字都将成为区块引用的一部分。要说明的是，你在区块引用的中还可以使用其他的Markdown语法，这也给Markdown提供了更为灵活的用法。\n\n## 列表\nMarkdown的列表分为有序列表和无序列表。\n其中，有序列表使用数字接着一个英文呢的句点进行标记，但是数字对于列表的顺序是没有影响的。无序列表使用单一的*、+、-号进行标记\n\n1\\. 有序列表\n\n<table><tr><td bgcolor=#E4E7E7>\n1. 这是第一\n2. 这是第二\n7. 这是第三，因为数字7是对顺序时没有影响的，所以显示出来的序号将会是3\n</td></tr></table>\n\n虽然这个语法有这样的性质，但是我建议还是按照平时的规范来进行书写，除了特殊情况，否则还是使用顺序数字标记比较好。另外，如果遇到不能很好的显示数字顺序时，可以把数字后的‘.’号进行转义。\n\n2\\. 无序列表\n\n<table><tr><td bgcolor=#E4E7E7>\n* 这是星号\n+ 这是加号\n- 这是减号\n</td></tr></table>\n\n效果如下：\n> * 这是星号\n> + 这是加号\n> - 这是减号\n\n---\n\n其实今天写的东西也并不是很多，但是打字慢。。。行动慢。。。希望以后能做的更好一些吧。另外，坚持更新！今天先到这里吧。\n\n注：因为写这个文章的我也是一个Markdown新手，对于语法的了解还不是很到位，如果想要了解更加详细的内容，可以参考[Markdown语法说明]，这个估计都能看得懂。虽说很多人都写了这个Markdown语法的说明，但是我也是刚刚涉及，虽说没有别人写得好，但也算是自己熟悉Markdownd的一个过程吧。\n\n<center> --- end --- </center>\n\n---\n\n[Markdown语法说明]: http://wowubuntu.com/markdown/#img\n","source":"_posts/Markdown语法的基本使用简介.md","raw":"---\ntitle: Markdown语法的基本使用简介\ndate: 2017-03-04 08:58:43\ntags: [Markdown, 写作]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](Markdown语法的基本使用简介/beautifulnature.jpg)\n\nMarkdown是一种轻量级标记语言，创始人为John Gruber。Markdown目前是大多数博客爱好者以及作家比较钟爱的语言。本篇是一篇用Markdown语言写的介绍Markdown语法的博客。\n<!--more-->\n经常使用的Markdown语法主要有以下一些内容，包括标题、段落和换行、区块引用、列表、代码区块、分隔线、连接、强调、代码、图片等。只要掌握了这些内容，基本的一些写作就已经没有问题了。\n\n为了写的更精细一些，以及不让自己觉得麻烦，所以将这个简介分为几次来写。本次主要介绍的是标题、段落和换行、区块引用、列表，其余的留到下次介绍。\n\n## 标题\nMarkdown语法的标题可以有6级，使用#号对标题进行定级。把#号写在标题前，数目从1个到6个，表示不同的阶数。如下所示：\n<table><tr><td bgcolor=#E4E7E7>  # 这是1阶  \n  ## 这是2阶\n  ··· 依次类推\n  ###### 这是6阶\n</td></tr></table>\n\n此外，标题还有一种使用底线的写法，在标题文字下方加入底线‘=’或‘-’，可以是2个以上的任意数量。‘=’表示最高阶，‘-’表示次高阶。\n<table><tr><td bgcolor=#E4E7E7>\n这是最高阶\n===\n这是次高阶\n----\n</td></tr></table>\n\n## 段落和换行\nMarkdown中的段落是一个或者多个文本行。文本行的前后是空行时，这些文本行构成一个段落。(这个感觉没啥好说的，应该都懂。。。捂脸)\n\n## 区块引用\nMarkdown中使用‘>’号进行区块引用，可以再每一行的前面添加‘>’号，也可以一个段落的开头第一行加上‘>’号，意味着，如果你不使用空行进行段落划分，该段文字都将成为区块引用的一部分。要说明的是，你在区块引用的中还可以使用其他的Markdown语法，这也给Markdown提供了更为灵活的用法。\n\n## 列表\nMarkdown的列表分为有序列表和无序列表。\n其中，有序列表使用数字接着一个英文呢的句点进行标记，但是数字对于列表的顺序是没有影响的。无序列表使用单一的*、+、-号进行标记\n\n1\\. 有序列表\n\n<table><tr><td bgcolor=#E4E7E7>\n1. 这是第一\n2. 这是第二\n7. 这是第三，因为数字7是对顺序时没有影响的，所以显示出来的序号将会是3\n</td></tr></table>\n\n虽然这个语法有这样的性质，但是我建议还是按照平时的规范来进行书写，除了特殊情况，否则还是使用顺序数字标记比较好。另外，如果遇到不能很好的显示数字顺序时，可以把数字后的‘.’号进行转义。\n\n2\\. 无序列表\n\n<table><tr><td bgcolor=#E4E7E7>\n* 这是星号\n+ 这是加号\n- 这是减号\n</td></tr></table>\n\n效果如下：\n> * 这是星号\n> + 这是加号\n> - 这是减号\n\n---\n\n其实今天写的东西也并不是很多，但是打字慢。。。行动慢。。。希望以后能做的更好一些吧。另外，坚持更新！今天先到这里吧。\n\n注：因为写这个文章的我也是一个Markdown新手，对于语法的了解还不是很到位，如果想要了解更加详细的内容，可以参考[Markdown语法说明]，这个估计都能看得懂。虽说很多人都写了这个Markdown语法的说明，但是我也是刚刚涉及，虽说没有别人写得好，但也算是自己熟悉Markdownd的一个过程吧。\n\n<center> --- end --- </center>\n\n---\n\n[Markdown语法说明]: http://wowubuntu.com/markdown/#img\n","slug":"Markdown语法的基本使用简介","published":1,"updated":"2019-05-10T16:14:30.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxh00175cv94i4vbqtd","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/03/04/Markdown语法的基本使用简介/beautifulnature.jpg\" alt=\"\"></p>\n<p>Markdown是一种轻量级标记语言，创始人为John Gruber。Markdown目前是大多数博客爱好者以及作家比较钟爱的语言。本篇是一篇用Markdown语言写的介绍Markdown语法的博客。<br><a id=\"more\"></a><br>经常使用的Markdown语法主要有以下一些内容，包括标题、段落和换行、区块引用、列表、代码区块、分隔线、连接、强调、代码、图片等。只要掌握了这些内容，基本的一些写作就已经没有问题了。</p>\n<p>为了写的更精细一些，以及不让自己觉得麻烦，所以将这个简介分为几次来写。本次主要介绍的是标题、段落和换行、区块引用、列表，其余的留到下次介绍。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>Markdown语法的标题可以有6级，使用#号对标题进行定级。把#号写在标题前，数目从1个到6个，表示不同的阶数。如下所示：</p>\n<table><tr><td bgcolor=\"#E4E7E7\">  # 这是1阶<br>  ## 这是2阶<br>  ··· 依次类推<br>  ###### 这是6阶<br></td></tr></table>\n\n<p>此外，标题还有一种使用底线的写法，在标题文字下方加入底线‘=’或‘-’，可以是2个以上的任意数量。‘=’表示最高阶，‘-’表示次高阶。</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>这是最高阶<br>===<br>这是次高阶<br>—-<br></td></tr></table>\n\n<h2 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h2><p>Markdown中的段落是一个或者多个文本行。文本行的前后是空行时，这些文本行构成一个段落。(这个感觉没啥好说的，应该都懂。。。捂脸)</p>\n<h2 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h2><p>Markdown中使用‘&gt;’号进行区块引用，可以再每一行的前面添加‘&gt;’号，也可以一个段落的开头第一行加上‘&gt;’号，意味着，如果你不使用空行进行段落划分，该段文字都将成为区块引用的一部分。要说明的是，你在区块引用的中还可以使用其他的Markdown语法，这也给Markdown提供了更为灵活的用法。</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>Markdown的列表分为有序列表和无序列表。<br>其中，有序列表使用数字接着一个英文呢的句点进行标记，但是数字对于列表的顺序是没有影响的。无序列表使用单一的*、+、-号进行标记</p>\n<p>1. 有序列表</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>1. 这是第一<br>2. 这是第二<br>7. 这是第三，因为数字7是对顺序时没有影响的，所以显示出来的序号将会是3<br></td></tr></table>\n\n<p>虽然这个语法有这样的性质，但是我建议还是按照平时的规范来进行书写，除了特殊情况，否则还是使用顺序数字标记比较好。另外，如果遇到不能很好的显示数字顺序时，可以把数字后的‘.’号进行转义。</p>\n<p>2. 无序列表</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>* 这是星号<br>+ 这是加号<br>- 这是减号<br></td></tr></table>\n\n<p>效果如下：</p>\n<blockquote>\n<ul>\n<li>这是星号</li>\n</ul>\n<ul>\n<li>这是加号</li>\n</ul>\n<ul>\n<li>这是减号</li>\n</ul>\n</blockquote>\n<hr>\n<p>其实今天写的东西也并不是很多，但是打字慢。。。行动慢。。。希望以后能做的更好一些吧。另外，坚持更新！今天先到这里吧。</p>\n<p>注：因为写这个文章的我也是一个Markdown新手，对于语法的了解还不是很到位，如果想要了解更加详细的内容，可以参考<a href=\"http://wowubuntu.com/markdown/#img\" target=\"_blank\" rel=\"noopener\">Markdown语法说明</a>，这个估计都能看得懂。虽说很多人都写了这个Markdown语法的说明，但是我也是刚刚涉及，虽说没有别人写得好，但也算是自己熟悉Markdownd的一个过程吧。</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/03/04/Markdown语法的基本使用简介/beautifulnature.jpg\" alt=\"\"></p>\n<p>Markdown是一种轻量级标记语言，创始人为John Gruber。Markdown目前是大多数博客爱好者以及作家比较钟爱的语言。本篇是一篇用Markdown语言写的介绍Markdown语法的博客。<br></p>","more":"<br>经常使用的Markdown语法主要有以下一些内容，包括标题、段落和换行、区块引用、列表、代码区块、分隔线、连接、强调、代码、图片等。只要掌握了这些内容，基本的一些写作就已经没有问题了。<p></p>\n<p>为了写的更精细一些，以及不让自己觉得麻烦，所以将这个简介分为几次来写。本次主要介绍的是标题、段落和换行、区块引用、列表，其余的留到下次介绍。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>Markdown语法的标题可以有6级，使用#号对标题进行定级。把#号写在标题前，数目从1个到6个，表示不同的阶数。如下所示：</p>\n<table><tr><td bgcolor=\"#E4E7E7\">  # 这是1阶<br>  ## 这是2阶<br>  ··· 依次类推<br>  ###### 这是6阶<br></td></tr></table>\n\n<p>此外，标题还有一种使用底线的写法，在标题文字下方加入底线‘=’或‘-’，可以是2个以上的任意数量。‘=’表示最高阶，‘-’表示次高阶。</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>这是最高阶<br>===<br>这是次高阶<br>—-<br></td></tr></table>\n\n<h2 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h2><p>Markdown中的段落是一个或者多个文本行。文本行的前后是空行时，这些文本行构成一个段落。(这个感觉没啥好说的，应该都懂。。。捂脸)</p>\n<h2 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h2><p>Markdown中使用‘&gt;’号进行区块引用，可以再每一行的前面添加‘&gt;’号，也可以一个段落的开头第一行加上‘&gt;’号，意味着，如果你不使用空行进行段落划分，该段文字都将成为区块引用的一部分。要说明的是，你在区块引用的中还可以使用其他的Markdown语法，这也给Markdown提供了更为灵活的用法。</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>Markdown的列表分为有序列表和无序列表。<br>其中，有序列表使用数字接着一个英文呢的句点进行标记，但是数字对于列表的顺序是没有影响的。无序列表使用单一的*、+、-号进行标记</p>\n<p>1. 有序列表</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>1. 这是第一<br>2. 这是第二<br>7. 这是第三，因为数字7是对顺序时没有影响的，所以显示出来的序号将会是3<br></td></tr></table>\n\n<p>虽然这个语法有这样的性质，但是我建议还是按照平时的规范来进行书写，除了特殊情况，否则还是使用顺序数字标记比较好。另外，如果遇到不能很好的显示数字顺序时，可以把数字后的‘.’号进行转义。</p>\n<p>2. 无序列表</p>\n<table><tr><td bgcolor=\"#E4E7E7\"><br>* 这是星号<br>+ 这是加号<br>- 这是减号<br></td></tr></table>\n\n<p>效果如下：</p>\n<blockquote>\n<ul>\n<li>这是星号</li>\n</ul>\n<ul>\n<li>这是加号</li>\n</ul>\n<ul>\n<li>这是减号</li>\n</ul>\n</blockquote>\n<hr>\n<p>其实今天写的东西也并不是很多，但是打字慢。。。行动慢。。。希望以后能做的更好一些吧。另外，坚持更新！今天先到这里吧。</p>\n<p>注：因为写这个文章的我也是一个Markdown新手，对于语法的了解还不是很到位，如果想要了解更加详细的内容，可以参考<a href=\"http://wowubuntu.com/markdown/#img\" target=\"_blank\" rel=\"noopener\">Markdown语法说明</a>，这个估计都能看得懂。虽说很多人都写了这个Markdown语法的说明，但是我也是刚刚涉及，虽说没有别人写得好，但也算是自己熟悉Markdownd的一个过程吧。</p>\n<center> — end — </center>\n\n<hr>"},{"title":"java 回调机制的使用","date":"2017-04-22T07:07:19.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](java-回调机制的使用/nature-images.jpg)\n\n## 写在前面\n\n最近随着期中的临近，感觉作业越来越多，过两天还是集中轰炸，感觉药丸啊！虽然还是有点作死的感觉，没有先把自己的作业做完就折腾着自己的 Android Studio，但是收获多少还是有一些的吧。在这个过程中，真的是越来越能感觉到自己的不足，发现在很多方面都很难做到很好。不过这个在学习的过程中毕竟是不可避免的。所以，这次要写的东西可能比较少，而且对于各位大神来说还是很鸡肋，但是还是要写的。（因为更多的问题还没有解决，所以没办法一次性写出来）。另外，虽然分享的东西少，但是也不能变成不分享，因为只要真的暂停了，那估计这股子劲就消失了。所以，加油吧！\n<!-- more -->\n## java 模块间的调用\n\n不仅仅在 java 语言里面，我们在编程的时候模块之间的调用都是不可避免的。总的来说，调用主要有以下几个类型：\n1\\. 同步调用\n\n![](java-回调机制的使用/direct1.png)\n\n同步调用是指类 A 调用类 B 中的某个方法，程序此时等待 B 中的这个方法执行完成。如果 B 需要使用较多的时间才能够完成任务，那么主线程（此时只有一个线程）就会发生阻塞。所以这种调用方法适合非耗时的调用。\n\n2\\. 异步调用\n\n![](java-回调机制的使用/asynchronous.png)\n\n异步调用是的出现，避免了主线程的阻塞的发生。所谓的异步，就是指类 A 新建一个线程去运行类 B 中的某一个耗时的操作，或者在类 B 中的操作中是在线程中进行的，A类的方法直接对其调用。这样就程序中就运行了一个主线程和一个子线程，耗时工作在子线程中完成，主线程仍可以正常使用，不受耗时操作的影响。但是这样也会有一个问题，那就是，子线程和主线程的沟通问题，主线程不知道子线程的工作进行的程度，这在实际的编程中是不方便的。\n\n3\\. 回调机制\n\n![](java-回调机制的使用/callback.png)\n\n正是上述的两种方法不能很好的满足人们的需求，回调机制就出现了。所谓的回调是指在类 A 中执行类 B 的某种方法，但是类 A 持有一个 CallbackListstener， 这个监听器作为参数传入类 B 的方法中，当完成所需的操作后，调用监听器的方法，A 中的监听器就会执行对应的操作。\n\n## 实战演练\n\n下面是我的一个测试代码，很简单，请自行理解。\n监听器接口：CallbackListstener\n``` java\npublic interface CallbackListener {\n\n    void onFinish(String info);\n\n    void onError(Exception e);\n}\n```\n其中的接口可以按自己的需要设定。\n耗时的操作子线程：MyThread\n``` java\npublic class MyThread {\n\n    public static void ThreadSleep(final String mystr, final CallbackListener listener){\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    System.out.println(mystr);\n                    System.out.println(\"Wait for me 5s\");\n                    Thread.sleep(5 * 1000);\n                    String info = \"I am dongmodao. This comes from new thread.\";\n                    if(listener != null){\n                        listener.onFinish(info);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    listener.onError(e);\n                }\n            }\n        }).start();\n    }\n}\n```\n测试程序主入口类：Test()\n``` java\npublic class Test {\n    public static void main(String[] args) {\n\n        System.out.println(\"Hello world\");\n\n        MyThread.ThreadSleep(\"New a Thread\", new CallbackListener() {\n            @Override\n            public void onFinish(String info) {\n                // 根据返回结果执行具体内容的逻辑\n                System.out.println(info);\n            }\n\n            @Override\n            public void onError(Exception e) {\n                // 执行异常处理\n                System.out.println(e);\n            }\n        });\n\n        System.out.println(\"I am in MainThread.\");\n    }\n}\n```\n上面的代码应该很简单，很容易看的懂，此处就不在多加赘述。运行的结果如下：\n\n![](java-回调机制的使用/testrst.png)\n\n## 写在后面\n\n这次分享的内容感觉有点水。。。，其实应该很多人都知道了的，但是我却是刚刚有所涉及。。。这也是我认识自己不足的地方。总结起来，自己的基础不是很牢固，但是有时候又会比较急，所以总是感觉不真实。虽然有些水，但是也是我学习或者说复习的一个体现吧。本来这次是想写关于 RecyclerView 加载网页图片时错乱的解决方案的，但是一时间对于网上给的解决方案并不是非常认可，总感觉实现的不够好，比较乱(也可能是我弱鸡看不懂(捂脸))，所以就暂时没贴出来，等到我找到解决的方法的时候在发一下吧！\n\n参考文章：\n[Java回调机制解读](http://www.importnew.com/24220.html)\n\n附上郭神的一个解决 ListView 加载网页图片错乱的网址 [Android ListView异步加载图片乱序问题，原因分析及解决方案](http://blog.csdn.net/guolin_blog/article/details/45586553)\n<center> --- end --- </center>\n\n---\n","source":"_posts/java-回调机制的使用.md","raw":"---\ntitle: java 回调机制的使用\ndate: 2017-04-22 15:07:19\ntags: [Java 回调机制]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](java-回调机制的使用/nature-images.jpg)\n\n## 写在前面\n\n最近随着期中的临近，感觉作业越来越多，过两天还是集中轰炸，感觉药丸啊！虽然还是有点作死的感觉，没有先把自己的作业做完就折腾着自己的 Android Studio，但是收获多少还是有一些的吧。在这个过程中，真的是越来越能感觉到自己的不足，发现在很多方面都很难做到很好。不过这个在学习的过程中毕竟是不可避免的。所以，这次要写的东西可能比较少，而且对于各位大神来说还是很鸡肋，但是还是要写的。（因为更多的问题还没有解决，所以没办法一次性写出来）。另外，虽然分享的东西少，但是也不能变成不分享，因为只要真的暂停了，那估计这股子劲就消失了。所以，加油吧！\n<!-- more -->\n## java 模块间的调用\n\n不仅仅在 java 语言里面，我们在编程的时候模块之间的调用都是不可避免的。总的来说，调用主要有以下几个类型：\n1\\. 同步调用\n\n![](java-回调机制的使用/direct1.png)\n\n同步调用是指类 A 调用类 B 中的某个方法，程序此时等待 B 中的这个方法执行完成。如果 B 需要使用较多的时间才能够完成任务，那么主线程（此时只有一个线程）就会发生阻塞。所以这种调用方法适合非耗时的调用。\n\n2\\. 异步调用\n\n![](java-回调机制的使用/asynchronous.png)\n\n异步调用是的出现，避免了主线程的阻塞的发生。所谓的异步，就是指类 A 新建一个线程去运行类 B 中的某一个耗时的操作，或者在类 B 中的操作中是在线程中进行的，A类的方法直接对其调用。这样就程序中就运行了一个主线程和一个子线程，耗时工作在子线程中完成，主线程仍可以正常使用，不受耗时操作的影响。但是这样也会有一个问题，那就是，子线程和主线程的沟通问题，主线程不知道子线程的工作进行的程度，这在实际的编程中是不方便的。\n\n3\\. 回调机制\n\n![](java-回调机制的使用/callback.png)\n\n正是上述的两种方法不能很好的满足人们的需求，回调机制就出现了。所谓的回调是指在类 A 中执行类 B 的某种方法，但是类 A 持有一个 CallbackListstener， 这个监听器作为参数传入类 B 的方法中，当完成所需的操作后，调用监听器的方法，A 中的监听器就会执行对应的操作。\n\n## 实战演练\n\n下面是我的一个测试代码，很简单，请自行理解。\n监听器接口：CallbackListstener\n``` java\npublic interface CallbackListener {\n\n    void onFinish(String info);\n\n    void onError(Exception e);\n}\n```\n其中的接口可以按自己的需要设定。\n耗时的操作子线程：MyThread\n``` java\npublic class MyThread {\n\n    public static void ThreadSleep(final String mystr, final CallbackListener listener){\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    System.out.println(mystr);\n                    System.out.println(\"Wait for me 5s\");\n                    Thread.sleep(5 * 1000);\n                    String info = \"I am dongmodao. This comes from new thread.\";\n                    if(listener != null){\n                        listener.onFinish(info);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    listener.onError(e);\n                }\n            }\n        }).start();\n    }\n}\n```\n测试程序主入口类：Test()\n``` java\npublic class Test {\n    public static void main(String[] args) {\n\n        System.out.println(\"Hello world\");\n\n        MyThread.ThreadSleep(\"New a Thread\", new CallbackListener() {\n            @Override\n            public void onFinish(String info) {\n                // 根据返回结果执行具体内容的逻辑\n                System.out.println(info);\n            }\n\n            @Override\n            public void onError(Exception e) {\n                // 执行异常处理\n                System.out.println(e);\n            }\n        });\n\n        System.out.println(\"I am in MainThread.\");\n    }\n}\n```\n上面的代码应该很简单，很容易看的懂，此处就不在多加赘述。运行的结果如下：\n\n![](java-回调机制的使用/testrst.png)\n\n## 写在后面\n\n这次分享的内容感觉有点水。。。，其实应该很多人都知道了的，但是我却是刚刚有所涉及。。。这也是我认识自己不足的地方。总结起来，自己的基础不是很牢固，但是有时候又会比较急，所以总是感觉不真实。虽然有些水，但是也是我学习或者说复习的一个体现吧。本来这次是想写关于 RecyclerView 加载网页图片时错乱的解决方案的，但是一时间对于网上给的解决方案并不是非常认可，总感觉实现的不够好，比较乱(也可能是我弱鸡看不懂(捂脸))，所以就暂时没贴出来，等到我找到解决的方法的时候在发一下吧！\n\n参考文章：\n[Java回调机制解读](http://www.importnew.com/24220.html)\n\n附上郭神的一个解决 ListView 加载网页图片错乱的网址 [Android ListView异步加载图片乱序问题，原因分析及解决方案](http://blog.csdn.net/guolin_blog/article/details/45586553)\n<center> --- end --- </center>\n\n---\n","slug":"java-回调机制的使用","published":1,"updated":"2019-05-10T16:14:30.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxk001b5cv98kcghmxm","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/22/java-回调机制的使用/nature-images.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最近随着期中的临近，感觉作业越来越多，过两天还是集中轰炸，感觉药丸啊！虽然还是有点作死的感觉，没有先把自己的作业做完就折腾着自己的 Android Studio，但是收获多少还是有一些的吧。在这个过程中，真的是越来越能感觉到自己的不足，发现在很多方面都很难做到很好。不过这个在学习的过程中毕竟是不可避免的。所以，这次要写的东西可能比较少，而且对于各位大神来说还是很鸡肋，但是还是要写的。（因为更多的问题还没有解决，所以没办法一次性写出来）。另外，虽然分享的东西少，但是也不能变成不分享，因为只要真的暂停了，那估计这股子劲就消失了。所以，加油吧！<br><a id=\"more\"></a></p>\n<h2 id=\"java-模块间的调用\"><a href=\"#java-模块间的调用\" class=\"headerlink\" title=\"java 模块间的调用\"></a>java 模块间的调用</h2><p>不仅仅在 java 语言里面，我们在编程的时候模块之间的调用都是不可避免的。总的来说，调用主要有以下几个类型：<br>1. 同步调用</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/direct1.png\" alt=\"\"></p>\n<p>同步调用是指类 A 调用类 B 中的某个方法，程序此时等待 B 中的这个方法执行完成。如果 B 需要使用较多的时间才能够完成任务，那么主线程（此时只有一个线程）就会发生阻塞。所以这种调用方法适合非耗时的调用。</p>\n<p>2. 异步调用</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/asynchronous.png\" alt=\"\"></p>\n<p>异步调用是的出现，避免了主线程的阻塞的发生。所谓的异步，就是指类 A 新建一个线程去运行类 B 中的某一个耗时的操作，或者在类 B 中的操作中是在线程中进行的，A类的方法直接对其调用。这样就程序中就运行了一个主线程和一个子线程，耗时工作在子线程中完成，主线程仍可以正常使用，不受耗时操作的影响。但是这样也会有一个问题，那就是，子线程和主线程的沟通问题，主线程不知道子线程的工作进行的程度，这在实际的编程中是不方便的。</p>\n<p>3. 回调机制</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/callback.png\" alt=\"\"></p>\n<p>正是上述的两种方法不能很好的满足人们的需求，回调机制就出现了。所谓的回调是指在类 A 中执行类 B 的某种方法，但是类 A 持有一个 CallbackListstener， 这个监听器作为参数传入类 B 的方法中，当完成所需的操作后，调用监听器的方法，A 中的监听器就会执行对应的操作。</p>\n<h2 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h2><p>下面是我的一个测试代码，很简单，请自行理解。<br>监听器接口：CallbackListstener<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallbackListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(String info)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception e)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中的接口可以按自己的需要设定。<br>耗时的操作子线程：MyThread<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ThreadSleep</span><span class=\"params\">(<span class=\"keyword\">final</span> String mystr, <span class=\"keyword\">final</span> CallbackListener listener)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(mystr);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Wait for me 5s\"</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    String info = <span class=\"string\">\"I am dongmodao. This comes from new thread.\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                        listener.onFinish(info);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    listener.onError(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试程序主入口类：Test()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread.ThreadSleep(<span class=\"string\">\"New a Thread\"</span>, <span class=\"keyword\">new</span> CallbackListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(String info)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 根据返回结果执行具体内容的逻辑</span></span><br><span class=\"line\">                System.out.println(info);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行异常处理</span></span><br><span class=\"line\">                System.out.println(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am in MainThread.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码应该很简单，很容易看的懂，此处就不在多加赘述。运行的结果如下：</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/testrst.png\" alt=\"\"></p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>这次分享的内容感觉有点水。。。，其实应该很多人都知道了的，但是我却是刚刚有所涉及。。。这也是我认识自己不足的地方。总结起来，自己的基础不是很牢固，但是有时候又会比较急，所以总是感觉不真实。虽然有些水，但是也是我学习或者说复习的一个体现吧。本来这次是想写关于 RecyclerView 加载网页图片时错乱的解决方案的，但是一时间对于网上给的解决方案并不是非常认可，总感觉实现的不够好，比较乱(也可能是我弱鸡看不懂(捂脸))，所以就暂时没贴出来，等到我找到解决的方法的时候在发一下吧！</p>\n<p>参考文章：<br><a href=\"http://www.importnew.com/24220.html\" target=\"_blank\" rel=\"noopener\">Java回调机制解读</a></p>\n<p>附上郭神的一个解决 ListView 加载网页图片错乱的网址 <a href=\"http://blog.csdn.net/guolin_blog/article/details/45586553\" target=\"_blank\" rel=\"noopener\">Android ListView异步加载图片乱序问题，原因分析及解决方案</a></p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/04/22/java-回调机制的使用/nature-images.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最近随着期中的临近，感觉作业越来越多，过两天还是集中轰炸，感觉药丸啊！虽然还是有点作死的感觉，没有先把自己的作业做完就折腾着自己的 Android Studio，但是收获多少还是有一些的吧。在这个过程中，真的是越来越能感觉到自己的不足，发现在很多方面都很难做到很好。不过这个在学习的过程中毕竟是不可避免的。所以，这次要写的东西可能比较少，而且对于各位大神来说还是很鸡肋，但是还是要写的。（因为更多的问题还没有解决，所以没办法一次性写出来）。另外，虽然分享的东西少，但是也不能变成不分享，因为只要真的暂停了，那估计这股子劲就消失了。所以，加油吧！<br></p>","more":"<p></p>\n<h2 id=\"java-模块间的调用\"><a href=\"#java-模块间的调用\" class=\"headerlink\" title=\"java 模块间的调用\"></a>java 模块间的调用</h2><p>不仅仅在 java 语言里面，我们在编程的时候模块之间的调用都是不可避免的。总的来说，调用主要有以下几个类型：<br>1. 同步调用</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/direct1.png\" alt=\"\"></p>\n<p>同步调用是指类 A 调用类 B 中的某个方法，程序此时等待 B 中的这个方法执行完成。如果 B 需要使用较多的时间才能够完成任务，那么主线程（此时只有一个线程）就会发生阻塞。所以这种调用方法适合非耗时的调用。</p>\n<p>2. 异步调用</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/asynchronous.png\" alt=\"\"></p>\n<p>异步调用是的出现，避免了主线程的阻塞的发生。所谓的异步，就是指类 A 新建一个线程去运行类 B 中的某一个耗时的操作，或者在类 B 中的操作中是在线程中进行的，A类的方法直接对其调用。这样就程序中就运行了一个主线程和一个子线程，耗时工作在子线程中完成，主线程仍可以正常使用，不受耗时操作的影响。但是这样也会有一个问题，那就是，子线程和主线程的沟通问题，主线程不知道子线程的工作进行的程度，这在实际的编程中是不方便的。</p>\n<p>3. 回调机制</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/callback.png\" alt=\"\"></p>\n<p>正是上述的两种方法不能很好的满足人们的需求，回调机制就出现了。所谓的回调是指在类 A 中执行类 B 的某种方法，但是类 A 持有一个 CallbackListstener， 这个监听器作为参数传入类 B 的方法中，当完成所需的操作后，调用监听器的方法，A 中的监听器就会执行对应的操作。</p>\n<h2 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h2><p>下面是我的一个测试代码，很简单，请自行理解。<br>监听器接口：CallbackListstener<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallbackListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(String info)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception e)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中的接口可以按自己的需要设定。<br>耗时的操作子线程：MyThread<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ThreadSleep</span><span class=\"params\">(<span class=\"keyword\">final</span> String mystr, <span class=\"keyword\">final</span> CallbackListener listener)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(mystr);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Wait for me 5s\"</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    String info = <span class=\"string\">\"I am dongmodao. This comes from new thread.\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                        listener.onFinish(info);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    listener.onError(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试程序主入口类：Test()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread.ThreadSleep(<span class=\"string\">\"New a Thread\"</span>, <span class=\"keyword\">new</span> CallbackListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(String info)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 根据返回结果执行具体内容的逻辑</span></span><br><span class=\"line\">                System.out.println(info);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行异常处理</span></span><br><span class=\"line\">                System.out.println(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am in MainThread.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码应该很简单，很容易看的懂，此处就不在多加赘述。运行的结果如下：</p>\n<p><img src=\"/2017/04/22/java-回调机制的使用/testrst.png\" alt=\"\"></p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>这次分享的内容感觉有点水。。。，其实应该很多人都知道了的，但是我却是刚刚有所涉及。。。这也是我认识自己不足的地方。总结起来，自己的基础不是很牢固，但是有时候又会比较急，所以总是感觉不真实。虽然有些水，但是也是我学习或者说复习的一个体现吧。本来这次是想写关于 RecyclerView 加载网页图片时错乱的解决方案的，但是一时间对于网上给的解决方案并不是非常认可，总感觉实现的不够好，比较乱(也可能是我弱鸡看不懂(捂脸))，所以就暂时没贴出来，等到我找到解决的方法的时候在发一下吧！</p>\n<p>参考文章：<br><a href=\"http://www.importnew.com/24220.html\" target=\"_blank\" rel=\"noopener\">Java回调机制解读</a></p>\n<p>附上郭神的一个解决 ListView 加载网页图片错乱的网址 <a href=\"http://blog.csdn.net/guolin_blog/article/details/45586553\" target=\"_blank\" rel=\"noopener\">Android ListView异步加载图片乱序问题，原因分析及解决方案</a></p>\n<center> — end — </center>\n\n<hr>"},{"title":"一些感触","date":"2017-04-03T06:11:47.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](一些感触/road.jpg)\n\n##### 一些感触\n今天在张哥（stormzhang）的小密圈看到了一些同学的分享，感受到大家对于自己生活、学习和职业的热情和努力奋斗的高昂情绪。有个同学分享了他自己立下的 flag，能感受到雄心满满！再对比于我自己，感觉到自己有很多的不足之处，突然地有些惆怅以及愧疚。因为我在年初也确定了不少的“小目标”，但是就目前的情况来看，并不是所有的“小目标”都得到了很好的实行。\n<!--more-->\n首先，就学习英语来说，我还是没有能坚持做到打卡，而且当时还是以「平时网上看文档的时候看英语文档就能练习了」为借口，然而就现在边看边点翻译的情况来看，这个借口也很难成立了。另外就是，计划比较频繁的更新博客，虽然也没有明显的断更，但是总感觉质量不是很高，其实应该可以做得更好一些。比如现在已经写好的一些文章，里面就存在不少的坑我没有填上。这也是我目标和行动上并没有达成高度的一致的表现。\n\n所以，为了成功更好的我，现在重新开始给自己定下一些个人的原则，以后尽全力做符合这个原则的事。以后也许会有更新，但是一定要让自己明白什么是对、什么是错。\n以下是具体要求：\n> 1. 要么不承诺，要么一定要实现\n2. 多阅读书籍，而且是「一字不差的阅读」\n3. 对于学习过的内容，要画思维导图记录下来\n4. 认真的对待每一件事，并且投入热情，提高效率，积极提问\n5. 慎重思考，不要后悔\n6. 减弱拖延症，能够早完成的一定不要拖延\n7. 有时间多锻炼，不要总是宅，生活规律一些\n8. 坚持原则\n9. 坚持原则\n10. 坚持原则\n\n以上是对自己的要求，尽全力做到！加油！\n##### PS\n> 为了实现上面的原则，接下来先把自己在博客上的坑给填满。以后写博客要再三检查，而且坚持原创以及做一些亲测过的分享。加油！\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/一些感触.md","raw":"---\ntitle: 一些感触\ndate: 2017-04-03 14:11:47\ntags: [随笔]\ncategories: [意识流]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](一些感触/road.jpg)\n\n##### 一些感触\n今天在张哥（stormzhang）的小密圈看到了一些同学的分享，感受到大家对于自己生活、学习和职业的热情和努力奋斗的高昂情绪。有个同学分享了他自己立下的 flag，能感受到雄心满满！再对比于我自己，感觉到自己有很多的不足之处，突然地有些惆怅以及愧疚。因为我在年初也确定了不少的“小目标”，但是就目前的情况来看，并不是所有的“小目标”都得到了很好的实行。\n<!--more-->\n首先，就学习英语来说，我还是没有能坚持做到打卡，而且当时还是以「平时网上看文档的时候看英语文档就能练习了」为借口，然而就现在边看边点翻译的情况来看，这个借口也很难成立了。另外就是，计划比较频繁的更新博客，虽然也没有明显的断更，但是总感觉质量不是很高，其实应该可以做得更好一些。比如现在已经写好的一些文章，里面就存在不少的坑我没有填上。这也是我目标和行动上并没有达成高度的一致的表现。\n\n所以，为了成功更好的我，现在重新开始给自己定下一些个人的原则，以后尽全力做符合这个原则的事。以后也许会有更新，但是一定要让自己明白什么是对、什么是错。\n以下是具体要求：\n> 1. 要么不承诺，要么一定要实现\n2. 多阅读书籍，而且是「一字不差的阅读」\n3. 对于学习过的内容，要画思维导图记录下来\n4. 认真的对待每一件事，并且投入热情，提高效率，积极提问\n5. 慎重思考，不要后悔\n6. 减弱拖延症，能够早完成的一定不要拖延\n7. 有时间多锻炼，不要总是宅，生活规律一些\n8. 坚持原则\n9. 坚持原则\n10. 坚持原则\n\n以上是对自己的要求，尽全力做到！加油！\n##### PS\n> 为了实现上面的原则，接下来先把自己在博客上的坑给填满。以后写博客要再三检查，而且坚持原创以及做一些亲测过的分享。加油！\n\n<center> --- end --- </center>\n\n---\n","slug":"一些感触","published":1,"updated":"2019-05-10T16:14:30.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxm001d5cv93jc0czpb","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/04/03/一些感触/road.jpg\" alt=\"\"></p>\n<h5 id=\"一些感触\"><a href=\"#一些感触\" class=\"headerlink\" title=\"一些感触\"></a>一些感触</h5><p>今天在张哥（stormzhang）的小密圈看到了一些同学的分享，感受到大家对于自己生活、学习和职业的热情和努力奋斗的高昂情绪。有个同学分享了他自己立下的 flag，能感受到雄心满满！再对比于我自己，感觉到自己有很多的不足之处，突然地有些惆怅以及愧疚。因为我在年初也确定了不少的“小目标”，但是就目前的情况来看，并不是所有的“小目标”都得到了很好的实行。<br><a id=\"more\"></a><br>首先，就学习英语来说，我还是没有能坚持做到打卡，而且当时还是以「平时网上看文档的时候看英语文档就能练习了」为借口，然而就现在边看边点翻译的情况来看，这个借口也很难成立了。另外就是，计划比较频繁的更新博客，虽然也没有明显的断更，但是总感觉质量不是很高，其实应该可以做得更好一些。比如现在已经写好的一些文章，里面就存在不少的坑我没有填上。这也是我目标和行动上并没有达成高度的一致的表现。</p>\n<p>所以，为了成功更好的我，现在重新开始给自己定下一些个人的原则，以后尽全力做符合这个原则的事。以后也许会有更新，但是一定要让自己明白什么是对、什么是错。<br>以下是具体要求：</p>\n<blockquote>\n<ol>\n<li>要么不承诺，要么一定要实现</li>\n<li>多阅读书籍，而且是「一字不差的阅读」</li>\n<li>对于学习过的内容，要画思维导图记录下来</li>\n<li>认真的对待每一件事，并且投入热情，提高效率，积极提问</li>\n<li>慎重思考，不要后悔</li>\n<li>减弱拖延症，能够早完成的一定不要拖延</li>\n<li>有时间多锻炼，不要总是宅，生活规律一些</li>\n<li>坚持原则</li>\n<li>坚持原则</li>\n<li>坚持原则</li>\n</ol>\n</blockquote>\n<p>以上是对自己的要求，尽全力做到！加油！</p>\n<h5 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h5><blockquote>\n<p>为了实现上面的原则，接下来先把自己在博客上的坑给填满。以后写博客要再三检查，而且坚持原创以及做一些亲测过的分享。加油！</p>\n</blockquote>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/04/03/一些感触/road.jpg\" alt=\"\"></p>\n<h5 id=\"一些感触\"><a href=\"#一些感触\" class=\"headerlink\" title=\"一些感触\"></a>一些感触</h5><p>今天在张哥（stormzhang）的小密圈看到了一些同学的分享，感受到大家对于自己生活、学习和职业的热情和努力奋斗的高昂情绪。有个同学分享了他自己立下的 flag，能感受到雄心满满！再对比于我自己，感觉到自己有很多的不足之处，突然地有些惆怅以及愧疚。因为我在年初也确定了不少的“小目标”，但是就目前的情况来看，并不是所有的“小目标”都得到了很好的实行。<br></p>","more":"<br>首先，就学习英语来说，我还是没有能坚持做到打卡，而且当时还是以「平时网上看文档的时候看英语文档就能练习了」为借口，然而就现在边看边点翻译的情况来看，这个借口也很难成立了。另外就是，计划比较频繁的更新博客，虽然也没有明显的断更，但是总感觉质量不是很高，其实应该可以做得更好一些。比如现在已经写好的一些文章，里面就存在不少的坑我没有填上。这也是我目标和行动上并没有达成高度的一致的表现。<p></p>\n<p>所以，为了成功更好的我，现在重新开始给自己定下一些个人的原则，以后尽全力做符合这个原则的事。以后也许会有更新，但是一定要让自己明白什么是对、什么是错。<br>以下是具体要求：</p>\n<blockquote>\n<ol>\n<li>要么不承诺，要么一定要实现</li>\n<li>多阅读书籍，而且是「一字不差的阅读」</li>\n<li>对于学习过的内容，要画思维导图记录下来</li>\n<li>认真的对待每一件事，并且投入热情，提高效率，积极提问</li>\n<li>慎重思考，不要后悔</li>\n<li>减弱拖延症，能够早完成的一定不要拖延</li>\n<li>有时间多锻炼，不要总是宅，生活规律一些</li>\n<li>坚持原则</li>\n<li>坚持原则</li>\n<li>坚持原则</li>\n</ol>\n</blockquote>\n<p>以上是对自己的要求，尽全力做到！加油！</p>\n<h5 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h5><blockquote>\n<p>为了实现上面的原则，接下来先把自己在博客上的坑给填满。以后写博客要再三检查，而且坚持原创以及做一些亲测过的分享。加油！</p>\n</blockquote>\n<center> — end — </center>\n\n<hr>"},{"title":"使用 LitePal 操作数据库","date":"2017-09-16T18:06:23.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n![](使用-LitePal-操作数据库/night.jpg)\n\n## 使用 LitePal 操作数据库\n\n简单说说，只要自己明白，会用就好！<!--more-->\n\n### 前记\n\n今天和一个同学聊天，发现我好久更新关于 Android 的文章了，于是在聊天之后，把上一次没看问完的数据持久化看了一遍，虽然没有码代码，但是把基本理论给清理了一下。算是温习以及新学吧。但是。。。啊，我的报告啊，报告没写完就来这里浪？明天爬不起来怎么能写完，说好的不熬夜呢。。。有时候来了心情自己也控制不了。。。于是。。。「2017-09-17 02:32:12」\n\n### 关于 LitePal\n\nLitePal 是一款开源的 Android 数据库框架，采用对象关系映射（ORM：Object Relational Mapping）的模式，对常用数据库功能封装，可以不必编写 SQL 语句就可完成建表和 CRUD。[LitePal 的 GitHub 地址](https://github.com/LitePalFramework/LitePal).\n\n### 配置 LitePal\n\n1. 在依赖 dependencies 闭包中添加依赖。\n> compile 'org.litepal.android:core:1.6.0'\n\n2. 配置 app/src/main/assets/litepal.xml 文件。\n> &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n>\n>  &lt;litepal&gt;\n>\n>  &lt;dbname value=\"BookStore\" &gt;&lt;/dbname&gt;\n>\n>  &lt;version value=\"1\" &gt;&lt;/version&gt;\n>\n>  &lt;list&gt;\n>  &lt;/list&gt;\n>\n> &lt;/litepal&gt;\n\n dbname 标签用于指定数据库名，version 标签用于指定版本号，list 标签用于指定所用的映射模型。\n\n3. 配置 AndroidManifest.xml\n> 在 application 标签下添加 ``android:name=\"org.litepal.LitePalApplication\"\n\n**对象关系映射（ORM：Object Relational Mapping）**\n\n编程语言是面向对象语言，数据库为关系型数据库，将面向对象的语言与面向关系的数据库之间建立一种映射关系，即为对象关系映射。\n\n使用面向对象的思维来操做数据库，不需要使用 SQL 语句。\n\n### 操作数据库\n\n1. 定义一个类，这个类将和数据库中要建立的表拥有相同的字段，也即类的字段和数据表的列是行对应的。如 Book 类与 Book 表有相同的字段。\n\n2. 将新建类添加到映射模型列表中。在 litepal.xml 文件中的 list 标签添加映射关系入下：&lt;mapping class=\"com.包名.Book\"&gt;&lt;/mapping&gt;，使用完整类名。\n\n3. 使用 ``LitePal.getDatabase();`` 完成创建表操作。\n\n4. 升级数据库版本，修改 litepal.xml 的 version 标签加 1 即可。会自动保留原有数据。\n\n5. **进行 CRUD 操作时，需要使新建类继承 DataSupport 类。**\n\n6. C 操作。添加新数据时，只需 new 一个对象，设置字段值，调用对象的 ``.save()`` 方法即可。\n\n7. U 操作。区分对象是否已经存储，``model.isSaved()`` 可用与判断，对于已经存储的对象，更改其值之后使用对象的 ``.save()`` 更新数据库；无论对象是否存储，使用对象的 ``.updateAll()`` 方法按条件进行更新（是已存储，则修改，否则添加吧）。将字段设置为默认值时需注意，Java 对象初始化时已有默认值，使用 ``.setToDefault()`` 操作。**每新建一个类的对象时就相当于将新建或修改一条数据。**\n\n8. D 操作。调用 ``DataSupport.delete()`` 方法即可。\n\n9. R 操作。使用 ``DataSupport.findAll()`` 方法获得满足条件的新建类的对象的 List。\n\n上述为个人认识，如有差错，可与我联系。学习资料为郭霖大神《第一行代码》的**数据持久化**章节的内容。\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/使用-LitePal-操作数据库.md","raw":"---\ntitle: 使用 LitePal 操作数据库\ndate: 2017-09-17 02:06:23\ntags: [Android]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n![](使用-LitePal-操作数据库/night.jpg)\n\n## 使用 LitePal 操作数据库\n\n简单说说，只要自己明白，会用就好！<!--more-->\n\n### 前记\n\n今天和一个同学聊天，发现我好久更新关于 Android 的文章了，于是在聊天之后，把上一次没看问完的数据持久化看了一遍，虽然没有码代码，但是把基本理论给清理了一下。算是温习以及新学吧。但是。。。啊，我的报告啊，报告没写完就来这里浪？明天爬不起来怎么能写完，说好的不熬夜呢。。。有时候来了心情自己也控制不了。。。于是。。。「2017-09-17 02:32:12」\n\n### 关于 LitePal\n\nLitePal 是一款开源的 Android 数据库框架，采用对象关系映射（ORM：Object Relational Mapping）的模式，对常用数据库功能封装，可以不必编写 SQL 语句就可完成建表和 CRUD。[LitePal 的 GitHub 地址](https://github.com/LitePalFramework/LitePal).\n\n### 配置 LitePal\n\n1. 在依赖 dependencies 闭包中添加依赖。\n> compile 'org.litepal.android:core:1.6.0'\n\n2. 配置 app/src/main/assets/litepal.xml 文件。\n> &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n>\n>  &lt;litepal&gt;\n>\n>  &lt;dbname value=\"BookStore\" &gt;&lt;/dbname&gt;\n>\n>  &lt;version value=\"1\" &gt;&lt;/version&gt;\n>\n>  &lt;list&gt;\n>  &lt;/list&gt;\n>\n> &lt;/litepal&gt;\n\n dbname 标签用于指定数据库名，version 标签用于指定版本号，list 标签用于指定所用的映射模型。\n\n3. 配置 AndroidManifest.xml\n> 在 application 标签下添加 ``android:name=\"org.litepal.LitePalApplication\"\n\n**对象关系映射（ORM：Object Relational Mapping）**\n\n编程语言是面向对象语言，数据库为关系型数据库，将面向对象的语言与面向关系的数据库之间建立一种映射关系，即为对象关系映射。\n\n使用面向对象的思维来操做数据库，不需要使用 SQL 语句。\n\n### 操作数据库\n\n1. 定义一个类，这个类将和数据库中要建立的表拥有相同的字段，也即类的字段和数据表的列是行对应的。如 Book 类与 Book 表有相同的字段。\n\n2. 将新建类添加到映射模型列表中。在 litepal.xml 文件中的 list 标签添加映射关系入下：&lt;mapping class=\"com.包名.Book\"&gt;&lt;/mapping&gt;，使用完整类名。\n\n3. 使用 ``LitePal.getDatabase();`` 完成创建表操作。\n\n4. 升级数据库版本，修改 litepal.xml 的 version 标签加 1 即可。会自动保留原有数据。\n\n5. **进行 CRUD 操作时，需要使新建类继承 DataSupport 类。**\n\n6. C 操作。添加新数据时，只需 new 一个对象，设置字段值，调用对象的 ``.save()`` 方法即可。\n\n7. U 操作。区分对象是否已经存储，``model.isSaved()`` 可用与判断，对于已经存储的对象，更改其值之后使用对象的 ``.save()`` 更新数据库；无论对象是否存储，使用对象的 ``.updateAll()`` 方法按条件进行更新（是已存储，则修改，否则添加吧）。将字段设置为默认值时需注意，Java 对象初始化时已有默认值，使用 ``.setToDefault()`` 操作。**每新建一个类的对象时就相当于将新建或修改一条数据。**\n\n8. D 操作。调用 ``DataSupport.delete()`` 方法即可。\n\n9. R 操作。使用 ``DataSupport.findAll()`` 方法获得满足条件的新建类的对象的 List。\n\n上述为个人认识，如有差错，可与我联系。学习资料为郭霖大神《第一行代码》的**数据持久化**章节的内容。\n\n<center> --- end --- </center>\n\n---\n","slug":"使用-LitePal-操作数据库","published":1,"updated":"2019-05-10T16:14:30.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxp001g5cv9yw2zskhj","content":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/09/17/使用-LitePal-操作数据库/night.jpg\" alt=\"\"></p>\n<h2 id=\"使用-LitePal-操作数据库\"><a href=\"#使用-LitePal-操作数据库\" class=\"headerlink\" title=\"使用 LitePal 操作数据库\"></a>使用 LitePal 操作数据库</h2><p>简单说说，只要自己明白，会用就好！<a id=\"more\"></a></p>\n<h3 id=\"前记\"><a href=\"#前记\" class=\"headerlink\" title=\"前记\"></a>前记</h3><p>今天和一个同学聊天，发现我好久更新关于 Android 的文章了，于是在聊天之后，把上一次没看问完的数据持久化看了一遍，虽然没有码代码，但是把基本理论给清理了一下。算是温习以及新学吧。但是。。。啊，我的报告啊，报告没写完就来这里浪？明天爬不起来怎么能写完，说好的不熬夜呢。。。有时候来了心情自己也控制不了。。。于是。。。「2017-09-17 02:32:12」</p>\n<h3 id=\"关于-LitePal\"><a href=\"#关于-LitePal\" class=\"headerlink\" title=\"关于 LitePal\"></a>关于 LitePal</h3><p>LitePal 是一款开源的 Android 数据库框架，采用对象关系映射（ORM：Object Relational Mapping）的模式，对常用数据库功能封装，可以不必编写 SQL 语句就可完成建表和 CRUD。<a href=\"https://github.com/LitePalFramework/LitePal\" target=\"_blank\" rel=\"noopener\">LitePal 的 GitHub 地址</a>.</p>\n<h3 id=\"配置-LitePal\"><a href=\"#配置-LitePal\" class=\"headerlink\" title=\"配置 LitePal\"></a>配置 LitePal</h3><ol>\n<li><p>在依赖 dependencies 闭包中添加依赖。</p>\n<blockquote>\n<p>compile ‘org.litepal.android:core:1.6.0’</p>\n</blockquote>\n</li>\n<li><p>配置 app/src/main/assets/litepal.xml 文件。</p>\n<blockquote>\n<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<p> &lt;litepal&gt;</p>\n<p> &lt;dbname value=”BookStore” &gt;&lt;/dbname&gt;</p>\n<p> &lt;version value=”1” &gt;&lt;/version&gt;</p>\n<p> &lt;list&gt;<br> &lt;/list&gt;</p>\n<p>&lt;/litepal&gt;</p>\n</blockquote>\n<p>dbname 标签用于指定数据库名，version 标签用于指定版本号，list 标签用于指定所用的映射模型。</p>\n</li>\n<li><p>配置 AndroidManifest.xml</p>\n<blockquote>\n<p>在 application 标签下添加 <code></code>android:name=”org.litepal.LitePalApplication”</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>对象关系映射（ORM：Object Relational Mapping）</strong></p>\n<p>编程语言是面向对象语言，数据库为关系型数据库，将面向对象的语言与面向关系的数据库之间建立一种映射关系，即为对象关系映射。</p>\n<p>使用面向对象的思维来操做数据库，不需要使用 SQL 语句。</p>\n<h3 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h3><ol>\n<li><p>定义一个类，这个类将和数据库中要建立的表拥有相同的字段，也即类的字段和数据表的列是行对应的。如 Book 类与 Book 表有相同的字段。</p>\n</li>\n<li><p>将新建类添加到映射模型列表中。在 litepal.xml 文件中的 list 标签添加映射关系入下：&lt;mapping class=”com.包名.Book”&gt;&lt;/mapping&gt;，使用完整类名。</p>\n</li>\n<li><p>使用 <code>LitePal.getDatabase();</code> 完成创建表操作。</p>\n</li>\n<li><p>升级数据库版本，修改 litepal.xml 的 version 标签加 1 即可。会自动保留原有数据。</p>\n</li>\n<li><p><strong>进行 CRUD 操作时，需要使新建类继承 DataSupport 类。</strong></p>\n</li>\n<li><p>C 操作。添加新数据时，只需 new 一个对象，设置字段值，调用对象的 <code>.save()</code> 方法即可。</p>\n</li>\n<li><p>U 操作。区分对象是否已经存储，<code>model.isSaved()</code> 可用与判断，对于已经存储的对象，更改其值之后使用对象的 <code>.save()</code> 更新数据库；无论对象是否存储，使用对象的 <code>.updateAll()</code> 方法按条件进行更新（是已存储，则修改，否则添加吧）。将字段设置为默认值时需注意，Java 对象初始化时已有默认值，使用 <code>.setToDefault()</code> 操作。<strong>每新建一个类的对象时就相当于将新建或修改一条数据。</strong></p>\n</li>\n<li><p>D 操作。调用 <code>DataSupport.delete()</code> 方法即可。</p>\n</li>\n<li><p>R 操作。使用 <code>DataSupport.findAll()</code> 方法获得满足条件的新建类的对象的 List。</p>\n</li>\n</ol>\n<p>上述为个人认识，如有差错，可与我联系。学习资料为郭霖大神《第一行代码》的<strong>数据持久化</strong>章节的内容。</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<p><img src=\"/2017/09/17/使用-LitePal-操作数据库/night.jpg\" alt=\"\"></p>\n<h2 id=\"使用-LitePal-操作数据库\"><a href=\"#使用-LitePal-操作数据库\" class=\"headerlink\" title=\"使用 LitePal 操作数据库\"></a>使用 LitePal 操作数据库</h2><p>简单说说，只要自己明白，会用就好！</p>","more":"<p></p>\n<h3 id=\"前记\"><a href=\"#前记\" class=\"headerlink\" title=\"前记\"></a>前记</h3><p>今天和一个同学聊天，发现我好久更新关于 Android 的文章了，于是在聊天之后，把上一次没看问完的数据持久化看了一遍，虽然没有码代码，但是把基本理论给清理了一下。算是温习以及新学吧。但是。。。啊，我的报告啊，报告没写完就来这里浪？明天爬不起来怎么能写完，说好的不熬夜呢。。。有时候来了心情自己也控制不了。。。于是。。。「2017-09-17 02:32:12」</p>\n<h3 id=\"关于-LitePal\"><a href=\"#关于-LitePal\" class=\"headerlink\" title=\"关于 LitePal\"></a>关于 LitePal</h3><p>LitePal 是一款开源的 Android 数据库框架，采用对象关系映射（ORM：Object Relational Mapping）的模式，对常用数据库功能封装，可以不必编写 SQL 语句就可完成建表和 CRUD。<a href=\"https://github.com/LitePalFramework/LitePal\" target=\"_blank\" rel=\"noopener\">LitePal 的 GitHub 地址</a>.</p>\n<h3 id=\"配置-LitePal\"><a href=\"#配置-LitePal\" class=\"headerlink\" title=\"配置 LitePal\"></a>配置 LitePal</h3><ol>\n<li><p>在依赖 dependencies 闭包中添加依赖。</p>\n<blockquote>\n<p>compile ‘org.litepal.android:core:1.6.0’</p>\n</blockquote>\n</li>\n<li><p>配置 app/src/main/assets/litepal.xml 文件。</p>\n<blockquote>\n<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<p> &lt;litepal&gt;</p>\n<p> &lt;dbname value=”BookStore” &gt;&lt;/dbname&gt;</p>\n<p> &lt;version value=”1” &gt;&lt;/version&gt;</p>\n<p> &lt;list&gt;<br> &lt;/list&gt;</p>\n<p>&lt;/litepal&gt;</p>\n</blockquote>\n<p>dbname 标签用于指定数据库名，version 标签用于指定版本号，list 标签用于指定所用的映射模型。</p>\n</li>\n<li><p>配置 AndroidManifest.xml</p>\n<blockquote>\n<p>在 application 标签下添加 <code></code>android:name=”org.litepal.LitePalApplication”</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>对象关系映射（ORM：Object Relational Mapping）</strong></p>\n<p>编程语言是面向对象语言，数据库为关系型数据库，将面向对象的语言与面向关系的数据库之间建立一种映射关系，即为对象关系映射。</p>\n<p>使用面向对象的思维来操做数据库，不需要使用 SQL 语句。</p>\n<h3 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h3><ol>\n<li><p>定义一个类，这个类将和数据库中要建立的表拥有相同的字段，也即类的字段和数据表的列是行对应的。如 Book 类与 Book 表有相同的字段。</p>\n</li>\n<li><p>将新建类添加到映射模型列表中。在 litepal.xml 文件中的 list 标签添加映射关系入下：&lt;mapping class=”com.包名.Book”&gt;&lt;/mapping&gt;，使用完整类名。</p>\n</li>\n<li><p>使用 <code>LitePal.getDatabase();</code> 完成创建表操作。</p>\n</li>\n<li><p>升级数据库版本，修改 litepal.xml 的 version 标签加 1 即可。会自动保留原有数据。</p>\n</li>\n<li><p><strong>进行 CRUD 操作时，需要使新建类继承 DataSupport 类。</strong></p>\n</li>\n<li><p>C 操作。添加新数据时，只需 new 一个对象，设置字段值，调用对象的 <code>.save()</code> 方法即可。</p>\n</li>\n<li><p>U 操作。区分对象是否已经存储，<code>model.isSaved()</code> 可用与判断，对于已经存储的对象，更改其值之后使用对象的 <code>.save()</code> 更新数据库；无论对象是否存储，使用对象的 <code>.updateAll()</code> 方法按条件进行更新（是已存储，则修改，否则添加吧）。将字段设置为默认值时需注意，Java 对象初始化时已有默认值，使用 <code>.setToDefault()</code> 操作。<strong>每新建一个类的对象时就相当于将新建或修改一条数据。</strong></p>\n</li>\n<li><p>D 操作。调用 <code>DataSupport.delete()</code> 方法即可。</p>\n</li>\n<li><p>R 操作。使用 <code>DataSupport.findAll()</code> 方法获得满足条件的新建类的对象的 List。</p>\n</li>\n</ol>\n<p>上述为个人认识，如有差错，可与我联系。学习资料为郭霖大神《第一行代码》的<strong>数据持久化</strong>章节的内容。</p>\n<center> — end — </center>\n\n<hr>"},{"title":"如何使用Hexo和GitHub搭建博客","date":"2017-03-01T15:36:54.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![](如何使用Hexo和GitHub搭建博客/flower.jpg)\n\n好久没有更新博客，这篇博客是在我建立博客初期时就已经新建好的的，只是后面因为嫌麻烦并且写了其他的一些东西，以至于这篇本该是最初完成的博客竟被排到这个时候。今天上午打算把遗留的问题以及空有框架的博客正式的补全一下。「2017/3/25」\n<!--more-->\n## 前言\n写这个博客的原因主要有两点，一个是分享一下自己如何建立起这个博客的，尽可能详细的展现出来给大家。为什么分享？一个主要的原因就是我自己本省搭建这个博客的时候在网上搜索了各种各样的教程，但是不是所有的教程都是令人满意的。甚至在我看来，很多教程并不能成功的搭建起一个博客（其中可能是因为时间久远，以至于操作方法产生了很大的不同）。另一个就是作为我的一个「里程碑」式的记录吧。我想在这个博客上记录从今往后我在生活中遇到的一些问题，也可以记录一下自己的感受和体会，换言之，「以此志之」。\n\n## 准备工作\n在正式开始搭建博客之前，你需要进行一些准备工作。这些操作大多可以在[GitHub Pages](https://pages.github.com/) 的官方网站上看到，如果想看原文的可以点击跳转。\n1\\. 注册一个 GitHub 账号\n登录 [「GitHub」官网](https://github.com) 注册一个账号，点击注册进入注册页面。如下：\n![](如何使用Hexo和GitHub搭建博客/signup.png)\n填写相应的个人信息，按照流程走，一直到注册完成就可以了，\n\n2\\. 新建一个 repository\n注册好一个账号之后就要新建一个 repository，名称为 username.github.io，更改 username 为你的用户名。我的如下（因为我已经新建过了，所以我的会报错，最初新建是不会报错的）：\n![](如何使用Hexo和GitHub搭建博客/newrepository.png)\n\n3\\. 安装 Git\n如果已经安装了 Git 就可以跳过这个步骤。 [Git](https://git-scm.com/downloads) 可以在这里下载。安装过程应该不会有什么问题，随后在命令行中输入 git 命令，如果有响应，说明安装成功。如果失败，请自行 Google，此处就不再展开。\n运行 git bash，运行以下命令：\n``` bash\ncd f:\nmkdir GitHubBlog\ncd GitHubBlog\ngit clone https://github.com/username/username.github.io  //记得更改 username\ncd username.github.io\necho \"Hello World\" > index.html\ngit add --all\ngit commit -m \"Initial commit\"\ngit push -u origin master\n```\n此时，你就把远程的 repository 克隆到当前的「f:/GitHubBlog」目录之下了。并且在目录下创建了一个 index.html 文件。随后把本地代码块提交到了你的远端 GitHub 上面的 master 分支上。稍微等待后，你就可以在网址上输入 http://username.github.io 来看看效果。当然，现在网页上只出一行 Hello World，看上去很简陋，需要我们后面去完善它。该步骤完成。\n\n4\\. 安装 Node.js\n[Node.js](https://nodejs.org/zh-cn/) 可以在这里获取，选择合适自己的版本下载，按照提示安装即可。\n\n## 正式搭建\n经过上面的操作我们已经得到了一个博客的雏形，接下来就是对它进行美观与配置。此处是使用 Hexo 来进行博客框架的搭建。此时，我假设你已经成功完成了上述步骤。下面就要开始使用 Hexo，在命令行中运行如下代码：\n``` bash\nnpm install -g hexo-cli\n```\n\n此处是进行 hexo 的安装。下面的教程可以在 [Hexo](https://hexo.io) 官网看到，我只是进行了实例化而已。安装成功之后，在 git bash 中运行：\n``` bash\ncd F:/GitHubBLog\nhexo init Blog\ncd Blog\nnpm install\n```\n经过上面的代码之后，在「 F:/GitHubBLog」中新建了一个 Blog 文件夹，这就是以后我们管理博客的位置。此时，Hexo 已经帮我们建立好了博客的框架了。\n运行：\n``` bash\nhexo s --debug\n```\n在浏览器中输入 localhost:4000，就可以看到它给我们自动生成的第一篇「Hello World」博客。这篇博客里面介绍的将是我们经常使用的内容。\n到这里，搭建工作已经告一段落了。剩下的就是更换主题的工作了。更换主题要在「F:\\GitHubBlog\\Blog\\themes」中下载好主题，可以看到当前已经有一个「landscape」文件夹，那就是我们当前的主题。\n运行：\n``` bash\ncd themes\ngit clone https://github.com/iissnan/hexo-theme-next.git\n```\n就是转到 themes 文件夹，然后远程下载 next 主题。更多的主题可以去看 [hexo主题](https://hexo.io/themes/)。然后选中主题，再克隆到本地即可。\n下载完成之后，修改 「Blog/_config.yml」 文件中的 theme 的值为：hexo-theme-next，即那你要使用的主题名称。如图：\n![](如何使用Hexo和GitHub搭建博客/themes.png \"themes.png\")\n\n\n## 新建博客\n完成了上述的操作之后，我们已经把博客的框架搭建好了。下面来尝试新建一个新的文章。这些内容可以在自动生成的Hello World」中看到。这里就简单写一下。\n运行：\n``` bash\nhexo n \"新文章名\"\n```\n自动在「source/_posts」文件夹下生成了「新文章名.md」文件，这个就是博客的主体。使用 Sublime Text 或者 Atom 等支持 Markdown 语法的文本编辑器编写内容。\n``` bash\nhexo s --debug\n```\n在 debug 模式下运行本地服务器，可以在浏览器中查看当前的博客状态。参数 --debug 非必须。\n``` bash\nhexo g --debug\n```\n在「Blog/public」生成静态文件。建议修改生成的位置，否则每次生成之后都要赋值到本地的 username.github.io 代码库中，很麻烦。\n打开「Blog/_config.yml」文件，修改 public_dir 的值为我们的代码库的位置。如图：\n![](如何使用Hexo和GitHub搭建博客/public.png)\n提交到远程代码库，运行：\n``` bash\nhexo d --debug -m \"message\"\n```\nmessage 为此次提交的信息。提交成功之后，就可以访问 http://username.github.io 查看你的博客的最新动态了。\n\n## 后记\n到此，我们就已经完成了博客的搭建了，并且还新建了一篇文章。上面介绍了一些基本的操作，但是并不只有这些操作，如果在实践的过程中遇到问题，可以邮件(tangqihaopku@gmail.com)联系我。当然，在整个过程中，我们需要配置的主要是「Blog/_config.yml」和「Blog/themes/hexo-theme-next/_config.yml」文件，只要把它们设置好了就没有多大问题了。\n\n\n### 补充--关于更换电脑之后更新博客的问题\n可以参考知乎上的这个问题的答案：[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)。我采用的是 CrazyMilk 的解决方式。\n\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/如何使用Hexo和GitHub搭建博客.md","raw":"---\ntitle: 如何使用Hexo和GitHub搭建博客\ndate: 2017-03-01 23:36:54\ntags: 技术\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![](如何使用Hexo和GitHub搭建博客/flower.jpg)\n\n好久没有更新博客，这篇博客是在我建立博客初期时就已经新建好的的，只是后面因为嫌麻烦并且写了其他的一些东西，以至于这篇本该是最初完成的博客竟被排到这个时候。今天上午打算把遗留的问题以及空有框架的博客正式的补全一下。「2017/3/25」\n<!--more-->\n## 前言\n写这个博客的原因主要有两点，一个是分享一下自己如何建立起这个博客的，尽可能详细的展现出来给大家。为什么分享？一个主要的原因就是我自己本省搭建这个博客的时候在网上搜索了各种各样的教程，但是不是所有的教程都是令人满意的。甚至在我看来，很多教程并不能成功的搭建起一个博客（其中可能是因为时间久远，以至于操作方法产生了很大的不同）。另一个就是作为我的一个「里程碑」式的记录吧。我想在这个博客上记录从今往后我在生活中遇到的一些问题，也可以记录一下自己的感受和体会，换言之，「以此志之」。\n\n## 准备工作\n在正式开始搭建博客之前，你需要进行一些准备工作。这些操作大多可以在[GitHub Pages](https://pages.github.com/) 的官方网站上看到，如果想看原文的可以点击跳转。\n1\\. 注册一个 GitHub 账号\n登录 [「GitHub」官网](https://github.com) 注册一个账号，点击注册进入注册页面。如下：\n![](如何使用Hexo和GitHub搭建博客/signup.png)\n填写相应的个人信息，按照流程走，一直到注册完成就可以了，\n\n2\\. 新建一个 repository\n注册好一个账号之后就要新建一个 repository，名称为 username.github.io，更改 username 为你的用户名。我的如下（因为我已经新建过了，所以我的会报错，最初新建是不会报错的）：\n![](如何使用Hexo和GitHub搭建博客/newrepository.png)\n\n3\\. 安装 Git\n如果已经安装了 Git 就可以跳过这个步骤。 [Git](https://git-scm.com/downloads) 可以在这里下载。安装过程应该不会有什么问题，随后在命令行中输入 git 命令，如果有响应，说明安装成功。如果失败，请自行 Google，此处就不再展开。\n运行 git bash，运行以下命令：\n``` bash\ncd f:\nmkdir GitHubBlog\ncd GitHubBlog\ngit clone https://github.com/username/username.github.io  //记得更改 username\ncd username.github.io\necho \"Hello World\" > index.html\ngit add --all\ngit commit -m \"Initial commit\"\ngit push -u origin master\n```\n此时，你就把远程的 repository 克隆到当前的「f:/GitHubBlog」目录之下了。并且在目录下创建了一个 index.html 文件。随后把本地代码块提交到了你的远端 GitHub 上面的 master 分支上。稍微等待后，你就可以在网址上输入 http://username.github.io 来看看效果。当然，现在网页上只出一行 Hello World，看上去很简陋，需要我们后面去完善它。该步骤完成。\n\n4\\. 安装 Node.js\n[Node.js](https://nodejs.org/zh-cn/) 可以在这里获取，选择合适自己的版本下载，按照提示安装即可。\n\n## 正式搭建\n经过上面的操作我们已经得到了一个博客的雏形，接下来就是对它进行美观与配置。此处是使用 Hexo 来进行博客框架的搭建。此时，我假设你已经成功完成了上述步骤。下面就要开始使用 Hexo，在命令行中运行如下代码：\n``` bash\nnpm install -g hexo-cli\n```\n\n此处是进行 hexo 的安装。下面的教程可以在 [Hexo](https://hexo.io) 官网看到，我只是进行了实例化而已。安装成功之后，在 git bash 中运行：\n``` bash\ncd F:/GitHubBLog\nhexo init Blog\ncd Blog\nnpm install\n```\n经过上面的代码之后，在「 F:/GitHubBLog」中新建了一个 Blog 文件夹，这就是以后我们管理博客的位置。此时，Hexo 已经帮我们建立好了博客的框架了。\n运行：\n``` bash\nhexo s --debug\n```\n在浏览器中输入 localhost:4000，就可以看到它给我们自动生成的第一篇「Hello World」博客。这篇博客里面介绍的将是我们经常使用的内容。\n到这里，搭建工作已经告一段落了。剩下的就是更换主题的工作了。更换主题要在「F:\\GitHubBlog\\Blog\\themes」中下载好主题，可以看到当前已经有一个「landscape」文件夹，那就是我们当前的主题。\n运行：\n``` bash\ncd themes\ngit clone https://github.com/iissnan/hexo-theme-next.git\n```\n就是转到 themes 文件夹，然后远程下载 next 主题。更多的主题可以去看 [hexo主题](https://hexo.io/themes/)。然后选中主题，再克隆到本地即可。\n下载完成之后，修改 「Blog/_config.yml」 文件中的 theme 的值为：hexo-theme-next，即那你要使用的主题名称。如图：\n![](如何使用Hexo和GitHub搭建博客/themes.png \"themes.png\")\n\n\n## 新建博客\n完成了上述的操作之后，我们已经把博客的框架搭建好了。下面来尝试新建一个新的文章。这些内容可以在自动生成的Hello World」中看到。这里就简单写一下。\n运行：\n``` bash\nhexo n \"新文章名\"\n```\n自动在「source/_posts」文件夹下生成了「新文章名.md」文件，这个就是博客的主体。使用 Sublime Text 或者 Atom 等支持 Markdown 语法的文本编辑器编写内容。\n``` bash\nhexo s --debug\n```\n在 debug 模式下运行本地服务器，可以在浏览器中查看当前的博客状态。参数 --debug 非必须。\n``` bash\nhexo g --debug\n```\n在「Blog/public」生成静态文件。建议修改生成的位置，否则每次生成之后都要赋值到本地的 username.github.io 代码库中，很麻烦。\n打开「Blog/_config.yml」文件，修改 public_dir 的值为我们的代码库的位置。如图：\n![](如何使用Hexo和GitHub搭建博客/public.png)\n提交到远程代码库，运行：\n``` bash\nhexo d --debug -m \"message\"\n```\nmessage 为此次提交的信息。提交成功之后，就可以访问 http://username.github.io 查看你的博客的最新动态了。\n\n## 后记\n到此，我们就已经完成了博客的搭建了，并且还新建了一篇文章。上面介绍了一些基本的操作，但是并不只有这些操作，如果在实践的过程中遇到问题，可以邮件(tangqihaopku@gmail.com)联系我。当然，在整个过程中，我们需要配置的主要是「Blog/_config.yml」和「Blog/themes/hexo-theme-next/_config.yml」文件，只要把它们设置好了就没有多大问题了。\n\n\n### 补充--关于更换电脑之后更新博客的问题\n可以参考知乎上的这个问题的答案：[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)。我采用的是 CrazyMilk 的解决方式。\n\n\n<center> --- end --- </center>\n\n---\n","slug":"如何使用Hexo和GitHub搭建博客","published":1,"updated":"2019-05-10T16:14:30.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxr001k5cv9vy44isse","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/flower.jpg\" alt=\"\"></p>\n<p>好久没有更新博客，这篇博客是在我建立博客初期时就已经新建好的的，只是后面因为嫌麻烦并且写了其他的一些东西，以至于这篇本该是最初完成的博客竟被排到这个时候。今天上午打算把遗留的问题以及空有框架的博客正式的补全一下。「2017/3/25」<br><a id=\"more\"></a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写这个博客的原因主要有两点，一个是分享一下自己如何建立起这个博客的，尽可能详细的展现出来给大家。为什么分享？一个主要的原因就是我自己本省搭建这个博客的时候在网上搜索了各种各样的教程，但是不是所有的教程都是令人满意的。甚至在我看来，很多教程并不能成功的搭建起一个博客（其中可能是因为时间久远，以至于操作方法产生了很大的不同）。另一个就是作为我的一个「里程碑」式的记录吧。我想在这个博客上记录从今往后我在生活中遇到的一些问题，也可以记录一下自己的感受和体会，换言之，「以此志之」。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在正式开始搭建博客之前，你需要进行一些准备工作。这些操作大多可以在<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a> 的官方网站上看到，如果想看原文的可以点击跳转。<br>1. 注册一个 GitHub 账号<br>登录 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">「GitHub」官网</a> 注册一个账号，点击注册进入注册页面。如下：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/signup.png\" alt=\"\"><br>填写相应的个人信息，按照流程走，一直到注册完成就可以了，</p>\n<p>2. 新建一个 repository<br>注册好一个账号之后就要新建一个 repository，名称为 username.github.io，更改 username 为你的用户名。我的如下（因为我已经新建过了，所以我的会报错，最初新建是不会报错的）：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/newrepository.png\" alt=\"\"></p>\n<p>3. 安装 Git<br>如果已经安装了 Git 就可以跳过这个步骤。 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a> 可以在这里下载。安装过程应该不会有什么问题，随后在命令行中输入 git 命令，如果有响应，说明安装成功。如果失败，请自行 Google，此处就不再展开。<br>运行 git bash，运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> f:</span><br><span class=\"line\">mkdir GitHubBlog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> GitHubBlog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/username/username.github.io  //记得更改 username</span><br><span class=\"line\"><span class=\"built_in\">cd</span> username.github.io</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; index.html</span><br><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Initial commit\"</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>此时，你就把远程的 repository 克隆到当前的「f:/GitHubBlog」目录之下了。并且在目录下创建了一个 index.html 文件。随后把本地代码块提交到了你的远端 GitHub 上面的 master 分支上。稍微等待后，你就可以在网址上输入 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来看看效果。当然，现在网页上只出一行 Hello World，看上去很简陋，需要我们后面去完善它。该步骤完成。</p>\n<p>4. 安装 Node.js<br><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 可以在这里获取，选择合适自己的版本下载，按照提示安装即可。</p>\n<h2 id=\"正式搭建\"><a href=\"#正式搭建\" class=\"headerlink\" title=\"正式搭建\"></a>正式搭建</h2><p>经过上面的操作我们已经得到了一个博客的雏形，接下来就是对它进行美观与配置。此处是使用 Hexo 来进行博客框架的搭建。此时，我假设你已经成功完成了上述步骤。下面就要开始使用 Hexo，在命令行中运行如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>此处是进行 hexo 的安装。下面的教程可以在 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 官网看到，我只是进行了实例化而已。安装成功之后，在 git bash 中运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> F:/GitHubBLog</span><br><span class=\"line\">hexo init Blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>经过上面的代码之后，在「 F:/GitHubBLog」中新建了一个 Blog 文件夹，这就是以后我们管理博客的位置。此时，Hexo 已经帮我们建立好了博客的框架了。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中输入 localhost:4000，就可以看到它给我们自动生成的第一篇「Hello World」博客。这篇博客里面介绍的将是我们经常使用的内容。<br>到这里，搭建工作已经告一段落了。剩下的就是更换主题的工作了。更换主题要在「F:\\GitHubBlog\\Blog\\themes」中下载好主题，可以看到当前已经有一个「landscape」文件夹，那就是我们当前的主题。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure></p>\n<p>就是转到 themes 文件夹，然后远程下载 next 主题。更多的主题可以去看 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>。然后选中主题，再克隆到本地即可。<br>下载完成之后，修改 「Blog/_config.yml」 文件中的 theme 的值为：hexo-theme-next，即那你要使用的主题名称。如图：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/themes.png\" alt=\"\" title=\"themes.png\"></p>\n<h2 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h2><p>完成了上述的操作之后，我们已经把博客的框架搭建好了。下面来尝试新建一个新的文章。这些内容可以在自动生成的Hello World」中看到。这里就简单写一下。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">\"新文章名\"</span></span><br></pre></td></tr></table></figure></p>\n<p>自动在「source/_posts」文件夹下生成了「新文章名.md」文件，这个就是博客的主体。使用 Sublime Text 或者 Atom 等支持 Markdown 语法的文本编辑器编写内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>在 debug 模式下运行本地服务器，可以在浏览器中查看当前的博客状态。参数 –debug 非必须。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g --debug</span><br></pre></td></tr></table></figure></p>\n<p>在「Blog/public」生成静态文件。建议修改生成的位置，否则每次生成之后都要赋值到本地的 username.github.io 代码库中，很麻烦。<br>打开「Blog/_config.yml」文件，修改 public_dir 的值为我们的代码库的位置。如图：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/public.png\" alt=\"\"><br>提交到远程代码库，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d --debug -m <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>message 为此次提交的信息。提交成功之后，就可以访问 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 查看你的博客的最新动态了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>到此，我们就已经完成了博客的搭建了，并且还新建了一篇文章。上面介绍了一些基本的操作，但是并不只有这些操作，如果在实践的过程中遇到问题，可以邮件(<a href=\"mailto:tangqihaopku@gmail.com\" target=\"_blank\" rel=\"noopener\">tangqihaopku@gmail.com</a>)联系我。当然，在整个过程中，我们需要配置的主要是「Blog/_config.yml」和「Blog/themes/hexo-theme-next/_config.yml」文件，只要把它们设置好了就没有多大问题了。</p>\n<h3 id=\"补充–关于更换电脑之后更新博客的问题\"><a href=\"#补充–关于更换电脑之后更新博客的问题\" class=\"headerlink\" title=\"补充–关于更换电脑之后更新博客的问题\"></a>补充–关于更换电脑之后更新博客的问题</h3><p>可以参考知乎上的这个问题的答案：<a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？</a>。我采用的是 CrazyMilk 的解决方式。</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/flower.jpg\" alt=\"\"></p>\n<p>好久没有更新博客，这篇博客是在我建立博客初期时就已经新建好的的，只是后面因为嫌麻烦并且写了其他的一些东西，以至于这篇本该是最初完成的博客竟被排到这个时候。今天上午打算把遗留的问题以及空有框架的博客正式的补全一下。「2017/3/25」<br></p>","more":"<p></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写这个博客的原因主要有两点，一个是分享一下自己如何建立起这个博客的，尽可能详细的展现出来给大家。为什么分享？一个主要的原因就是我自己本省搭建这个博客的时候在网上搜索了各种各样的教程，但是不是所有的教程都是令人满意的。甚至在我看来，很多教程并不能成功的搭建起一个博客（其中可能是因为时间久远，以至于操作方法产生了很大的不同）。另一个就是作为我的一个「里程碑」式的记录吧。我想在这个博客上记录从今往后我在生活中遇到的一些问题，也可以记录一下自己的感受和体会，换言之，「以此志之」。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在正式开始搭建博客之前，你需要进行一些准备工作。这些操作大多可以在<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a> 的官方网站上看到，如果想看原文的可以点击跳转。<br>1. 注册一个 GitHub 账号<br>登录 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">「GitHub」官网</a> 注册一个账号，点击注册进入注册页面。如下：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/signup.png\" alt=\"\"><br>填写相应的个人信息，按照流程走，一直到注册完成就可以了，</p>\n<p>2. 新建一个 repository<br>注册好一个账号之后就要新建一个 repository，名称为 username.github.io，更改 username 为你的用户名。我的如下（因为我已经新建过了，所以我的会报错，最初新建是不会报错的）：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/newrepository.png\" alt=\"\"></p>\n<p>3. 安装 Git<br>如果已经安装了 Git 就可以跳过这个步骤。 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a> 可以在这里下载。安装过程应该不会有什么问题，随后在命令行中输入 git 命令，如果有响应，说明安装成功。如果失败，请自行 Google，此处就不再展开。<br>运行 git bash，运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> f:</span><br><span class=\"line\">mkdir GitHubBlog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> GitHubBlog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/username/username.github.io  //记得更改 username</span><br><span class=\"line\"><span class=\"built_in\">cd</span> username.github.io</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; index.html</span><br><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Initial commit\"</span></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>此时，你就把远程的 repository 克隆到当前的「f:/GitHubBlog」目录之下了。并且在目录下创建了一个 index.html 文件。随后把本地代码块提交到了你的远端 GitHub 上面的 master 分支上。稍微等待后，你就可以在网址上输入 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来看看效果。当然，现在网页上只出一行 Hello World，看上去很简陋，需要我们后面去完善它。该步骤完成。</p>\n<p>4. 安装 Node.js<br><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 可以在这里获取，选择合适自己的版本下载，按照提示安装即可。</p>\n<h2 id=\"正式搭建\"><a href=\"#正式搭建\" class=\"headerlink\" title=\"正式搭建\"></a>正式搭建</h2><p>经过上面的操作我们已经得到了一个博客的雏形，接下来就是对它进行美观与配置。此处是使用 Hexo 来进行博客框架的搭建。此时，我假设你已经成功完成了上述步骤。下面就要开始使用 Hexo，在命令行中运行如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>此处是进行 hexo 的安装。下面的教程可以在 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 官网看到，我只是进行了实例化而已。安装成功之后，在 git bash 中运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> F:/GitHubBLog</span><br><span class=\"line\">hexo init Blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>经过上面的代码之后，在「 F:/GitHubBLog」中新建了一个 Blog 文件夹，这就是以后我们管理博客的位置。此时，Hexo 已经帮我们建立好了博客的框架了。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中输入 localhost:4000，就可以看到它给我们自动生成的第一篇「Hello World」博客。这篇博客里面介绍的将是我们经常使用的内容。<br>到这里，搭建工作已经告一段落了。剩下的就是更换主题的工作了。更换主题要在「F:\\GitHubBlog\\Blog\\themes」中下载好主题，可以看到当前已经有一个「landscape」文件夹，那就是我们当前的主题。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure></p>\n<p>就是转到 themes 文件夹，然后远程下载 next 主题。更多的主题可以去看 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>。然后选中主题，再克隆到本地即可。<br>下载完成之后，修改 「Blog/_config.yml」 文件中的 theme 的值为：hexo-theme-next，即那你要使用的主题名称。如图：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/themes.png\" alt=\"\" title=\"themes.png\"></p>\n<h2 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h2><p>完成了上述的操作之后，我们已经把博客的框架搭建好了。下面来尝试新建一个新的文章。这些内容可以在自动生成的Hello World」中看到。这里就简单写一下。<br>运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">\"新文章名\"</span></span><br></pre></td></tr></table></figure></p>\n<p>自动在「source/_posts」文件夹下生成了「新文章名.md」文件，这个就是博客的主体。使用 Sublime Text 或者 Atom 等支持 Markdown 语法的文本编辑器编写内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>在 debug 模式下运行本地服务器，可以在浏览器中查看当前的博客状态。参数 –debug 非必须。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g --debug</span><br></pre></td></tr></table></figure></p>\n<p>在「Blog/public」生成静态文件。建议修改生成的位置，否则每次生成之后都要赋值到本地的 username.github.io 代码库中，很麻烦。<br>打开「Blog/_config.yml」文件，修改 public_dir 的值为我们的代码库的位置。如图：<br><img src=\"/2017/03/01/如何使用Hexo和GitHub搭建博客/public.png\" alt=\"\"><br>提交到远程代码库，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d --debug -m <span class=\"string\">\"message\"</span></span><br></pre></td></tr></table></figure></p>\n<p>message 为此次提交的信息。提交成功之后，就可以访问 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 查看你的博客的最新动态了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>到此，我们就已经完成了博客的搭建了，并且还新建了一篇文章。上面介绍了一些基本的操作，但是并不只有这些操作，如果在实践的过程中遇到问题，可以邮件(<a href=\"mailto:tangqihaopku@gmail.com\" target=\"_blank\" rel=\"noopener\">tangqihaopku@gmail.com</a>)联系我。当然，在整个过程中，我们需要配置的主要是「Blog/_config.yml」和「Blog/themes/hexo-theme-next/_config.yml」文件，只要把它们设置好了就没有多大问题了。</p>\n<h3 id=\"补充–关于更换电脑之后更新博客的问题\"><a href=\"#补充–关于更换电脑之后更新博客的问题\" class=\"headerlink\" title=\"补充–关于更换电脑之后更新博客的问题\"></a>补充–关于更换电脑之后更新博客的问题</h3><p>可以参考知乎上的这个问题的答案：<a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？</a>。我采用的是 CrazyMilk 的解决方式。</p>\n<center> — end — </center>\n\n<hr>"},{"title":"常用的hexo和git命令","date":"2017-03-10T02:03:04.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![](常用的hexo和git命令-备查/beautyhouse.jpg)\n\n### 写在前面\n\n对于使用hexo和git搭建的博客的人来说，熟悉一些常用的hexo和git命令是非常必要的，以下是我\n现阶段经常使用到的一些命令，忘记的时候可以打开博客查看一下。我会把自己在学习过程中所遇\n到的命令更新到这里，长时间维持更新。\n<!--more-->\n### 常用的hexo命令\n1\\. 生成新页面\n首先，安装好hexo和git之后要新建一个新的页面，这时候我们需要运行\n\n> hexo n \"new_post_title\"  //输入新的页面的名称\n\n于是hexo就会在source/\\_post/文件夹下生成名为new_post_title的.md文件，我们可以使用支持\nMarkdown语法的文本编辑器如sublime Text系列、Atom等打开.md文件编写我们的文件内容了。\n\n2\\. 在本地进行预览\n当我们编写好了我们的.md文件，我们可能想在本地进行一下预览，看看效果，于是我们可以使用：\n> hexo s  //等待完成之后可以在本机的4000端口查看我们的博客效果\n> heo s --debug  //使用debug模式，我们可以通过控制台看到浏览器向我们的服务器获取了那些\n内容，可以知道我们项目存在那些问题\n\n3\\. 生成正式文件\n经过本地预览没有问题之后，我们基本上就可以生成用于发布的文件了，使用：\n> hexo g  //生产项目的正式文件，用于发布，默认保存在public文件夹之下，可以通过修改配置\n使得生成在github.io的文件目录下。\n> hexo g --debug  //和上面的相似，可以看到生成的过程\n\n4\\. 发布到github服务器\n经过上述的步骤之后，我们基本已经完成了所有的内容了，剩下的就是将本地文件上传到github上面，就可以在任意一台电脑对博客进行访问了。\n> hexo deploy //发布到服务器\n> hexo deploy --debug -m [message]  //如果使用这个命令就进入debug模式并且commit的信息为message\n\n### 常用git命令\n> git init //在当前文件夹生成一个代码库\n> git add [filename]  //把filename文件加入缓冲区中，等待提交\n> git add .  //把当前目录下所有文件都放入缓冲区中，等待提交\n> git commit -m [message]  //生成提交，提交信息为commit，并清空缓冲区内容\n\n### 特别：\n> 用hexo搭建的博客使用图片时，需要设置配置文件.config.yml文件中的\n> post_asset_folder: true\n此时在source/\\_post/中生成和页面同名的文件夹，用于存储图片等资源，在markdown中调用时写成(文件夹名/图片名)即可，如果是对于早前没有生成文件夹的压面需要手动生成了。\n\n----\n\n### 最后\n\n更多关于 Git 的基础知识介绍，可以查看这篇博客[一个小时学会 Git](1)，介绍的十分详细，非常适合初级学者。\n\n这应该是本文的最后一次更新，借用了他人的劳动成果，自己整理起来可能没有上述链接文章这么好。[2017年9月10日09:53:37]\n\n[1]: http://www.cnblogs.com/best/p/7474442.html \"Learn Git in one hour\"\n<center> --- end --- </center>\n\n---\n","source":"_posts/常用的hexo和git命令-备查.md","raw":"---\ntitle: 常用的hexo和git命令\ndate: 2017-03-10 10:03:04\ntags: [hexo,git]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![](常用的hexo和git命令-备查/beautyhouse.jpg)\n\n### 写在前面\n\n对于使用hexo和git搭建的博客的人来说，熟悉一些常用的hexo和git命令是非常必要的，以下是我\n现阶段经常使用到的一些命令，忘记的时候可以打开博客查看一下。我会把自己在学习过程中所遇\n到的命令更新到这里，长时间维持更新。\n<!--more-->\n### 常用的hexo命令\n1\\. 生成新页面\n首先，安装好hexo和git之后要新建一个新的页面，这时候我们需要运行\n\n> hexo n \"new_post_title\"  //输入新的页面的名称\n\n于是hexo就会在source/\\_post/文件夹下生成名为new_post_title的.md文件，我们可以使用支持\nMarkdown语法的文本编辑器如sublime Text系列、Atom等打开.md文件编写我们的文件内容了。\n\n2\\. 在本地进行预览\n当我们编写好了我们的.md文件，我们可能想在本地进行一下预览，看看效果，于是我们可以使用：\n> hexo s  //等待完成之后可以在本机的4000端口查看我们的博客效果\n> heo s --debug  //使用debug模式，我们可以通过控制台看到浏览器向我们的服务器获取了那些\n内容，可以知道我们项目存在那些问题\n\n3\\. 生成正式文件\n经过本地预览没有问题之后，我们基本上就可以生成用于发布的文件了，使用：\n> hexo g  //生产项目的正式文件，用于发布，默认保存在public文件夹之下，可以通过修改配置\n使得生成在github.io的文件目录下。\n> hexo g --debug  //和上面的相似，可以看到生成的过程\n\n4\\. 发布到github服务器\n经过上述的步骤之后，我们基本已经完成了所有的内容了，剩下的就是将本地文件上传到github上面，就可以在任意一台电脑对博客进行访问了。\n> hexo deploy //发布到服务器\n> hexo deploy --debug -m [message]  //如果使用这个命令就进入debug模式并且commit的信息为message\n\n### 常用git命令\n> git init //在当前文件夹生成一个代码库\n> git add [filename]  //把filename文件加入缓冲区中，等待提交\n> git add .  //把当前目录下所有文件都放入缓冲区中，等待提交\n> git commit -m [message]  //生成提交，提交信息为commit，并清空缓冲区内容\n\n### 特别：\n> 用hexo搭建的博客使用图片时，需要设置配置文件.config.yml文件中的\n> post_asset_folder: true\n此时在source/\\_post/中生成和页面同名的文件夹，用于存储图片等资源，在markdown中调用时写成(文件夹名/图片名)即可，如果是对于早前没有生成文件夹的压面需要手动生成了。\n\n----\n\n### 最后\n\n更多关于 Git 的基础知识介绍，可以查看这篇博客[一个小时学会 Git](1)，介绍的十分详细，非常适合初级学者。\n\n这应该是本文的最后一次更新，借用了他人的劳动成果，自己整理起来可能没有上述链接文章这么好。[2017年9月10日09:53:37]\n\n[1]: http://www.cnblogs.com/best/p/7474442.html \"Learn Git in one hour\"\n<center> --- end --- </center>\n\n---\n","slug":"常用的hexo和git命令-备查","published":1,"updated":"2019-05-10T16:14:30.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxu001o5cv9otttjvwn","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/10/常用的hexo和git命令-备查/beautyhouse.jpg\" alt=\"\"></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>对于使用hexo和git搭建的博客的人来说，熟悉一些常用的hexo和git命令是非常必要的，以下是我<br>现阶段经常使用到的一些命令，忘记的时候可以打开博客查看一下。我会把自己在学习过程中所遇<br>到的命令更新到这里，长时间维持更新。<br><a id=\"more\"></a></p>\n<h3 id=\"常用的hexo命令\"><a href=\"#常用的hexo命令\" class=\"headerlink\" title=\"常用的hexo命令\"></a>常用的hexo命令</h3><p>1. 生成新页面<br>首先，安装好hexo和git之后要新建一个新的页面，这时候我们需要运行</p>\n<blockquote>\n<p>hexo n “new_post_title”  //输入新的页面的名称</p>\n</blockquote>\n<p>于是hexo就会在source/_post/文件夹下生成名为new_post_title的.md文件，我们可以使用支持<br>Markdown语法的文本编辑器如sublime Text系列、Atom等打开.md文件编写我们的文件内容了。</p>\n<p>2. 在本地进行预览<br>当我们编写好了我们的.md文件，我们可能想在本地进行一下预览，看看效果，于是我们可以使用：</p>\n<blockquote>\n<p>hexo s  //等待完成之后可以在本机的4000端口查看我们的博客效果<br>heo s –debug  //使用debug模式，我们可以通过控制台看到浏览器向我们的服务器获取了那些<br>内容，可以知道我们项目存在那些问题</p>\n</blockquote>\n<p>3. 生成正式文件<br>经过本地预览没有问题之后，我们基本上就可以生成用于发布的文件了，使用：</p>\n<blockquote>\n<p>hexo g  //生产项目的正式文件，用于发布，默认保存在public文件夹之下，可以通过修改配置<br>使得生成在github.io的文件目录下。<br>hexo g –debug  //和上面的相似，可以看到生成的过程</p>\n</blockquote>\n<p>4. 发布到github服务器<br>经过上述的步骤之后，我们基本已经完成了所有的内容了，剩下的就是将本地文件上传到github上面，就可以在任意一台电脑对博客进行访问了。</p>\n<blockquote>\n<p>hexo deploy //发布到服务器<br>hexo deploy –debug -m [message]  //如果使用这个命令就进入debug模式并且commit的信息为message</p>\n</blockquote>\n<h3 id=\"常用git命令\"><a href=\"#常用git命令\" class=\"headerlink\" title=\"常用git命令\"></a>常用git命令</h3><blockquote>\n<p>git init //在当前文件夹生成一个代码库<br>git add [filename]  //把filename文件加入缓冲区中，等待提交<br>git add .  //把当前目录下所有文件都放入缓冲区中，等待提交<br>git commit -m [message]  //生成提交，提交信息为commit，并清空缓冲区内容</p>\n</blockquote>\n<h3 id=\"特别：\"><a href=\"#特别：\" class=\"headerlink\" title=\"特别：\"></a>特别：</h3><blockquote>\n<p>用hexo搭建的博客使用图片时，需要设置配置文件.config.yml文件中的<br>post_asset_folder: true<br>此时在source/_post/中生成和页面同名的文件夹，用于存储图片等资源，在markdown中调用时写成(文件夹名/图片名)即可，如果是对于早前没有生成文件夹的压面需要手动生成了。</p>\n</blockquote>\n<hr>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>更多关于 Git 的基础知识介绍，可以查看这篇博客<a href=\"1\">一个小时学会 Git</a>，介绍的十分详细，非常适合初级学者。</p>\n<p>这应该是本文的最后一次更新，借用了他人的劳动成果，自己整理起来可能没有上述链接文章这么好。[2017年9月10日09:53:37]</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/10/常用的hexo和git命令-备查/beautyhouse.jpg\" alt=\"\"></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>对于使用hexo和git搭建的博客的人来说，熟悉一些常用的hexo和git命令是非常必要的，以下是我<br>现阶段经常使用到的一些命令，忘记的时候可以打开博客查看一下。我会把自己在学习过程中所遇<br>到的命令更新到这里，长时间维持更新。<br></p>","more":"<p></p>\n<h3 id=\"常用的hexo命令\"><a href=\"#常用的hexo命令\" class=\"headerlink\" title=\"常用的hexo命令\"></a>常用的hexo命令</h3><p>1. 生成新页面<br>首先，安装好hexo和git之后要新建一个新的页面，这时候我们需要运行</p>\n<blockquote>\n<p>hexo n “new_post_title”  //输入新的页面的名称</p>\n</blockquote>\n<p>于是hexo就会在source/_post/文件夹下生成名为new_post_title的.md文件，我们可以使用支持<br>Markdown语法的文本编辑器如sublime Text系列、Atom等打开.md文件编写我们的文件内容了。</p>\n<p>2. 在本地进行预览<br>当我们编写好了我们的.md文件，我们可能想在本地进行一下预览，看看效果，于是我们可以使用：</p>\n<blockquote>\n<p>hexo s  //等待完成之后可以在本机的4000端口查看我们的博客效果<br>heo s –debug  //使用debug模式，我们可以通过控制台看到浏览器向我们的服务器获取了那些<br>内容，可以知道我们项目存在那些问题</p>\n</blockquote>\n<p>3. 生成正式文件<br>经过本地预览没有问题之后，我们基本上就可以生成用于发布的文件了，使用：</p>\n<blockquote>\n<p>hexo g  //生产项目的正式文件，用于发布，默认保存在public文件夹之下，可以通过修改配置<br>使得生成在github.io的文件目录下。<br>hexo g –debug  //和上面的相似，可以看到生成的过程</p>\n</blockquote>\n<p>4. 发布到github服务器<br>经过上述的步骤之后，我们基本已经完成了所有的内容了，剩下的就是将本地文件上传到github上面，就可以在任意一台电脑对博客进行访问了。</p>\n<blockquote>\n<p>hexo deploy //发布到服务器<br>hexo deploy –debug -m [message]  //如果使用这个命令就进入debug模式并且commit的信息为message</p>\n</blockquote>\n<h3 id=\"常用git命令\"><a href=\"#常用git命令\" class=\"headerlink\" title=\"常用git命令\"></a>常用git命令</h3><blockquote>\n<p>git init //在当前文件夹生成一个代码库<br>git add [filename]  //把filename文件加入缓冲区中，等待提交<br>git add .  //把当前目录下所有文件都放入缓冲区中，等待提交<br>git commit -m [message]  //生成提交，提交信息为commit，并清空缓冲区内容</p>\n</blockquote>\n<h3 id=\"特别：\"><a href=\"#特别：\" class=\"headerlink\" title=\"特别：\"></a>特别：</h3><blockquote>\n<p>用hexo搭建的博客使用图片时，需要设置配置文件.config.yml文件中的<br>post_asset_folder: true<br>此时在source/_post/中生成和页面同名的文件夹，用于存储图片等资源，在markdown中调用时写成(文件夹名/图片名)即可，如果是对于早前没有生成文件夹的压面需要手动生成了。</p>\n</blockquote>\n<hr>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>更多关于 Git 的基础知识介绍，可以查看这篇博客<a href=\"1\">一个小时学会 Git</a>，介绍的十分详细，非常适合初级学者。</p>\n<p>这应该是本文的最后一次更新，借用了他人的劳动成果，自己整理起来可能没有上述链接文章这么好。[2017年9月10日09:53:37]</p>\n<center> — end — </center>\n\n<hr>"},{"title":"慌慌张张 匆匆忙忙 为何生活总是这样","date":"2017-05-17T12:13:18.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![森林](慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg)\n最近真的体会到歌词「慌慌张张 匆匆忙忙 为何生活总是这样」的境地了。随着时间越来越临近期末，前期留下的坑逐渐显现出来了。有时候过于高估自己的能力，总是喜欢把事情留到最后来解决，更有甚时，美其名曰：「有压力 有动力」，觉得自己很努力。无 Fuck 可说！都是假的！\n<!-- more -->\n\n这种情况真的是不可取啊，源于最近三天熬了两个夜晚写了两个作业，真心疲倦。每次看着 4，5 点钟外面天迷蒙渐亮的风景，都有点感叹，如果不是在熬夜，而是早起，看到这样的风景将是多好啊。\n\n事情总是得做，所以晚做不如早做。像是毛老师说的，做好提前时间差是很重要的。虽然有时候不以为意，但是每当到熬夜的时候总是觉得句句在理。\n\n拖延症的情况不是一天两天了，不得不承认，这股力量很强大。有时候也是自己的侥幸心理在作祟，觉得一定能完成。结果，慌慌张张，匆匆忙忙，做的东西总是感觉不够好，其实知道自己有能力做的更好的。\n\n于是乎，感觉又要立下 Flag 了。\n+ 事情不论还有多久才提交，在有空的时候，用玩手机的时间，以及无聊多余睡觉的时间，先开始一部分工作，尽量早的做完。\n+ 尽量早睡，如果自然清醒了就不要再躺着床上了，不然玩手机可以玩到其他国家的时间。\n+ 对于没学好的知识，要及时的复习，该问问，该写写。要不然真的不知道你到考试的时候能写出什么鬼东西。（以此志：这学期没好好学习的日语课程，今晚考试，已然弃考，感觉对不起 200 大洋中的最后 30%，没好好复习）\n\n至于说博客，已经两三周没有正常更新内容了。因为个人的原因（拖拉、作业、***懒癌***），最近虽然有写过一个小 APP，但是感觉没有太多好的东西可以分享，于是就少了分享。其实说实在的，我最初的想法是想着单纯的分享一些关于 Android 以及 Java 等一些编程的东西，而且这些东西我并不是很熟悉，分享出来的过程也是一个复习的过程。最近在学习中遇到了一些其他的语言，东西很基础，但是我的基础不是很好，又要重新学习，又不好意思放上来。。。虚荣心在作祟，其实又没多少人看你的博客，应该放开自己，所以以后该分享的还是要分享。即使再小，也是我学习的过程不是？\n\n另外，最近都把自己学习上用到的东西记录在了 GitBook 上了，虽然目前还很少，但我相信会逐渐多起来的！\n\n地址：[我的学习笔记](https://dongmodao.gitbooks.io/mystudynotes/content/)\n\n暂时如此吧，去跑步，公里数这两天跑完就轻松了。没了。\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/慌慌张张-匆匆忙忙-为何生活总是这样.md","raw":"---\ntitle: 慌慌张张 匆匆忙忙 为何生活总是这样\ndate: 2017-05-17 20:13:18\ntags: [随笔]\ncategories: [意识流]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![森林](慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg)\n最近真的体会到歌词「慌慌张张 匆匆忙忙 为何生活总是这样」的境地了。随着时间越来越临近期末，前期留下的坑逐渐显现出来了。有时候过于高估自己的能力，总是喜欢把事情留到最后来解决，更有甚时，美其名曰：「有压力 有动力」，觉得自己很努力。无 Fuck 可说！都是假的！\n<!-- more -->\n\n这种情况真的是不可取啊，源于最近三天熬了两个夜晚写了两个作业，真心疲倦。每次看着 4，5 点钟外面天迷蒙渐亮的风景，都有点感叹，如果不是在熬夜，而是早起，看到这样的风景将是多好啊。\n\n事情总是得做，所以晚做不如早做。像是毛老师说的，做好提前时间差是很重要的。虽然有时候不以为意，但是每当到熬夜的时候总是觉得句句在理。\n\n拖延症的情况不是一天两天了，不得不承认，这股力量很强大。有时候也是自己的侥幸心理在作祟，觉得一定能完成。结果，慌慌张张，匆匆忙忙，做的东西总是感觉不够好，其实知道自己有能力做的更好的。\n\n于是乎，感觉又要立下 Flag 了。\n+ 事情不论还有多久才提交，在有空的时候，用玩手机的时间，以及无聊多余睡觉的时间，先开始一部分工作，尽量早的做完。\n+ 尽量早睡，如果自然清醒了就不要再躺着床上了，不然玩手机可以玩到其他国家的时间。\n+ 对于没学好的知识，要及时的复习，该问问，该写写。要不然真的不知道你到考试的时候能写出什么鬼东西。（以此志：这学期没好好学习的日语课程，今晚考试，已然弃考，感觉对不起 200 大洋中的最后 30%，没好好复习）\n\n至于说博客，已经两三周没有正常更新内容了。因为个人的原因（拖拉、作业、***懒癌***），最近虽然有写过一个小 APP，但是感觉没有太多好的东西可以分享，于是就少了分享。其实说实在的，我最初的想法是想着单纯的分享一些关于 Android 以及 Java 等一些编程的东西，而且这些东西我并不是很熟悉，分享出来的过程也是一个复习的过程。最近在学习中遇到了一些其他的语言，东西很基础，但是我的基础不是很好，又要重新学习，又不好意思放上来。。。虚荣心在作祟，其实又没多少人看你的博客，应该放开自己，所以以后该分享的还是要分享。即使再小，也是我学习的过程不是？\n\n另外，最近都把自己学习上用到的东西记录在了 GitBook 上了，虽然目前还很少，但我相信会逐渐多起来的！\n\n地址：[我的学习笔记](https://dongmodao.gitbooks.io/mystudynotes/content/)\n\n暂时如此吧，去跑步，公里数这两天跑完就轻松了。没了。\n\n<center> --- end --- </center>\n\n---\n","slug":"慌慌张张-匆匆忙忙-为何生活总是这样","published":1,"updated":"2019-05-10T16:14:30.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxw001r5cv9zsqiu7i2","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/05/17/慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg\" alt=\"森林\"><br>最近真的体会到歌词「慌慌张张 匆匆忙忙 为何生活总是这样」的境地了。随着时间越来越临近期末，前期留下的坑逐渐显现出来了。有时候过于高估自己的能力，总是喜欢把事情留到最后来解决，更有甚时，美其名曰：「有压力 有动力」，觉得自己很努力。无 Fuck 可说！都是假的！<br><a id=\"more\"></a></p>\n<p>这种情况真的是不可取啊，源于最近三天熬了两个夜晚写了两个作业，真心疲倦。每次看着 4，5 点钟外面天迷蒙渐亮的风景，都有点感叹，如果不是在熬夜，而是早起，看到这样的风景将是多好啊。</p>\n<p>事情总是得做，所以晚做不如早做。像是毛老师说的，做好提前时间差是很重要的。虽然有时候不以为意，但是每当到熬夜的时候总是觉得句句在理。</p>\n<p>拖延症的情况不是一天两天了，不得不承认，这股力量很强大。有时候也是自己的侥幸心理在作祟，觉得一定能完成。结果，慌慌张张，匆匆忙忙，做的东西总是感觉不够好，其实知道自己有能力做的更好的。</p>\n<p>于是乎，感觉又要立下 Flag 了。</p>\n<ul>\n<li>事情不论还有多久才提交，在有空的时候，用玩手机的时间，以及无聊多余睡觉的时间，先开始一部分工作，尽量早的做完。</li>\n<li>尽量早睡，如果自然清醒了就不要再躺着床上了，不然玩手机可以玩到其他国家的时间。</li>\n<li>对于没学好的知识，要及时的复习，该问问，该写写。要不然真的不知道你到考试的时候能写出什么鬼东西。（以此志：这学期没好好学习的日语课程，今晚考试，已然弃考，感觉对不起 200 大洋中的最后 30%，没好好复习）</li>\n</ul>\n<p>至于说博客，已经两三周没有正常更新内容了。因为个人的原因（拖拉、作业、<strong><em>懒癌</em></strong>），最近虽然有写过一个小 APP，但是感觉没有太多好的东西可以分享，于是就少了分享。其实说实在的，我最初的想法是想着单纯的分享一些关于 Android 以及 Java 等一些编程的东西，而且这些东西我并不是很熟悉，分享出来的过程也是一个复习的过程。最近在学习中遇到了一些其他的语言，东西很基础，但是我的基础不是很好，又要重新学习，又不好意思放上来。。。虚荣心在作祟，其实又没多少人看你的博客，应该放开自己，所以以后该分享的还是要分享。即使再小，也是我学习的过程不是？</p>\n<p>另外，最近都把自己学习上用到的东西记录在了 GitBook 上了，虽然目前还很少，但我相信会逐渐多起来的！</p>\n<p>地址：<a href=\"https://dongmodao.gitbooks.io/mystudynotes/content/\" target=\"_blank\" rel=\"noopener\">我的学习笔记</a></p>\n<p>暂时如此吧，去跑步，公里数这两天跑完就轻松了。没了。</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/05/17/慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg\" alt=\"森林\"><br>最近真的体会到歌词「慌慌张张 匆匆忙忙 为何生活总是这样」的境地了。随着时间越来越临近期末，前期留下的坑逐渐显现出来了。有时候过于高估自己的能力，总是喜欢把事情留到最后来解决，更有甚时，美其名曰：「有压力 有动力」，觉得自己很努力。无 Fuck 可说！都是假的！<br></p>","more":"<p></p>\n<p>这种情况真的是不可取啊，源于最近三天熬了两个夜晚写了两个作业，真心疲倦。每次看着 4，5 点钟外面天迷蒙渐亮的风景，都有点感叹，如果不是在熬夜，而是早起，看到这样的风景将是多好啊。</p>\n<p>事情总是得做，所以晚做不如早做。像是毛老师说的，做好提前时间差是很重要的。虽然有时候不以为意，但是每当到熬夜的时候总是觉得句句在理。</p>\n<p>拖延症的情况不是一天两天了，不得不承认，这股力量很强大。有时候也是自己的侥幸心理在作祟，觉得一定能完成。结果，慌慌张张，匆匆忙忙，做的东西总是感觉不够好，其实知道自己有能力做的更好的。</p>\n<p>于是乎，感觉又要立下 Flag 了。</p>\n<ul>\n<li>事情不论还有多久才提交，在有空的时候，用玩手机的时间，以及无聊多余睡觉的时间，先开始一部分工作，尽量早的做完。</li>\n<li>尽量早睡，如果自然清醒了就不要再躺着床上了，不然玩手机可以玩到其他国家的时间。</li>\n<li>对于没学好的知识，要及时的复习，该问问，该写写。要不然真的不知道你到考试的时候能写出什么鬼东西。（以此志：这学期没好好学习的日语课程，今晚考试，已然弃考，感觉对不起 200 大洋中的最后 30%，没好好复习）</li>\n</ul>\n<p>至于说博客，已经两三周没有正常更新内容了。因为个人的原因（拖拉、作业、<strong><em>懒癌</em></strong>），最近虽然有写过一个小 APP，但是感觉没有太多好的东西可以分享，于是就少了分享。其实说实在的，我最初的想法是想着单纯的分享一些关于 Android 以及 Java 等一些编程的东西，而且这些东西我并不是很熟悉，分享出来的过程也是一个复习的过程。最近在学习中遇到了一些其他的语言，东西很基础，但是我的基础不是很好，又要重新学习，又不好意思放上来。。。虚荣心在作祟，其实又没多少人看你的博客，应该放开自己，所以以后该分享的还是要分享。即使再小，也是我学习的过程不是？</p>\n<p>另外，最近都把自己学习上用到的东西记录在了 GitBook 上了，虽然目前还很少，但我相信会逐渐多起来的！</p>\n<p>地址：<a href=\"https://dongmodao.gitbooks.io/mystudynotes/content/\" target=\"_blank\" rel=\"noopener\">我的学习笔记</a></p>\n<p>暂时如此吧，去跑步，公里数这两天跑完就轻松了。没了。</p>\n<center> — end — </center>\n\n<hr>"},{"title":"浅谈 MVP","date":"2017-04-07T03:49:45.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](浅谈-MVP-架构/beautiful-nature-images.jpg)\n\n## 写在前面\n「MVP」架构在很多的编程项目中都可以用到，作为一个初学 Android 不久的人来说，这个架构应该能够帮助我们更好的组织我们的项目。冲着这个目的，自己也就趁机研究了一下「MVP」。同时也算是自己的一些探索吧，感觉自己的眼界太窄，所以不得不多吸收知识来充实自己。毕竟是初学者，我尽可能把我所了解到的东西分享给大家。如果有问题，可以联系我或者进行评论。\n<!-- more -->\n## 说明\n这个 MVP 的介绍的项目主要是 Google 在 GitHub 上开源的一个 Android MVP 的实现，分析也是基于它的「android-architecture」项目下的子项目 「todo-mvp」。下面是项目的 GitHub 地址，有兴趣的同学可以尝试研究一下。\n\nGitHub地址: [Android Architecture Blueprints](https://github.com/googlesamples/android-architecture?utm_source=tuicool&utm_medium=referral)\n\n## 正文\n### 什么是 MVP\nMVP 全称是 Model-View-Presenter，是在 Model-View-Controller(MVC) 的基础上形成的一个新的架构。MVP 多数用在 UI 界面丰富的项目中。为了避免项目的整体结构过于复杂以及项目中单个文件的过度臃肿，使用 MVP 来让整体框架更加清晰，也更有利于进行模块化的开发、debug 的进行。想了解更多的同学可以看更多的关于 [MVP](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) 和  [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) 的介绍。\n\n下面是在维基百科上找到的一张关于 MVP 设计范式的图解。\n\n![](浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png)\n\n从上面可以看到，Presenter 充当了 Model 和 View 之间通讯的中间人。 Model 和 View 并不直接连接，这也就使得整个架构之间的关系变得比较简单明了。 在 View 中，用户触发了事件之后，View 就告诉了 Presenter， Presenter 从 View 中获取所需要的数据，然后对 Model 进行更新。Model 中发生的更新事件也是通过 Presenter 来传递给需要展示的 View。这样一来整个架构就显得很清晰。\n\n### android-architecture/todo-mvp\n下面进入到 todo-mvp 中来进行具体的分析。项目的总体结构如下图\n\n![](浅谈-MVP-架构/filelist.png)\n\n可以看到，项目包含了两个公共的接口：BasePresenter 和 BaseView。这个项目中所有的 Presenter 都继承自 BasePresenter， 所有的 View 都是继承自 BaseView。\n\n接着看界面，项目基本上是按照功能进行分类，项目总共要显示 4 个 UI 界面，AddEditTask(添加任务界面)、Statistics(统计界面)、TaskDetail(任务详情界面)、Tasks(总任务界面：主界面)。每个界面（功能）都单独分了一个包进行处理，自行对应上图。\n\n另外要注意的就是 data 包和 util 包，data 文件夹主要就是模拟生成数据的包，包含了对本地数据和远端数据的模拟，也就是关于数据的一层，也即 Model。而 util 包就是工具类的包，比如创建 fragment 并添加到对应的 Activity 中的工作。\n\n下面来看 tasks 包的内容：\n\n![](浅谈-MVP-架构/taskslist.png)\n\n其中 ScrollChildSwipeRefreshLayout 和 TasksFilterType 分别是对 SwipeRefreshLayout 布局的一些刷新功能的重写以及对 Task 类型的状态进行枚举。\n\n但是，最主要的还是 Activity、Contract、Fragment、Presenter。这四个类支撑起了整个 Tasks 界面。在着个项目中的其他界面中每一个都包含着相似的这四个类。看看官方的说法：\n> In this version of the app, as well as other versions based on it, each screen is implemented using the following classes and interfaces:\n> + A contract class which defines the connection between the view and the presenter.(*简单的说就是定义了 View 和 Presenter 之间的关联关系的 Contract 类*)\n> + An Activity which creates fragments and presenters.(*生成了 fragment 和 Presenter 的 Activity*)\n> + A Fragment which implements the view interface.(*实现了 View 接口的 Fragment*)\n> + A presenter which implements the presenter interface in the corresponding contract.(*实现了对应的 Contract 中的 presenter 接口的 Presenter*)\n\n括弧中的内容是我根据翻译和自己对项目的理解做的翻译，希望各位大佬不要笑话。接下来再进行深入的分析。\n\n先从 Contract 开始， Contract 中定义了继承自 BaseView 的接口 View 以及继承自 BasePresenter 的 Presenter，同时还定义了 View 和 Presenter 在沟通的过程中所需要用到的各种方法。\n\n![](浅谈-MVP-架构/BaseView.png)\n上图中可以看到 BaseView 在四个界面的实现时都经过了 Contract 和 Fragment 的引用，前者声明接口，后者进行实现。\n\n接着看 TasksPresenter 和 TasksFragment，前者是实现了 TasksContract 中的 Presenter 的接口，后者是继承了 Fragment 并且实现了 TasksContract 中的 View 接口。在 TasksPresenter 中声明了一个私有的变量 TasksContract.View，即 mTasksView。这个 mTasksView 就是和这个 TasksPresenter 相互关联的 View，同样的，在 TasksFragment 中也有一个相应的 TasksContract.Presenter。这是 View 和 Presenter 之间通信的基础。\n\n让我们更深入一些！看当界面 TasksFragment 中发生点击事件时项目的内部发生了什么操作。在 TasksFragment 中定义了一个事件监听 mItemListener，如下\n``` java\n/**\n * Listener for clicks on tasks in the ListView.\n */\nTaskItemListener mItemListener = new TaskItemListener() {\n    @Override\n    public void onTaskClick(Task clickedTask) {\n        mPresenter.openTaskDetails(clickedTask);\n    }\n\n    @Override\n    public void onCompleteTaskClick(Task completedTask) {\n        mPresenter.completeTask(completedTask);\n    }\n\n    @Override\n    public void onActivateTaskClick(Task activatedTask) {\n        mPresenter.activateTask(activatedTask);\n    }\n};\n```\n所以当我们的点击事件发生时，实际上就调用了与 TasksFragment(View) 相联系的 mPresenter，执行了 openTaskDetails 的方法， 于是跳到 TasksPresenter 中有对应的代码如下：\n```  java\n@Override\npublic void openTaskDetails(@NonNull Task requestedTask) {\n    checkNotNull(requestedTask, \"requestedTask cannot be null!\");\n    mTasksView.showTaskDetailsUi(requestedTask.getId());\n}\n```\nPresenter 中可以进行相应的处理，可以和 Model 进行交互操作，此处是直接让对应的 TasksContract.View， 也即 mTasksView 执行了 showTaskDetailsUi 的方法。再次回到 TasksFragment 中：\n``` java\n    @Override\n    public void showTaskDetailsUi(String taskId) {\n        // in it's own Activity, since it makes more sense that way and it gives us the flexibility\n        // to show some Intent stubbing.\n        Intent intent = new Intent(getContext(), TaskDetailActivity.class);\n        intent.putExtra(TaskDetailActivity.EXTRA_TASK_ID, taskId);\n        startActivity(intent);\n    }\n```\n看到 TasksFragment 的这个方法直接就打开了一个 Activity，也就是对应的 TaskDetailActivity。\n\n最后看 Activity 中的内容，它主要就是生成了一个 TasksPresenter(mTasksPresenter) 和一个 TasksFragment(tasksFragment)，并通过工具类 util 把 tasksFragment 添加到 Activity 中。剩下的主要就是做一些与侧滑菜单和 Toolbar 相关的工作，之后就没有其他太多的功能了。\n\n## 总结\n经过上面的内容之后，我相信你对 MVP 在 Android 项目中的应用已经有了一定的了解。我们通过官方的示意图最后来复习一下：\n\n![](浅谈-MVP-架构/mvp.png)\n\n在项目中， Activity 包含了 View 和 Presenter。View 主要是用 Fragment 进行实现。View 和 Presenter 之间的联系十分紧密，但 View 并不能直接与 Model 层相连接， 只有通过 Presenter 的帮助才能完成数据的交互。图中左侧部分就是 Model 层，主要实现数据的操作等逻辑处理。\n\n吼了，就这样结束吧，一写就停不下来，停不下来就要写好久。。。\n加油！\n\n参考文章：\n\n[Android MVP 详解（上）](http://www.jianshu.com/p/9a6845b26856)\n\n[todo-mvp的README.md](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/浅谈-MVP-架构.md","raw":"---\ntitle: 浅谈 MVP\ndate: 2017-04-07 11:49:45\ntags: [MVP]\ncategories: [技术]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n\n![](浅谈-MVP-架构/beautiful-nature-images.jpg)\n\n## 写在前面\n「MVP」架构在很多的编程项目中都可以用到，作为一个初学 Android 不久的人来说，这个架构应该能够帮助我们更好的组织我们的项目。冲着这个目的，自己也就趁机研究了一下「MVP」。同时也算是自己的一些探索吧，感觉自己的眼界太窄，所以不得不多吸收知识来充实自己。毕竟是初学者，我尽可能把我所了解到的东西分享给大家。如果有问题，可以联系我或者进行评论。\n<!-- more -->\n## 说明\n这个 MVP 的介绍的项目主要是 Google 在 GitHub 上开源的一个 Android MVP 的实现，分析也是基于它的「android-architecture」项目下的子项目 「todo-mvp」。下面是项目的 GitHub 地址，有兴趣的同学可以尝试研究一下。\n\nGitHub地址: [Android Architecture Blueprints](https://github.com/googlesamples/android-architecture?utm_source=tuicool&utm_medium=referral)\n\n## 正文\n### 什么是 MVP\nMVP 全称是 Model-View-Presenter，是在 Model-View-Controller(MVC) 的基础上形成的一个新的架构。MVP 多数用在 UI 界面丰富的项目中。为了避免项目的整体结构过于复杂以及项目中单个文件的过度臃肿，使用 MVP 来让整体框架更加清晰，也更有利于进行模块化的开发、debug 的进行。想了解更多的同学可以看更多的关于 [MVP](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) 和  [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) 的介绍。\n\n下面是在维基百科上找到的一张关于 MVP 设计范式的图解。\n\n![](浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png)\n\n从上面可以看到，Presenter 充当了 Model 和 View 之间通讯的中间人。 Model 和 View 并不直接连接，这也就使得整个架构之间的关系变得比较简单明了。 在 View 中，用户触发了事件之后，View 就告诉了 Presenter， Presenter 从 View 中获取所需要的数据，然后对 Model 进行更新。Model 中发生的更新事件也是通过 Presenter 来传递给需要展示的 View。这样一来整个架构就显得很清晰。\n\n### android-architecture/todo-mvp\n下面进入到 todo-mvp 中来进行具体的分析。项目的总体结构如下图\n\n![](浅谈-MVP-架构/filelist.png)\n\n可以看到，项目包含了两个公共的接口：BasePresenter 和 BaseView。这个项目中所有的 Presenter 都继承自 BasePresenter， 所有的 View 都是继承自 BaseView。\n\n接着看界面，项目基本上是按照功能进行分类，项目总共要显示 4 个 UI 界面，AddEditTask(添加任务界面)、Statistics(统计界面)、TaskDetail(任务详情界面)、Tasks(总任务界面：主界面)。每个界面（功能）都单独分了一个包进行处理，自行对应上图。\n\n另外要注意的就是 data 包和 util 包，data 文件夹主要就是模拟生成数据的包，包含了对本地数据和远端数据的模拟，也就是关于数据的一层，也即 Model。而 util 包就是工具类的包，比如创建 fragment 并添加到对应的 Activity 中的工作。\n\n下面来看 tasks 包的内容：\n\n![](浅谈-MVP-架构/taskslist.png)\n\n其中 ScrollChildSwipeRefreshLayout 和 TasksFilterType 分别是对 SwipeRefreshLayout 布局的一些刷新功能的重写以及对 Task 类型的状态进行枚举。\n\n但是，最主要的还是 Activity、Contract、Fragment、Presenter。这四个类支撑起了整个 Tasks 界面。在着个项目中的其他界面中每一个都包含着相似的这四个类。看看官方的说法：\n> In this version of the app, as well as other versions based on it, each screen is implemented using the following classes and interfaces:\n> + A contract class which defines the connection between the view and the presenter.(*简单的说就是定义了 View 和 Presenter 之间的关联关系的 Contract 类*)\n> + An Activity which creates fragments and presenters.(*生成了 fragment 和 Presenter 的 Activity*)\n> + A Fragment which implements the view interface.(*实现了 View 接口的 Fragment*)\n> + A presenter which implements the presenter interface in the corresponding contract.(*实现了对应的 Contract 中的 presenter 接口的 Presenter*)\n\n括弧中的内容是我根据翻译和自己对项目的理解做的翻译，希望各位大佬不要笑话。接下来再进行深入的分析。\n\n先从 Contract 开始， Contract 中定义了继承自 BaseView 的接口 View 以及继承自 BasePresenter 的 Presenter，同时还定义了 View 和 Presenter 在沟通的过程中所需要用到的各种方法。\n\n![](浅谈-MVP-架构/BaseView.png)\n上图中可以看到 BaseView 在四个界面的实现时都经过了 Contract 和 Fragment 的引用，前者声明接口，后者进行实现。\n\n接着看 TasksPresenter 和 TasksFragment，前者是实现了 TasksContract 中的 Presenter 的接口，后者是继承了 Fragment 并且实现了 TasksContract 中的 View 接口。在 TasksPresenter 中声明了一个私有的变量 TasksContract.View，即 mTasksView。这个 mTasksView 就是和这个 TasksPresenter 相互关联的 View，同样的，在 TasksFragment 中也有一个相应的 TasksContract.Presenter。这是 View 和 Presenter 之间通信的基础。\n\n让我们更深入一些！看当界面 TasksFragment 中发生点击事件时项目的内部发生了什么操作。在 TasksFragment 中定义了一个事件监听 mItemListener，如下\n``` java\n/**\n * Listener for clicks on tasks in the ListView.\n */\nTaskItemListener mItemListener = new TaskItemListener() {\n    @Override\n    public void onTaskClick(Task clickedTask) {\n        mPresenter.openTaskDetails(clickedTask);\n    }\n\n    @Override\n    public void onCompleteTaskClick(Task completedTask) {\n        mPresenter.completeTask(completedTask);\n    }\n\n    @Override\n    public void onActivateTaskClick(Task activatedTask) {\n        mPresenter.activateTask(activatedTask);\n    }\n};\n```\n所以当我们的点击事件发生时，实际上就调用了与 TasksFragment(View) 相联系的 mPresenter，执行了 openTaskDetails 的方法， 于是跳到 TasksPresenter 中有对应的代码如下：\n```  java\n@Override\npublic void openTaskDetails(@NonNull Task requestedTask) {\n    checkNotNull(requestedTask, \"requestedTask cannot be null!\");\n    mTasksView.showTaskDetailsUi(requestedTask.getId());\n}\n```\nPresenter 中可以进行相应的处理，可以和 Model 进行交互操作，此处是直接让对应的 TasksContract.View， 也即 mTasksView 执行了 showTaskDetailsUi 的方法。再次回到 TasksFragment 中：\n``` java\n    @Override\n    public void showTaskDetailsUi(String taskId) {\n        // in it's own Activity, since it makes more sense that way and it gives us the flexibility\n        // to show some Intent stubbing.\n        Intent intent = new Intent(getContext(), TaskDetailActivity.class);\n        intent.putExtra(TaskDetailActivity.EXTRA_TASK_ID, taskId);\n        startActivity(intent);\n    }\n```\n看到 TasksFragment 的这个方法直接就打开了一个 Activity，也就是对应的 TaskDetailActivity。\n\n最后看 Activity 中的内容，它主要就是生成了一个 TasksPresenter(mTasksPresenter) 和一个 TasksFragment(tasksFragment)，并通过工具类 util 把 tasksFragment 添加到 Activity 中。剩下的主要就是做一些与侧滑菜单和 Toolbar 相关的工作，之后就没有其他太多的功能了。\n\n## 总结\n经过上面的内容之后，我相信你对 MVP 在 Android 项目中的应用已经有了一定的了解。我们通过官方的示意图最后来复习一下：\n\n![](浅谈-MVP-架构/mvp.png)\n\n在项目中， Activity 包含了 View 和 Presenter。View 主要是用 Fragment 进行实现。View 和 Presenter 之间的联系十分紧密，但 View 并不能直接与 Model 层相连接， 只有通过 Presenter 的帮助才能完成数据的交互。图中左侧部分就是 Model 层，主要实现数据的操作等逻辑处理。\n\n吼了，就这样结束吧，一写就停不下来，停不下来就要写好久。。。\n加油！\n\n参考文章：\n\n[Android MVP 详解（上）](http://www.jianshu.com/p/9a6845b26856)\n\n[todo-mvp的README.md](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)\n\n<center> --- end --- </center>\n\n---\n","slug":"浅谈-MVP-架构","published":1,"updated":"2019-05-10T16:14:30.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxxz001u5cv93f5k0t09","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/beautiful-nature-images.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>「MVP」架构在很多的编程项目中都可以用到，作为一个初学 Android 不久的人来说，这个架构应该能够帮助我们更好的组织我们的项目。冲着这个目的，自己也就趁机研究了一下「MVP」。同时也算是自己的一些探索吧，感觉自己的眼界太窄，所以不得不多吸收知识来充实自己。毕竟是初学者，我尽可能把我所了解到的东西分享给大家。如果有问题，可以联系我或者进行评论。<br><a id=\"more\"></a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>这个 MVP 的介绍的项目主要是 Google 在 GitHub 上开源的一个 Android MVP 的实现，分析也是基于它的「android-architecture」项目下的子项目 「todo-mvp」。下面是项目的 GitHub 地址，有兴趣的同学可以尝试研究一下。</p>\n<p>GitHub地址: <a href=\"https://github.com/googlesamples/android-architecture?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">Android Architecture Blueprints</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"什么是-MVP\"><a href=\"#什么是-MVP\" class=\"headerlink\" title=\"什么是 MVP\"></a>什么是 MVP</h3><p>MVP 全称是 Model-View-Presenter，是在 Model-View-Controller(MVC) 的基础上形成的一个新的架构。MVP 多数用在 UI 界面丰富的项目中。为了避免项目的整体结构过于复杂以及项目中单个文件的过度臃肿，使用 MVP 来让整体框架更加清晰，也更有利于进行模块化的开发、debug 的进行。想了解更多的同学可以看更多的关于 <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\">MVP</a> 和  <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\">MVC</a> 的介绍。</p>\n<p>下面是在维基百科上找到的一张关于 MVP 设计范式的图解。</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png\" alt=\"\"></p>\n<p>从上面可以看到，Presenter 充当了 Model 和 View 之间通讯的中间人。 Model 和 View 并不直接连接，这也就使得整个架构之间的关系变得比较简单明了。 在 View 中，用户触发了事件之后，View 就告诉了 Presenter， Presenter 从 View 中获取所需要的数据，然后对 Model 进行更新。Model 中发生的更新事件也是通过 Presenter 来传递给需要展示的 View。这样一来整个架构就显得很清晰。</p>\n<h3 id=\"android-architecture-todo-mvp\"><a href=\"#android-architecture-todo-mvp\" class=\"headerlink\" title=\"android-architecture/todo-mvp\"></a>android-architecture/todo-mvp</h3><p>下面进入到 todo-mvp 中来进行具体的分析。项目的总体结构如下图</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/filelist.png\" alt=\"\"></p>\n<p>可以看到，项目包含了两个公共的接口：BasePresenter 和 BaseView。这个项目中所有的 Presenter 都继承自 BasePresenter， 所有的 View 都是继承自 BaseView。</p>\n<p>接着看界面，项目基本上是按照功能进行分类，项目总共要显示 4 个 UI 界面，AddEditTask(添加任务界面)、Statistics(统计界面)、TaskDetail(任务详情界面)、Tasks(总任务界面：主界面)。每个界面（功能）都单独分了一个包进行处理，自行对应上图。</p>\n<p>另外要注意的就是 data 包和 util 包，data 文件夹主要就是模拟生成数据的包，包含了对本地数据和远端数据的模拟，也就是关于数据的一层，也即 Model。而 util 包就是工具类的包，比如创建 fragment 并添加到对应的 Activity 中的工作。</p>\n<p>下面来看 tasks 包的内容：</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/taskslist.png\" alt=\"\"></p>\n<p>其中 ScrollChildSwipeRefreshLayout 和 TasksFilterType 分别是对 SwipeRefreshLayout 布局的一些刷新功能的重写以及对 Task 类型的状态进行枚举。</p>\n<p>但是，最主要的还是 Activity、Contract、Fragment、Presenter。这四个类支撑起了整个 Tasks 界面。在着个项目中的其他界面中每一个都包含着相似的这四个类。看看官方的说法：</p>\n<blockquote>\n<p>In this version of the app, as well as other versions based on it, each screen is implemented using the following classes and interfaces:</p>\n<ul>\n<li>A contract class which defines the connection between the view and the presenter.(<em>简单的说就是定义了 View 和 Presenter 之间的关联关系的 Contract 类</em>)</li>\n<li>An Activity which creates fragments and presenters.(<em>生成了 fragment 和 Presenter 的 Activity</em>)</li>\n<li>A Fragment which implements the view interface.(<em>实现了 View 接口的 Fragment</em>)</li>\n<li>A presenter which implements the presenter interface in the corresponding contract.(<em>实现了对应的 Contract 中的 presenter 接口的 Presenter</em>)</li>\n</ul>\n</blockquote>\n<p>括弧中的内容是我根据翻译和自己对项目的理解做的翻译，希望各位大佬不要笑话。接下来再进行深入的分析。</p>\n<p>先从 Contract 开始， Contract 中定义了继承自 BaseView 的接口 View 以及继承自 BasePresenter 的 Presenter，同时还定义了 View 和 Presenter 在沟通的过程中所需要用到的各种方法。</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/BaseView.png\" alt=\"\"><br>上图中可以看到 BaseView 在四个界面的实现时都经过了 Contract 和 Fragment 的引用，前者声明接口，后者进行实现。</p>\n<p>接着看 TasksPresenter 和 TasksFragment，前者是实现了 TasksContract 中的 Presenter 的接口，后者是继承了 Fragment 并且实现了 TasksContract 中的 View 接口。在 TasksPresenter 中声明了一个私有的变量 TasksContract.View，即 mTasksView。这个 mTasksView 就是和这个 TasksPresenter 相互关联的 View，同样的，在 TasksFragment 中也有一个相应的 TasksContract.Presenter。这是 View 和 Presenter 之间通信的基础。</p>\n<p>让我们更深入一些！看当界面 TasksFragment 中发生点击事件时项目的内部发生了什么操作。在 TasksFragment 中定义了一个事件监听 mItemListener，如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Listener for clicks on tasks in the ListView.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">TaskItemListener mItemListener = <span class=\"keyword\">new</span> TaskItemListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTaskClick</span><span class=\"params\">(Task clickedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.openTaskDetails(clickedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleteTaskClick</span><span class=\"params\">(Task completedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.completeTask(completedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivateTaskClick</span><span class=\"params\">(Task activatedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.activateTask(activatedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>所以当我们的点击事件发生时，实际上就调用了与 TasksFragment(View) 相联系的 mPresenter，执行了 openTaskDetails 的方法， 于是跳到 TasksPresenter 中有对应的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openTaskDetails</span><span class=\"params\">(@NonNull Task requestedTask)</span> </span>&#123;</span><br><span class=\"line\">    checkNotNull(requestedTask, <span class=\"string\">\"requestedTask cannot be null!\"</span>);</span><br><span class=\"line\">    mTasksView.showTaskDetailsUi(requestedTask.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Presenter 中可以进行相应的处理，可以和 Model 进行交互操作，此处是直接让对应的 TasksContract.View， 也即 mTasksView 执行了 showTaskDetailsUi 的方法。再次回到 TasksFragment 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTaskDetailsUi</span><span class=\"params\">(String taskId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// in it's own Activity, since it makes more sense that way and it gives us the flexibility</span></span><br><span class=\"line\">    <span class=\"comment\">// to show some Intent stubbing.</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(getContext(), TaskDetailActivity.class);</span><br><span class=\"line\">    intent.putExtra(TaskDetailActivity.EXTRA_TASK_ID, taskId);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到 TasksFragment 的这个方法直接就打开了一个 Activity，也就是对应的 TaskDetailActivity。</p>\n<p>最后看 Activity 中的内容，它主要就是生成了一个 TasksPresenter(mTasksPresenter) 和一个 TasksFragment(tasksFragment)，并通过工具类 util 把 tasksFragment 添加到 Activity 中。剩下的主要就是做一些与侧滑菜单和 Toolbar 相关的工作，之后就没有其他太多的功能了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过上面的内容之后，我相信你对 MVP 在 Android 项目中的应用已经有了一定的了解。我们通过官方的示意图最后来复习一下：</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/mvp.png\" alt=\"\"></p>\n<p>在项目中， Activity 包含了 View 和 Presenter。View 主要是用 Fragment 进行实现。View 和 Presenter 之间的联系十分紧密，但 View 并不能直接与 Model 层相连接， 只有通过 Presenter 的帮助才能完成数据的交互。图中左侧部分就是 Model 层，主要实现数据的操作等逻辑处理。</p>\n<p>吼了，就这样结束吧，一写就停不下来，停不下来就要写好久。。。<br>加油！</p>\n<p>参考文章：</p>\n<p><a href=\"http://www.jianshu.com/p/9a6845b26856\" target=\"_blank\" rel=\"noopener\">Android MVP 详解（上）</a></p>\n<p><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\" target=\"_blank\" rel=\"noopener\">todo-mvp的README.md</a></p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/beautiful-nature-images.jpg\" alt=\"\"></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>「MVP」架构在很多的编程项目中都可以用到，作为一个初学 Android 不久的人来说，这个架构应该能够帮助我们更好的组织我们的项目。冲着这个目的，自己也就趁机研究了一下「MVP」。同时也算是自己的一些探索吧，感觉自己的眼界太窄，所以不得不多吸收知识来充实自己。毕竟是初学者，我尽可能把我所了解到的东西分享给大家。如果有问题，可以联系我或者进行评论。<br></p>","more":"<p></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>这个 MVP 的介绍的项目主要是 Google 在 GitHub 上开源的一个 Android MVP 的实现，分析也是基于它的「android-architecture」项目下的子项目 「todo-mvp」。下面是项目的 GitHub 地址，有兴趣的同学可以尝试研究一下。</p>\n<p>GitHub地址: <a href=\"https://github.com/googlesamples/android-architecture?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">Android Architecture Blueprints</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"什么是-MVP\"><a href=\"#什么是-MVP\" class=\"headerlink\" title=\"什么是 MVP\"></a>什么是 MVP</h3><p>MVP 全称是 Model-View-Presenter，是在 Model-View-Controller(MVC) 的基础上形成的一个新的架构。MVP 多数用在 UI 界面丰富的项目中。为了避免项目的整体结构过于复杂以及项目中单个文件的过度臃肿，使用 MVP 来让整体框架更加清晰，也更有利于进行模块化的开发、debug 的进行。想了解更多的同学可以看更多的关于 <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\">MVP</a> 和  <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\">MVC</a> 的介绍。</p>\n<p>下面是在维基百科上找到的一张关于 MVP 设计范式的图解。</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png\" alt=\"\"></p>\n<p>从上面可以看到，Presenter 充当了 Model 和 View 之间通讯的中间人。 Model 和 View 并不直接连接，这也就使得整个架构之间的关系变得比较简单明了。 在 View 中，用户触发了事件之后，View 就告诉了 Presenter， Presenter 从 View 中获取所需要的数据，然后对 Model 进行更新。Model 中发生的更新事件也是通过 Presenter 来传递给需要展示的 View。这样一来整个架构就显得很清晰。</p>\n<h3 id=\"android-architecture-todo-mvp\"><a href=\"#android-architecture-todo-mvp\" class=\"headerlink\" title=\"android-architecture/todo-mvp\"></a>android-architecture/todo-mvp</h3><p>下面进入到 todo-mvp 中来进行具体的分析。项目的总体结构如下图</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/filelist.png\" alt=\"\"></p>\n<p>可以看到，项目包含了两个公共的接口：BasePresenter 和 BaseView。这个项目中所有的 Presenter 都继承自 BasePresenter， 所有的 View 都是继承自 BaseView。</p>\n<p>接着看界面，项目基本上是按照功能进行分类，项目总共要显示 4 个 UI 界面，AddEditTask(添加任务界面)、Statistics(统计界面)、TaskDetail(任务详情界面)、Tasks(总任务界面：主界面)。每个界面（功能）都单独分了一个包进行处理，自行对应上图。</p>\n<p>另外要注意的就是 data 包和 util 包，data 文件夹主要就是模拟生成数据的包，包含了对本地数据和远端数据的模拟，也就是关于数据的一层，也即 Model。而 util 包就是工具类的包，比如创建 fragment 并添加到对应的 Activity 中的工作。</p>\n<p>下面来看 tasks 包的内容：</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/taskslist.png\" alt=\"\"></p>\n<p>其中 ScrollChildSwipeRefreshLayout 和 TasksFilterType 分别是对 SwipeRefreshLayout 布局的一些刷新功能的重写以及对 Task 类型的状态进行枚举。</p>\n<p>但是，最主要的还是 Activity、Contract、Fragment、Presenter。这四个类支撑起了整个 Tasks 界面。在着个项目中的其他界面中每一个都包含着相似的这四个类。看看官方的说法：</p>\n<blockquote>\n<p>In this version of the app, as well as other versions based on it, each screen is implemented using the following classes and interfaces:</p>\n<ul>\n<li>A contract class which defines the connection between the view and the presenter.(<em>简单的说就是定义了 View 和 Presenter 之间的关联关系的 Contract 类</em>)</li>\n<li>An Activity which creates fragments and presenters.(<em>生成了 fragment 和 Presenter 的 Activity</em>)</li>\n<li>A Fragment which implements the view interface.(<em>实现了 View 接口的 Fragment</em>)</li>\n<li>A presenter which implements the presenter interface in the corresponding contract.(<em>实现了对应的 Contract 中的 presenter 接口的 Presenter</em>)</li>\n</ul>\n</blockquote>\n<p>括弧中的内容是我根据翻译和自己对项目的理解做的翻译，希望各位大佬不要笑话。接下来再进行深入的分析。</p>\n<p>先从 Contract 开始， Contract 中定义了继承自 BaseView 的接口 View 以及继承自 BasePresenter 的 Presenter，同时还定义了 View 和 Presenter 在沟通的过程中所需要用到的各种方法。</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/BaseView.png\" alt=\"\"><br>上图中可以看到 BaseView 在四个界面的实现时都经过了 Contract 和 Fragment 的引用，前者声明接口，后者进行实现。</p>\n<p>接着看 TasksPresenter 和 TasksFragment，前者是实现了 TasksContract 中的 Presenter 的接口，后者是继承了 Fragment 并且实现了 TasksContract 中的 View 接口。在 TasksPresenter 中声明了一个私有的变量 TasksContract.View，即 mTasksView。这个 mTasksView 就是和这个 TasksPresenter 相互关联的 View，同样的，在 TasksFragment 中也有一个相应的 TasksContract.Presenter。这是 View 和 Presenter 之间通信的基础。</p>\n<p>让我们更深入一些！看当界面 TasksFragment 中发生点击事件时项目的内部发生了什么操作。在 TasksFragment 中定义了一个事件监听 mItemListener，如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Listener for clicks on tasks in the ListView.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">TaskItemListener mItemListener = <span class=\"keyword\">new</span> TaskItemListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTaskClick</span><span class=\"params\">(Task clickedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.openTaskDetails(clickedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleteTaskClick</span><span class=\"params\">(Task completedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.completeTask(completedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivateTaskClick</span><span class=\"params\">(Task activatedTask)</span> </span>&#123;</span><br><span class=\"line\">        mPresenter.activateTask(activatedTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>所以当我们的点击事件发生时，实际上就调用了与 TasksFragment(View) 相联系的 mPresenter，执行了 openTaskDetails 的方法， 于是跳到 TasksPresenter 中有对应的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openTaskDetails</span><span class=\"params\">(@NonNull Task requestedTask)</span> </span>&#123;</span><br><span class=\"line\">    checkNotNull(requestedTask, <span class=\"string\">\"requestedTask cannot be null!\"</span>);</span><br><span class=\"line\">    mTasksView.showTaskDetailsUi(requestedTask.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Presenter 中可以进行相应的处理，可以和 Model 进行交互操作，此处是直接让对应的 TasksContract.View， 也即 mTasksView 执行了 showTaskDetailsUi 的方法。再次回到 TasksFragment 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTaskDetailsUi</span><span class=\"params\">(String taskId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// in it's own Activity, since it makes more sense that way and it gives us the flexibility</span></span><br><span class=\"line\">    <span class=\"comment\">// to show some Intent stubbing.</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(getContext(), TaskDetailActivity.class);</span><br><span class=\"line\">    intent.putExtra(TaskDetailActivity.EXTRA_TASK_ID, taskId);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到 TasksFragment 的这个方法直接就打开了一个 Activity，也就是对应的 TaskDetailActivity。</p>\n<p>最后看 Activity 中的内容，它主要就是生成了一个 TasksPresenter(mTasksPresenter) 和一个 TasksFragment(tasksFragment)，并通过工具类 util 把 tasksFragment 添加到 Activity 中。剩下的主要就是做一些与侧滑菜单和 Toolbar 相关的工作，之后就没有其他太多的功能了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过上面的内容之后，我相信你对 MVP 在 Android 项目中的应用已经有了一定的了解。我们通过官方的示意图最后来复习一下：</p>\n<p><img src=\"/2017/04/07/浅谈-MVP-架构/mvp.png\" alt=\"\"></p>\n<p>在项目中， Activity 包含了 View 和 Presenter。View 主要是用 Fragment 进行实现。View 和 Presenter 之间的联系十分紧密，但 View 并不能直接与 Model 层相连接， 只有通过 Presenter 的帮助才能完成数据的交互。图中左侧部分就是 Model 层，主要实现数据的操作等逻辑处理。</p>\n<p>吼了，就这样结束吧，一写就停不下来，停不下来就要写好久。。。<br>加油！</p>\n<p>参考文章：</p>\n<p><a href=\"http://www.jianshu.com/p/9a6845b26856\" target=\"_blank\" rel=\"noopener\">Android MVP 详解（上）</a></p>\n<p><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\" target=\"_blank\" rel=\"noopener\">todo-mvp的README.md</a></p>\n<center> — end — </center>\n\n<hr>"},{"title":"新学期计划","date":"2017-03-10T03:02:30.000Z","_content":"<center>\nAuthor: dongmodao\n</center>\n\n---\n![1](新学期计划/flowers.jpg)\n\n\n### 关于新学期的计划\n首先，提高各方面能力，特别是编程能力！\n学习以下的语言：\n>* C#\n* C++\n* Java\n* Python\n* Javascript\n* markdown\n* English\n* 日语\n\n<!--more-->\n### 需要熟悉掌握的IDE有\n>* Android Studio\n* Visual Studio\n* ItelliJ Idea\n* sublime Text\n* Atom\n\n### 另外\n>* 认真学习，完成课堂上布置的各项任务、作业等\n* 积极阅读各类书籍，包括 **第一行代码**、**Thinking In Java** 等\n* 学习社会心理学，更加了解自己\n* 提高绩点\n* 寻找合适的实习公司，尝试了解社会的运行\n\n### 最后\n坚持更新博客，即使再忙，也不至于抽不出时间写的，加油！用博客记录自己这一年的变化吧！\n\n<center> --- end --- </center>\n\n---\n","source":"_posts/新学期计划.md","raw":"---\ntitle: 新学期计划\ndate: 2017-03-10 11:02:30\ntags: [随笔]\ncategories: [意识流]\n---\n<center>\nAuthor: dongmodao\n</center>\n\n---\n![1](新学期计划/flowers.jpg)\n\n\n### 关于新学期的计划\n首先，提高各方面能力，特别是编程能力！\n学习以下的语言：\n>* C#\n* C++\n* Java\n* Python\n* Javascript\n* markdown\n* English\n* 日语\n\n<!--more-->\n### 需要熟悉掌握的IDE有\n>* Android Studio\n* Visual Studio\n* ItelliJ Idea\n* sublime Text\n* Atom\n\n### 另外\n>* 认真学习，完成课堂上布置的各项任务、作业等\n* 积极阅读各类书籍，包括 **第一行代码**、**Thinking In Java** 等\n* 学习社会心理学，更加了解自己\n* 提高绩点\n* 寻找合适的实习公司，尝试了解社会的运行\n\n### 最后\n坚持更新博客，即使再忙，也不至于抽不出时间写的，加油！用博客记录自己这一年的变化吧！\n\n<center> --- end --- </center>\n\n---\n","slug":"新学期计划","published":1,"updated":"2019-05-10T16:14:30.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvibqxy1001x5cv9ffustb71","content":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/10/新学期计划/flowers.jpg\" alt=\"1\"></p>\n<h3 id=\"关于新学期的计划\"><a href=\"#关于新学期的计划\" class=\"headerlink\" title=\"关于新学期的计划\"></a>关于新学期的计划</h3><p>首先，提高各方面能力，特别是编程能力！<br>学习以下的语言：</p>\n<blockquote>\n<ul>\n<li>C#</li>\n<li>C++</li>\n<li>Java</li>\n<li>Python</li>\n<li>Javascript</li>\n<li>markdown</li>\n<li>English</li>\n<li>日语</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"需要熟悉掌握的IDE有\"><a href=\"#需要熟悉掌握的IDE有\" class=\"headerlink\" title=\"需要熟悉掌握的IDE有\"></a>需要熟悉掌握的IDE有</h3><blockquote>\n<ul>\n<li>Android Studio</li>\n<li>Visual Studio</li>\n<li>ItelliJ Idea</li>\n<li>sublime Text</li>\n<li>Atom</li>\n</ul>\n</blockquote>\n<h3 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h3><blockquote>\n<ul>\n<li>认真学习，完成课堂上布置的各项任务、作业等</li>\n<li>积极阅读各类书籍，包括 <strong>第一行代码</strong>、<strong>Thinking In Java</strong> 等</li>\n<li>学习社会心理学，更加了解自己</li>\n<li>提高绩点</li>\n<li>寻找合适的实习公司，尝试了解社会的运行</li>\n</ul>\n</blockquote>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>坚持更新博客，即使再忙，也不至于抽不出时间写的，加油！用博客记录自己这一年的变化吧！</p>\n<center> — end — </center>\n\n<hr>\n","site":{"data":{}},"excerpt":"<center><br>Author: dongmodao<br></center>\n\n<hr>\n<p><img src=\"/2017/03/10/新学期计划/flowers.jpg\" alt=\"1\"></p>\n<h3 id=\"关于新学期的计划\"><a href=\"#关于新学期的计划\" class=\"headerlink\" title=\"关于新学期的计划\"></a>关于新学期的计划</h3><p>首先，提高各方面能力，特别是编程能力！<br>学习以下的语言：</p>\n<blockquote>\n<ul>\n<li>C#</li>\n<li>C++</li>\n<li>Java</li>\n<li>Python</li>\n<li>Javascript</li>\n<li>markdown</li>\n<li>English</li>\n<li>日语</li>\n</ul>\n</blockquote>","more":"<h3 id=\"需要熟悉掌握的IDE有\"><a href=\"#需要熟悉掌握的IDE有\" class=\"headerlink\" title=\"需要熟悉掌握的IDE有\"></a>需要熟悉掌握的IDE有</h3><blockquote>\n<ul>\n<li>Android Studio</li>\n<li>Visual Studio</li>\n<li>ItelliJ Idea</li>\n<li>sublime Text</li>\n<li>Atom</li>\n</ul>\n</blockquote>\n<h3 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h3><blockquote>\n<ul>\n<li>认真学习，完成课堂上布置的各项任务、作业等</li>\n<li>积极阅读各类书籍，包括 <strong>第一行代码</strong>、<strong>Thinking In Java</strong> 等</li>\n<li>学习社会心理学，更加了解自己</li>\n<li>提高绩点</li>\n<li>寻找合适的实习公司，尝试了解社会的运行</li>\n</ul>\n</blockquote>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>坚持更新博客，即使再忙，也不至于抽不出时间写的，加油！用博客记录自己这一年的变化吧！</p>\n<center> — end — </center>\n\n<hr>"}],"PostAsset":[{"_id":"source/_posts/Android-Service/index.jpg","slug":"index.jpg","post":"cjvibqxwm000a5cv9ms4t4bnt","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/nature-images.jpg","slug":"nature-images.jpg","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/Android-Day-1/index.jpg","slug":"index.jpg","post":"cjvibqxwd00075cv9sjqez7vj","modified":0,"renderable":0},{"_id":"source/_posts/Android-初次面试/index.jpg","slug":"index.jpg","post":"cjvibqxwv000g5cv9zb4xnm2b","modified":0,"renderable":0},{"_id":"source/_posts/C-中的委托与事件/water.jpg","slug":"water.jpg","post":"cjvibqxx7000v5cv9usqix2ka","modified":0,"renderable":0},{"_id":"source/_posts/Markdown语法的基本使用简介/beautifulnature.jpg","slug":"beautifulnature.jpg","post":"cjvibqxxh00175cv94i4vbqtd","modified":0,"renderable":0},{"_id":"source/_posts/Android-Making-new-view/index.jpg","slug":"index.jpg","post":"cjvibqxw000015cv93ij0hr51","modified":0,"renderable":0},{"_id":"source/_posts/Android-Day-2/index.jpg","slug":"index.jpg","post":"cjvibqxw700035cv9r6nrnbi2","modified":0,"renderable":0},{"_id":"source/_posts/Android-N-以上使用其他应用打开文件-FileProvider/index.jpg","slug":"index.jpg","post":"cjvibqxws000e5cv9a1qi3hg2","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局/Beach.jpg","slug":"Beach.jpg","post":"cjvibqxx1000o5cv9xl92peda","modified":0,"renderable":0},{"_id":"source/_posts/Android-广播机制与服务/main-img.jpg","slug":"main-img.jpg","post":"cjvibqxx9000y5cv9y3vkgkmj","modified":0,"renderable":0},{"_id":"source/_posts/C-多态性与虚函数/stars in night sky.jpg","slug":"stars in night sky.jpg","post":"cjvibqxxa00105cv9gekp1dwc","modified":0,"renderable":0},{"_id":"source/_posts/Echarts-的基本使用和-Android-连接-Mysql-数据库/tower.jpg","slug":"tower.jpg","post":"cjvibqxxf00145cv9s8fbd58n","modified":0,"renderable":0},{"_id":"source/_posts/一些感触/road.jpg","slug":"road.jpg","post":"cjvibqxxm001d5cv93jc0czpb","modified":0,"renderable":0},{"_id":"source/_posts/使用-LitePal-操作数据库/night.jpg","slug":"night.jpg","post":"cjvibqxxp001g5cv9yw2zskhj","modified":0,"renderable":0},{"_id":"source/_posts/常用的hexo和git命令-备查/beautyhouse.jpg","slug":"beautyhouse.jpg","post":"cjvibqxxu001o5cv9otttjvwn","modified":0,"renderable":0},{"_id":"source/_posts/慌慌张张-匆匆忙忙-为何生活总是这样/forest.jpg","slug":"forest.jpg","post":"cjvibqxxw001r5cv9zsqiu7i2","modified":0,"renderable":0},{"_id":"source/_posts/新学期计划/flowers.jpg","slug":"flowers.jpg","post":"cjvibqxy1001x5cv9ffustb71","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局-三/naturetree.jpg","slug":"naturetree.jpg","post":"cjvibqxwi00095cv9ctd4v86p","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局-三/rst.png","slug":"rst.png","post":"cjvibqxwi00095cv9ctd4v86p","modified":0,"renderable":0},{"_id":"source/_posts/C-中的委托与事件/Csharp_delegate_event.png","slug":"Csharp_delegate_event.png","post":"cjvibqxx7000v5cv9usqix2ka","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/nextrst.png","slug":"nextrst.png","post":"cjvibqxwy000l5cv98qgtw9xp","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/rst.png","slug":"rst.png","post":"cjvibqxwy000l5cv98qgtw9xp","modified":0,"renderable":0},{"_id":"source/_posts/Android-Studio-中常用的一些布局-二/sea.jpg","slug":"sea.jpg","post":"cjvibqxwy000l5cv98qgtw9xp","modified":0,"renderable":0},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/flower.jpg","slug":"flower.jpg","post":"cjvibqxxr001k5cv9vy44isse","modified":0,"renderable":0},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/newrepository.png","slug":"newrepository.png","post":"cjvibqxxr001k5cv9vy44isse","modified":0,"renderable":0},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/public.png","slug":"public.png","post":"cjvibqxxr001k5cv9vy44isse","modified":0,"renderable":0},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/signup.png","slug":"signup.png","post":"cjvibqxxr001k5cv9vy44isse","modified":0,"renderable":0},{"_id":"source/_posts/如何使用Hexo和GitHub搭建博客/themes.png","slug":"themes.png","post":"cjvibqxxr001k5cv9vy44isse","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/asynchronous.png","slug":"asynchronous.png","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/callback.png","slug":"callback.png","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/direct.png","slug":"direct.png","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/direct1.png","slug":"direct1.png","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/java-回调机制的使用/testrst.png","slug":"testrst.png","post":"cjvibqxxk001b5cv98kcghmxm","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/BaseView.png","slug":"BaseView.png","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/Model_View_Presenter_GUI_Design_Pattern.png","slug":"Model_View_Presenter_GUI_Design_Pattern.png","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/beautiful-nature-images.jpg","slug":"beautiful-nature-images.jpg","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/filelist.png","slug":"filelist.png","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/mvp.png","slug":"mvp.png","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0},{"_id":"source/_posts/浅谈-MVP-架构/taskslist.png","slug":"taskslist.png","post":"cjvibqxxz001u5cv93f5k0t09","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjvibqxwi00095cv9ctd4v86p","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxww000h5cv9g8sv21vv"},{"post_id":"cjvibqxw000015cv93ij0hr51","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxwz000m5cv9bhrafn7y"},{"post_id":"cjvibqxwm000a5cv9ms4t4bnt","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxx2000p5cv9qax4j1qi"},{"post_id":"cjvibqxws000e5cv9a1qi3hg2","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxx5000t5cv9v2q30m4e"},{"post_id":"cjvibqxw700035cv9r6nrnbi2","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxx8000w5cv9fvqp3suw"},{"post_id":"cjvibqxwv000g5cv9zb4xnm2b","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxa000z5cv9y2xmowy1"},{"post_id":"cjvibqxwy000l5cv98qgtw9xp","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxc00115cv9k1if4m7a"},{"post_id":"cjvibqxwd00075cv9sjqez7vj","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxg00155cv9y8kff689"},{"post_id":"cjvibqxx1000o5cv9xl92peda","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxi00185cv9137vo7sy"},{"post_id":"cjvibqxx7000v5cv9usqix2ka","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxl001c5cv95cg8zfhz"},{"post_id":"cjvibqxx9000y5cv9y3vkgkmj","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxn001e5cv93tln988u"},{"post_id":"cjvibqxxa00105cv9gekp1dwc","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxq001h5cv9zzpoycef"},{"post_id":"cjvibqxxf00145cv9s8fbd58n","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxs001l5cv9vd6d2obz"},{"post_id":"cjvibqxxh00175cv94i4vbqtd","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxv001p5cv99m8g9a1n"},{"post_id":"cjvibqxxk001b5cv98kcghmxm","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxxx001s5cv92ikli8hv"},{"post_id":"cjvibqxxp001g5cv9yw2zskhj","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxy0001v5cv90qevzhq3"},{"post_id":"cjvibqxxr001k5cv9vy44isse","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxy2001y5cv9b6154p7e"},{"post_id":"cjvibqxxu001o5cv9otttjvwn","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxy400215cv91vubtexd"},{"post_id":"cjvibqxxm001d5cv93jc0czpb","category_id":"cjvibqxxr001j5cv958ec21sb","_id":"cjvibqxy500225cv959i6tij6"},{"post_id":"cjvibqxxw001r5cv9zsqiu7i2","category_id":"cjvibqxxr001j5cv958ec21sb","_id":"cjvibqxy500235cv94sxszil5"},{"post_id":"cjvibqxxz001u5cv93f5k0t09","category_id":"cjvibqxwb00055cv95cz9c9bm","_id":"cjvibqxy600255cv9jeib61sy"},{"post_id":"cjvibqxy1001x5cv9ffustb71","category_id":"cjvibqxxr001j5cv958ec21sb","_id":"cjvibqxy600265cv9vomi2wao"}],"PostTag":[{"post_id":"cjvibqxw000015cv93ij0hr51","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxwr000d5cv9a9tq5zbe"},{"post_id":"cjvibqxwm000a5cv9ms4t4bnt","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxwu000f5cv9xjojk00u"},{"post_id":"cjvibqxws000e5cv9a1qi3hg2","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxwy000k5cv93ezrhskn"},{"post_id":"cjvibqxw700035cv9r6nrnbi2","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxx0000n5cv99c6qk277"},{"post_id":"cjvibqxwv000g5cv9zb4xnm2b","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxx3000r5cv9z572y6v0"},{"post_id":"cjvibqxwd00075cv9sjqez7vj","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxx6000u5cv9jx0wzv5l"},{"post_id":"cjvibqxx9000y5cv9y3vkgkmj","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxxe00135cv9va3rx2sb"},{"post_id":"cjvibqxwi00095cv9ctd4v86p","tag_id":"cjvibqxx3000q5cv9310uera9","_id":"cjvibqxxh00165cv9s5kgrtrj"},{"post_id":"cjvibqxwi00095cv9ctd4v86p","tag_id":"cjvibqxx8000x5cv9kli3l0wj","_id":"cjvibqxxj001a5cv9ai04wlr4"},{"post_id":"cjvibqxwy000l5cv98qgtw9xp","tag_id":"cjvibqxx3000q5cv9310uera9","_id":"cjvibqxxr001i5cv9nsyjfxmw"},{"post_id":"cjvibqxwy000l5cv98qgtw9xp","tag_id":"cjvibqxx8000x5cv9kli3l0wj","_id":"cjvibqxxt001m5cv9km36mdfv"},{"post_id":"cjvibqxxp001g5cv9yw2zskhj","tag_id":"cjvibqxwc00065cv9j83nzugy","_id":"cjvibqxxw001q5cv9f8h1yxdc"},{"post_id":"cjvibqxx1000o5cv9xl92peda","tag_id":"cjvibqxx3000q5cv9310uera9","_id":"cjvibqxy1001w5cv9bawox5i1"},{"post_id":"cjvibqxx1000o5cv9xl92peda","tag_id":"cjvibqxx8000x5cv9kli3l0wj","_id":"cjvibqxy3001z5cv99auhd9ab"},{"post_id":"cjvibqxx7000v5cv9usqix2ka","tag_id":"cjvibqxxy001t5cv9p8l0xbxv","_id":"cjvibqxy700285cv9ti3y1t8n"},{"post_id":"cjvibqxx7000v5cv9usqix2ka","tag_id":"cjvibqxy300205cv9t0yn186n","_id":"cjvibqxy800295cv9l7rbvtgg"},{"post_id":"cjvibqxx7000v5cv9usqix2ka","tag_id":"cjvibqxy500245cv9xlhcn14e","_id":"cjvibqxy9002b5cv9ommryx8x"},{"post_id":"cjvibqxxa00105cv9gekp1dwc","tag_id":"cjvibqxy700275cv9tv5zwvg4","_id":"cjvibqxyb002e5cv9ge1ndgs5"},{"post_id":"cjvibqxxa00105cv9gekp1dwc","tag_id":"cjvibqxy8002a5cv908jwaxbu","_id":"cjvibqxyc002f5cv9s392cy6o"},{"post_id":"cjvibqxxa00105cv9gekp1dwc","tag_id":"cjvibqxy9002c5cv9axxx1egb","_id":"cjvibqxyd002h5cv93yscpekt"},{"post_id":"cjvibqxxf00145cv9s8fbd58n","tag_id":"cjvibqxya002d5cv925zgvp3o","_id":"cjvibqxye002j5cv9epk45pmz"},{"post_id":"cjvibqxxf00145cv9s8fbd58n","tag_id":"cjvibqxyc002g5cv9x2c3mjim","_id":"cjvibqxyf002k5cv9xdtu093m"},{"post_id":"cjvibqxxh00175cv94i4vbqtd","tag_id":"cjvibqxye002i5cv98ze9cqe4","_id":"cjvibqxyh002n5cv9r0po68t6"},{"post_id":"cjvibqxxh00175cv94i4vbqtd","tag_id":"cjvibqxyg002l5cv9quhqhkym","_id":"cjvibqxyh002o5cv9r8q8ky6e"},{"post_id":"cjvibqxxk001b5cv98kcghmxm","tag_id":"cjvibqxyg002m5cv932f6kfzp","_id":"cjvibqxyi002q5cv9xhkyuscr"},{"post_id":"cjvibqxxm001d5cv93jc0czpb","tag_id":"cjvibqxyh002p5cv9t4iqn90b","_id":"cjvibqxyj002s5cv94sm2bnbo"},{"post_id":"cjvibqxxr001k5cv9vy44isse","tag_id":"cjvibqxyi002r5cv94fndgcxj","_id":"cjvibqxyj002u5cv9spab6cew"},{"post_id":"cjvibqxxu001o5cv9otttjvwn","tag_id":"cjvibqxyj002t5cv9y8lon622","_id":"cjvibqxyl002x5cv9ymhoo4qu"},{"post_id":"cjvibqxxu001o5cv9otttjvwn","tag_id":"cjvibqxyj002v5cv960tr4x8r","_id":"cjvibqxym002y5cv9lw2hak97"},{"post_id":"cjvibqxxw001r5cv9zsqiu7i2","tag_id":"cjvibqxyh002p5cv9t4iqn90b","_id":"cjvibqxym00305cv9lhbrm09r"},{"post_id":"cjvibqxxz001u5cv93f5k0t09","tag_id":"cjvibqxym002z5cv9i0ndkvns","_id":"cjvibqxyn00325cv9yvfc3bg6"},{"post_id":"cjvibqxy1001x5cv9ffustb71","tag_id":"cjvibqxyh002p5cv9t4iqn90b","_id":"cjvibqxyo00335cv90alr52xt"}],"Tag":[{"name":"Android","_id":"cjvibqxwc00065cv9j83nzugy"},{"name":"Android Studio","_id":"cjvibqxx3000q5cv9310uera9"},{"name":"布局","_id":"cjvibqxx8000x5cv9kli3l0wj"},{"name":"C#","_id":"cjvibqxxy001t5cv9p8l0xbxv"},{"name":"委托","_id":"cjvibqxy300205cv9t0yn186n"},{"name":"事件","_id":"cjvibqxy500245cv9xlhcn14e"},{"name":"C++","_id":"cjvibqxy700275cv9tv5zwvg4"},{"name":"多态性","_id":"cjvibqxy8002a5cv908jwaxbu"},{"name":"虚函数","_id":"cjvibqxy9002c5cv9axxx1egb"},{"name":"Echarts","_id":"cjvibqxya002d5cv925zgvp3o"},{"name":"Mysql","_id":"cjvibqxyc002g5cv9x2c3mjim"},{"name":"Markdown","_id":"cjvibqxye002i5cv98ze9cqe4"},{"name":"写作","_id":"cjvibqxyg002l5cv9quhqhkym"},{"name":"Java 回调机制","_id":"cjvibqxyg002m5cv932f6kfzp"},{"name":"随笔","_id":"cjvibqxyh002p5cv9t4iqn90b"},{"name":"技术","_id":"cjvibqxyi002r5cv94fndgcxj"},{"name":"hexo","_id":"cjvibqxyj002t5cv9y8lon622"},{"name":"git","_id":"cjvibqxyj002v5cv960tr4x8r"},{"name":"MVP","_id":"cjvibqxym002z5cv9i0ndkvns"}]}}